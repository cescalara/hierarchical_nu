
// Code generated by stanc v2.25.0
#include <stan/model/model_header.hpp>
namespace atmo_gen_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 647, column 0 to column 44)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 648, column 0 to column 44)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 649, column 0 to column 43)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 653, column 0 to column 21)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 654, column 0 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 655, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 656, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 657, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 658, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 659, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 660, column 0 to column 22)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 664, column 0 to column 50)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 640, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 641, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 642, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 643, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 13, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 18, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 16, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 22, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 11, column 45, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 31, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 31, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 32, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 35, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 34, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 34, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 38, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 29, column 39, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 46, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 47, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 49, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 48, column 15, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 48, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 51, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 45, column 39, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 59, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 58, column 25, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 58, column 10, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 56, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 55, column 20, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 55, column 5, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 61, column 5, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 54, column 55, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 68, column 18, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 68, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 69, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 72, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 71, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 70, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 74, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 66, column 0, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 79, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 80, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 81, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 89, column 12, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 95, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 93, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 92, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 91, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 90, column 12, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 88, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 87, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 86, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 85, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 84, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 83, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 82, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 98, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 78, column 0, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 15, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 17, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 18, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 20, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 21, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 22, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 23, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 38, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 23, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 35, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 28, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 35, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 33, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 45, column 7, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 43, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 30, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 49, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 50, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 51, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 52, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 54, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 56, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 12, column 59, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 7, column 0 to line 606, column 69)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 607, column 0 to line 611, column 74)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 612, column 0 to line 628, column 46)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 629, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 630, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 631, column 0 to column 228)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 632, column 0 to column 232)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 633, column 0 to column 110)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 634, column 0 to column 114)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 635, column 0 to column 118)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 6, column 0 to line 636, column 1)"};


template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
trapz(const Eigen::Matrix<T0__, -1, 1>& x_values,
      const Eigen::Matrix<T1__, -1, 1>& y_values, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 17;
    N = num_elements(x_values);
    local_scalar_t__ I;
    I = DUMMY_VAR__;
    
    current_statement__ = 18;
    I = 0;
    current_statement__ = 21;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 19;
      I = (I +
            ((0.5 * (x_values[((i + 1) - 1)] - x_values[(i - 1)])) *
              (y_values[(i - 1)] + y_values[((i + 1) - 1)])));}
    current_statement__ = 22;
    return I;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct trapz_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const Eigen::Matrix<T0__, -1, 1>& x_values,
           const Eigen::Matrix<T1__, -1, 1>& y_values,
           std::ostream* pstream__)  const 
{
return trapz(x_values, y_values, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
linspace(const T0__& A, const T1__& B, const int& N, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 24;
    validate_non_negative_index("output", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> output;
    output = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(output, DUMMY_VAR__);
    
    local_scalar_t__ dx;
    dx = DUMMY_VAR__;
    
    current_statement__ = 26;
    dx = ((B - A) / (N - 1));
    current_statement__ = 29;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 27;
      assign(output, cons_list(index_uni(i), nil_index_list()),
        (A + ((i - 1) * dx)), "assigning variable output");}
    current_statement__ = 30;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct linspace_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& A, const T1__& B, const int& N,
           std::ostream* pstream__)  const 
{
return linspace(A, B, N, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
eval_poly1d(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& coeffs,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 32;
    N = num_elements(coeffs);
    local_scalar_t__ res;
    res = DUMMY_VAR__;
    
    current_statement__ = 33;
    res = 0;
    current_statement__ = 36;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 34;
      res = (res + (coeffs[(i - 1)] * pow(x, (N - i))));}
    current_statement__ = 37;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eval_poly1d_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& coeffs,
           std::ostream* pstream__)  const 
{
return eval_poly1d(x, coeffs, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
truncate_value(const T0__& x, const T1__& min_val, const T2__& max_val,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 44;
    if (logical_lt(x, min_val)) {
      current_statement__ = 42;
      return min_val;
    } else {
      current_statement__ = 41;
      if (logical_gt(x, max_val)) {
        current_statement__ = 39;
        return max_val;
      } 
    }
    current_statement__ = 45;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct truncate_value_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& x, const T1__& min_val, const T2__& max_val,
           std::ostream* pstream__)  const 
{
return truncate_value(x, min_val, max_val, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
generate_bin_edges(const T0__& lower_edge, const T1__& upper_edge,
                   const int& nbins, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 47;
    validate_non_negative_index("binedges", "nbins + 1", (nbins + 1));
    std::vector<local_scalar_t__> binedges;
    binedges = std::vector<local_scalar_t__>((nbins + 1), DUMMY_VAR__);
    
    local_scalar_t__ binwidth;
    binwidth = DUMMY_VAR__;
    
    current_statement__ = 49;
    binwidth = ((upper_edge - lower_edge) / nbins);
    current_statement__ = 52;
    for (int i = 1; i <= (nbins + 1); ++i) {
      current_statement__ = 50;
      assign(binedges, cons_list(index_uni(i), nil_index_list()),
        (lower_edge + ((i - 1) * binwidth)), "assigning variable binedges");}
    current_statement__ = 53;
    return binedges;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct generate_bin_edges_functor__ {
template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
operator()(const T0__& lower_edge, const T1__& upper_edge, const int& nbins,
           std::ostream* pstream__)  const 
{
return generate_bin_edges(lower_edge, upper_edge, nbins, pstream__);
}
};

template <typename T0__, typename T1__>
int
binary_search(const T0__& value, const std::vector<T1__>& binedges,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int L;
    L = std::numeric_limits<int>::min();
    
    current_statement__ = 55;
    L = 1;
    int R;
    R = std::numeric_limits<int>::min();
    
    current_statement__ = 56;
    R = size(binedges);
    int m;
    m = std::numeric_limits<int>::min();
    
    current_statement__ = 70;
    if (logical_lt(value, binedges[(1 - 1)])) {
      current_statement__ = 69;
      return 0;
    } else {
      current_statement__ = 68;
      if (logical_gt(value, binedges[(R - 1)])) {
        current_statement__ = 67;
        return (R + 1);
      } else {
        current_statement__ = 65;
        while (logical_lt(L, (R - 1))) {
          current_statement__ = 58;
          m = ((L + R) / 2);
          current_statement__ = 63;
          if (logical_lt(binedges[(m - 1)], value)) {
            current_statement__ = 62;
            L = m;
          } else {
            current_statement__ = 61;
            if (logical_gt(binedges[(m - 1)], value)) {
              current_statement__ = 60;
              R = m;
            } else {
              current_statement__ = 59;
              return m;
            }
          }
        }
      }
    }
    current_statement__ = 71;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct binary_search_functor__ {
template <typename T0__, typename T1__>
int
operator()(const T0__& value, const std::vector<T1__>& binedges,
           std::ostream* pstream__)  const 
{
return binary_search(value, binedges, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
interpolate(const Eigen::Matrix<T0__, -1, 1>& x_values,
            const Eigen::Matrix<T1__, -1, 1>& y_values, const T2__& x,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x_left;
    x_left = DUMMY_VAR__;
    
    local_scalar_t__ y_left;
    y_left = DUMMY_VAR__;
    
    local_scalar_t__ x_right;
    x_right = DUMMY_VAR__;
    
    local_scalar_t__ y_right;
    y_right = DUMMY_VAR__;
    
    local_scalar_t__ dydx;
    dydx = DUMMY_VAR__;
    
    int Nx;
    Nx = std::numeric_limits<int>::min();
    
    current_statement__ = 78;
    Nx = num_elements(x_values);
    local_scalar_t__ xmin;
    xmin = DUMMY_VAR__;
    
    current_statement__ = 79;
    xmin = x_values[(1 - 1)];
    local_scalar_t__ xmax;
    xmax = DUMMY_VAR__;
    
    current_statement__ = 80;
    xmax = x_values[(Nx - 1)];
    int i;
    i = std::numeric_limits<int>::min();
    
    current_statement__ = 81;
    i = 1;
    current_statement__ = 89;
    if ((primitive_value(logical_gt(x, xmax)) || primitive_value(
        logical_lt(x, xmin)))) {
      current_statement__ = 87;
      if (logical_gt(x, xmax)) {
        current_statement__ = 85;
        return y_values[(Nx - 1)];
      } else {
        current_statement__ = 84;
        if (logical_lt(x, xmin)) {
          current_statement__ = 82;
          return y_values[(1 - 1)];
        } 
      }
    } 
    current_statement__ = 96;
    if (logical_gte(x, x_values[((Nx - 1) - 1)])) {
      current_statement__ = 94;
      i = (Nx - 1);
    } else {
      current_statement__ = 92;
      while (logical_gt(x, x_values[((i + 1) - 1)])) {
        current_statement__ = 90;
        i = (i + 1);
      }
    }
    current_statement__ = 97;
    x_left = x_values[(i - 1)];
    current_statement__ = 98;
    y_left = y_values[(i - 1)];
    current_statement__ = 99;
    x_right = x_values[((i + 1) - 1)];
    current_statement__ = 100;
    y_right = y_values[((i + 1) - 1)];
    current_statement__ = 101;
    dydx = ((y_right - y_left) / (x_right - x_left));
    current_statement__ = 102;
    return (y_left + (dydx * (x - x_left)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct interpolate_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const Eigen::Matrix<T0__, -1, 1>& x_values,
           const Eigen::Matrix<T1__, -1, 1>& y_values, const T2__& x,
           std::ostream* pstream__)  const 
{
return interpolate(x_values, y_values, x, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
AtmopshericNumuFlux(const T0__& true_energy,
                    const Eigen::Matrix<T1__, -1, 1>& true_dir,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> AtmosphericFluxPolyCoeffs;
    AtmosphericFluxPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(30, std::vector<local_scalar_t__>(100, DUMMY_VAR__));
    
    current_statement__ = 104;
    assign(AtmosphericFluxPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(-1.98015639)
      .add(-2.06990581).add(-2.28102841).add(-2.5048243).add(-2.73832406)
      .add(-2.98153484).add(-3.23295258).add(-3.4836111).add(-3.73704168)
      .add(-3.9929935).add(-4.25083558).add(-4.51097506).add(-4.77320619)
      .add(-5.03694404).add(-5.3016799).add(-5.56730132).add(-5.83391547)
      .add(-6.10197286).add(-6.37184525).add(-6.64436918).add(-6.92212103)
      .add(-7.20151475).add(-7.47929293).add(-7.75687533).add(-8.03560464)
      .add(-8.31524896).add(-8.59622776).add(-8.87892723).add(-9.16356273)
      .add(-9.45014546).add(-9.73955079).add(-10.03194011).add(-10.32752948)
      .add(-10.62639137).add(-10.92863038).add(-11.23418615)
      .add(-11.54267921).add(-11.85417477).add(-12.16882135)
      .add(-12.48615571).add(-12.80598245).add(-13.12773531)
      .add(-13.45154511).add(-13.77716961).add(-14.10443447)
      .add(-14.43340331).add(-14.76372896).add(-15.09492324)
      .add(-15.42697458).add(-15.76005429).add(-16.09441157)
      .add(-16.43040613).add(-16.7669652).add(-17.10396077).add(-17.44180432)
      .add(-17.78061009).add(-18.12048441).add(-18.46119902)
      .add(-18.80257118).add(-19.14497854).add(-19.48807276)
      .add(-19.83120512).add(-20.17383955).add(-20.51615953)
      .add(-20.85808813).add(-21.19824132).add(-21.53516751)
      .add(-21.86978185).add(-22.202192).add(-22.53013232).add(-22.85303624)
      .add(-23.17163324).add(-23.48569116).add(-23.79511144)
      .add(-24.09975962).add(-24.40085482).add(-24.69940318)
      .add(-24.99492706).add(-25.28816168).add(-25.58040571)
      .add(-25.87460545).add(-26.17342592).add(-26.47426044)
      .add(-26.78133635).add(-27.09497504).add(-27.41648448)
      .add(-27.74672402).add(-28.0862232).add(-28.43231211).add(-28.78799004)
      .add(-29.15368342).add(-29.52833128).add(-29.91235745).add(-30.2978475)
      .add(-30.70124633).add(-31.10831576).add(-31.52247839)
      .add(-31.94063427).add(-32.35710298).add(-32.54291653).array())
      .add(stan::math::array_builder<double>().add(-1.97276985)
      .add(-2.06239285).add(-2.27324221).add(-2.49680217).add(-2.73008337)
      .add(-2.97293083).add(-3.22383104).add(-3.47442787).add(-3.72785996)
      .add(-3.98379502).add(-4.24160601).add(-4.50165454).add(-4.76373087)
      .add(-5.02726514).add(-5.29177041).add(-5.55714057).add(-5.82348116)
      .add(-6.0912459).add(-6.36080221).add(-6.63295968).add(-6.91009685)
      .add(-7.18889227).add(-7.46633503).add(-7.74369245).add(-8.02215182)
      .add(-8.30148161).add(-8.58206192).add(-8.86425662).add(-9.14827027)
      .add(-9.43411252).add(-9.72266747).add(-10.01411459).add(-10.30869882)
      .add(-10.60652099).add(-10.9077172).add(-11.21225853).add(-11.51979014)
      .add(-11.83039656).add(-12.14423751).add(-12.46086126)
      .add(-12.78007657).add(-13.10131472).add(-13.42470841)
      .add(-13.75000932).add(-14.07704185).add(-14.40587328)
      .add(-14.73614799).add(-15.06737688).add(-15.39955751)
      .add(-15.73284996).add(-16.06751929).add(-16.40392533)
      .add(-16.74100273).add(-17.07862431).add(-17.41720435)
      .add(-17.75686395).add(-18.09770172).add(-18.43949489)
      .add(-18.78204741).add(-19.12568532).add(-19.47007346)
      .add(-19.81457924).add(-20.15865138).add(-20.50241512)
      .add(-20.84575875).add(-21.18728946).add(-21.52551175).add(-21.8612539)
      .add(-22.19460098).add(-22.52332446).add(-22.84682062)
      .add(-23.16576504).add(-23.47998524).add(-23.78941225)
      .add(-24.09388936).add(-24.39462821).add(-24.69264295)
      .add(-24.98748594).add(-25.27991992).add(-25.57128479)
      .add(-25.86452252).add(-26.16228866).add(-26.46209742)
      .add(-26.76814963).add(-27.08081061).add(-27.40140641)
      .add(-27.73083916).add(-28.06964398).add(-28.41527326)
      .add(-28.77068112).add(-29.13633969).add(-29.51125262)
      .add(-29.89583036).add(-30.28242352).add(-30.68682321)
      .add(-31.09523974).add(-31.51092274).add(-31.93084655).add(-32.3493258)
      .add(-32.53607988).array()).add(stan::math::array_builder<double>()
      .add(-1.96499252).add(-2.05445424).add(-2.26495215).add(-2.48820249)
      .add(-2.72120067).add(-2.96363099).add(-3.21397128).add(-3.46447441)
      .add(-3.71789182).add(-3.97380897).add(-4.23159842).add(-4.49157103)
      .add(-4.75350837).add(-5.01685243).add(-5.28113546).add(-5.54625529)
      .add(-5.81231308).add(-6.07976434).add(-6.34897438).add(-6.62072838)
      .add(-6.89721365).add(-7.17537695).add(-7.45245451).add(-7.7295647)
      .add(-8.0077417).add(-8.28675188).add(-8.56693239).add(-8.84862018)
      .add(-9.13200433).add(-9.41708854).add(-9.7047621).add(-9.99522077)
      .add(-10.28873833).add(-10.5854451).add(-10.88551128).add(-11.188943)
      .add(-11.49541366).add(-11.80503061).add(-12.11796766)
      .add(-12.43378719).add(-12.75230411).add(-13.07294856)
      .add(-13.39585564).add(-13.72077109).add(-14.04751788)
      .add(-14.37616658).add(-14.70635243).add(-15.03758498)
      .add(-15.36987051).add(-15.70335729).add(-16.03832615)
      .add(-16.37513699).add(-16.71273218).add(-17.05098584)
      .add(-17.39031565).add(-17.73085075).add(-18.07268283)
      .add(-18.41559631).add(-18.75938272).add(-19.10431533).add(-19.4500738)
      .add(-19.79604417).add(-20.14166068).add(-20.48698741)
      .add(-20.83187603).add(-21.17492578).add(-21.51459496)
      .add(-21.85161664).add(-22.18604678).add(-22.51569168)
      .add(-22.83990603).add(-23.15930729).add(-23.47378092)
      .add(-23.78328605).add(-24.0876442).add(-24.38805971).add(-24.68555497)
      .add(-24.97971363).add(-25.27132723).add(-25.56177831)
      .add(-25.85400512).add(-26.15065461).add(-26.4493654).add(-26.75431219)
      .add(-27.06590602).add(-27.38549281).add(-27.71401957)
      .add(-28.05202843).add(-28.39710013).add(-28.752145).add(-29.11768555)
      .add(-29.49279487).add(-29.87787682).add(-30.2655646).add(-30.67097026)
      .add(-31.08078075).add(-31.49806626).add(-31.91988742)
      .add(-32.34055847).add(-32.52834982).array())
      .add(stan::math::array_builder<double>().add(-1.95695625)
      .add(-2.04622042).add(-2.25628573).add(-2.47914922).add(-2.71179535)
      .add(-2.95374992).add(-3.20348308).add(-3.45385129).add(-3.70722702)
      .add(-3.96311309).add(-4.22087758).add(-4.48077593).add(-4.74257656)
      .add(-5.00573013).add(-5.2697855).add(-5.5346419).add(-5.80039311)
      .add(-6.06749476).add(-6.33631205).add(-6.60760849).add(-6.8833877)
      .add(-7.16086834).add(-7.43753467).add(-7.71436103).add(-7.99223202)
      .add(-8.27090956).add(-8.55068429).add(-8.83186107).add(-9.11460792)
      .add(-9.39891702).add(-9.68567817).add(-9.97510051).add(-10.26748595)
      .add(-10.56299487).add(-10.86183409).add(-11.16404874)
      .add(-11.46934455).add(-11.77785576).add(-12.08977383)
      .add(-12.40467842).add(-12.72239336).add(-13.04234933)
      .add(-13.36468482).add(-13.68913978).add(-14.01553582)
      .add(-14.34394635).add(-14.67399671).add(-15.00519461)
      .add(-15.33755449).add(-15.67121209).add(-16.00646381)
      .add(-16.34366939).add(-16.68177922).add(-17.02066908)
      .add(-17.36076075).add(-17.70219252).add(-18.04505015)
      .add(-18.38912711).add(-18.73420364).add(-19.08049924)
      .add(-19.42771044).add(-19.77524489).add(-20.12252361).add(-20.4695466)
      .add(-20.81612731).add(-21.16085834).add(-21.50214954)
      .add(-21.84062927).add(-22.1763165).add(-22.50704931).add(-22.83213538)
      .add(-23.15212854).add(-23.46696969).add(-23.7766441).add(-24.08095194)
      .add(-24.38109032).add(-24.67809016).add(-24.97156778)
      .add(-25.26234491).add(-25.55184833).add(-25.8430133).add(-26.13847916)
      .add(-26.43601286).add(-26.73976343).add(-27.05018961)
      .add(-27.36865913).add(-27.6961662).add(-28.0332615).add(-28.37766064)
      .add(-28.7322318).add(-29.09755296).add(-29.47277201).add(-29.8582941)
      .add(-30.24705437).add(-30.65346006).add(-31.06470606)
      .add(-31.48367741).add(-31.90753597).add(-32.33060277)
      .add(-32.51954267).array()).add(stan::math::array_builder<double>()
      .add(-1.94845527).add(-2.03747273).add(-2.2469925).add(-2.46935822)
      .add(-2.70155028).add(-2.94293964).add(-3.19199106).add(-3.44216229)
      .add(-3.69545584).add(-3.95129312).add(-4.20903364).add(-4.46887148)
      .add(-4.73055586).add(-4.99354121).add(-5.25738837).add(-5.52199328)
      .add(-5.78743726).add(-6.05417249).add(-6.32256513).add(-6.5933593)
      .add(-6.86838314).add(-7.14513199).add(-7.42134007).add(-7.69784405)
      .add(-7.97538398).add(-8.25371605).add(-8.53308111).add(-8.81374666)
      .add(-9.0958535).add(-9.37937571).add(-9.66519758).add(-9.95353759)
      .add(-10.24472413).add(-10.53894763).add(-10.83645386)
      .add(-11.13733115).add(-11.4413223).add(-11.74859321).add(-12.05935731)
      .add(-12.37321566).add(-12.69000456).add(-13.00915769)
      .add(-13.33081829).add(-13.65472111).add(-13.98068656)
      .add(-14.30879049).add(-14.63864754).add(-14.96976297)
      .add(-15.30215865).add(-15.63595694).add(-15.97146942)
      .add(-16.30905529).add(-16.64767314).add(-16.98720073)
      .add(-17.32806453).add(-17.67041326).add(-18.01432772)
      .add(-18.35961256).add(-18.70603813).add(-19.05376938)
      .add(-19.40252217).add(-19.75172938).add(-20.10080069)
      .add(-20.44966942).add(-20.79810941).add(-21.14470864)
      .add(-21.48782649).add(-21.82797577).add(-22.16512911)
      .add(-22.49715228).add(-22.82329903).add(-23.14405255)
      .add(-23.45940562).add(-23.76936675).add(-24.07371521)
      .add(-24.37364079).add(-24.67018318).add(-24.96299288)
      .add(-25.25292346).add(-25.54144761).add(-25.83149852)
      .add(-26.12570915).add(-26.42197908).add(-26.72443234)
      .add(-27.03357756).add(-27.35080647).add(-27.67716289)
      .add(-28.01320777).add(-28.35679867).add(-28.71076353)
      .add(-29.07574132).add(-29.45096069).add(-29.83683719)
      .add(-30.22662931).add(-30.6340134).add(-31.04672739).add(-31.46746656)
      .add(-31.89351282).add(-32.31920489).add(-32.50942185).array())
      .add(stan::math::array_builder<double>().add(-1.93954285)
      .add(-2.02825771).add(-2.23710214).add(-2.45884012).add(-2.69045546)
      .add(-2.93116949).add(-3.17944463).add(-3.42933476).add(-3.68248473)
      .add(-3.9382373).add(-4.19594007).add(-4.45572018).add(-4.71730156)
      .add(-4.98013701).add(-5.24379377).add(-5.50815858).add(-5.77329386)
      .add(-6.03964317).add(-6.30757368).add(-6.57781177).add(-6.85201912)
      .add(-7.12797283).add(-7.40365955).add(-7.67978685).add(-7.95695746)
      .add(-8.23492148).add(-8.51386744).add(-8.79402004).add(-9.07548588)
      .add(-9.35821295).add(-9.64307222).add(-9.93028573).add(-10.22020517)
      .add(-10.51304987).add(-10.8091064).add(-11.10851061).add(-11.41104757)
      .add(-11.71692043).add(-12.0263699).add(-12.33902368).add(-12.65473523)
      .add(-12.97294465).add(-13.29380204).add(-13.61703795)
      .add(-13.94247217).add(-14.27018262).add(-14.5997724).add(-14.93074367)
      .add(-15.2631248).add(-15.59702371).add(-15.93276649).add(-16.27071122)
      .add(-16.60982477).add(-16.94998704).add(-17.29162975)
      .add(-17.63491326).add(-17.97991453).add(-18.32645172).add(-18.674287)
      .add(-19.02353024).add(-19.37391959).add(-19.72491762).add(-20.0759254)
      .add(-20.42680731).add(-20.77729677).add(-21.12598017)
      .add(-21.47116492).add(-21.81323603).add(-22.15210856)
      .add(-22.48567064).add(-22.81311328).add(-23.1348399).add(-23.4508899)
      .add(-23.76129105).add(-24.0658018).add(-24.36560437).add(-24.66174729)
      .add(-24.95391693).add(-25.24300054).add(-25.53051866)
      .add(-25.81940347).add(-26.11228303).add(-26.40719453)
      .add(-26.70823772).add(-27.01597371).add(-27.33182067)
      .add(-27.65687458).add(-27.99170862).add(-28.33432998)
      .add(-28.68752858).add(-29.05201029).add(-29.42709126)
      .add(-29.81320783).add(-30.20396564).add(-30.61228409)
      .add(-31.02648369).add(-31.44906698).add(-31.87745988)
      .add(-32.30603498).add(-32.49767781).array())
      .add(stan::math::array_builder<double>().add(-1.93017477)
      .add(-2.01851835).add(-2.22652506).add(-2.44746813).add(-2.6783441)
      .add(-2.91823196).add(-3.16559633).add(-3.41508183).add(-3.66799172)
      .add(-3.9235959).add(-4.18122804).add(-4.44094325).add(-4.70243379)
      .add(-4.96514444).add(-5.22864147).add(-5.49279416).add(-5.75763669)
      .add(-6.02359593).add(-6.29103784).add(-6.56067113).add(-6.83400023)
      .add(-7.10908955).add(-7.38418155).add(-7.65986572).add(-7.93661742)
      .add(-8.21418224).add(-8.49269515).add(-8.77233306).add(-9.05316091)
      .add(-9.33509129).add(-9.61897182).add(-9.90502011).add(-10.19360598)
      .add(-10.48497477).add(-10.77945474).add(-11.0772335).add(-11.378144)
      .add(-11.6824331).add(-11.99037534).add(-12.30163164).add(-12.61607902)
      .add(-12.93316875).add(-13.25306095).add(-13.57548379)
      .add(-13.90025754).add(-14.22746205).add(-14.5566881).add(-14.88743404)
      .add(-15.2197336).add(-15.55367891).add(-15.88960963).add(-16.22788181)
      .add(-16.56747045).add(-16.90825761).add(-17.25068065)
      .add(-17.59491278).add(-17.94102822).add(-18.28886121)
      .add(-18.63816773).add(-18.98900245).add(-19.34112931)
      .add(-19.69404598).add(-20.04714878).add(-20.40023157)
      .add(-20.75298734).add(-21.10400551).add(-21.45154086)
      .add(-21.79583703).add(-22.13673812).add(-22.4721477).add(-22.80118276)
      .add(-23.12415485).add(-23.44114236).add(-23.75218648)
      .add(-24.05702445).add(-24.35683013).add(-24.65266071)
      .add(-24.94424039).add(-25.23249205).add(-25.51898638)
      .add(-25.80665586).add(-26.09812548).add(-26.39157577)
      .add(-26.69108326).add(-26.99726445).add(-27.31156672)
      .add(-27.63514102).add(-27.9685749).add(-28.31003354).add(-28.66227139)
      .add(-29.02606766).add(-29.40083339).add(-29.78703775)
      .add(-30.17865991).add(-30.58783675).add(-31.00351602)
      .add(-31.42800712).add(-31.85891061).add(-32.2906568).add(-32.48389809)
      .array()).add(stan::math::array_builder<double>().add(-1.92050298)
      .add(-2.00840107).add(-2.21539255).add(-2.43535482).add(-2.66530706)
      .add(-2.904195).add(-3.15049019).add(-3.39941719).add(-3.65195823)
      .add(-3.90731834).add(-4.16481655).add(-4.42443259).add(-4.68582174)
      .add(-4.94841469).add(-5.21176896).add(-5.47572714).add(-5.74028425)
      .add(-6.00583983).add(-6.2727542).add(-6.54171669).add(-6.81408389)
      .add(-7.08821248).add(-7.36260453).add(-7.63774579).add(-7.91399812)
      .add(-8.19110658).add(-8.46915348).add(-8.74826396).add(-9.02845353)
      .add(-9.30958847).add(-9.59248031).add(-9.87733104).add(-10.16452033)
      .add(-10.45431377).add(-10.74708034).add(-11.04306289)
      .add(-11.34214791).add(-11.64463316).add(-11.95083493)
      .add(-12.26045578).add(-12.57340477).add(-12.88915108)
      .add(-13.20786962).add(-13.52928921).add(-13.85323268)
      .add(-14.17978213).add(-14.50851538).add(-14.83892637)
      .add(-15.17105275).add(-15.50496923).add(-15.84102764)
      .add(-16.17958069).add(-16.51961106).add(-16.86100271)
      .add(-17.20419876).add(-17.54938632).add(-17.89663799)
      .add(-18.24580679).add(-18.59664488).add(-18.94915192)
      .add(-19.30312192).add(-19.65809414).add(-20.01346541)
      .add(-20.36895861).add(-20.72422759).add(-21.07787157)
      .add(-21.42809385).add(-21.77498183).add(-22.11829299)
      .add(-22.45593754).add(-22.78694386).add(-23.11151544)
      .add(-23.42975852).add(-23.74171888).add(-24.04711125)
      .add(-24.34709934).add(-24.64274835).add(-24.93382227).add(-25.221282)
      .add(-25.50675094).add(-25.79316351).add(-26.08314405)
      .add(-26.37502322).add(-26.67285564).add(-26.97731679)
      .add(-27.28988642).add(-27.6117734).add(-27.94358211).add(-28.28364492)
      .add(-28.63468369).add(-28.99755777).add(-29.37178135).add(-29.7578702)
      .add(-30.15020624).add(-30.56011949).add(-30.97723562).add(-31.4036741)
      .add(-31.83724944).add(-32.27248478).add(-32.46752421).array())
      .add(stan::math::array_builder<double>().add(-1.91053194)
      .add(-1.99789466).add(-2.20365062).add(-2.42239385).add(-2.65117815)
      .add(-2.8888279).add(-3.13382839).add(-3.38197292).add(-3.63394954)
      .add(-3.88891146).add(-4.14616548).add(-4.40561481).add(-4.66687373)
      .add(-4.92935251).add(-5.19259063).add(-5.45639192).add(-5.7206971)
      .add(-5.98586245).add(-6.25223335).add(-6.52047381).add(-6.79180029)
      .add(-7.06486579).add(-7.33843601).add(-7.6129109).add(-7.88855735)
      .add(-8.16512799).add(-8.4426571).add(-8.72121669).add(-9.00076624)
      .add(-9.28111393).add(-9.56301951).add(-9.8466545).add(-10.13239588)
      .add(-10.42051957).add(-10.71143115).add(-11.00543049).add(-11.3024627)
      .add(-11.60288407).add(-11.90706205).add(-12.21475146)
      .add(-12.52590489).add(-12.84001902).add(-13.15729068)
      .add(-13.47745447).add(-13.80033951).add(-14.12603135)
      .add(-14.45409474).add(-14.78401889).add(-15.11584367).add(-15.4496244)
      .add(-15.7857231).add(-16.12448725).add(-16.46490631).add(-16.80686545)
      .add(-17.15081326).add(-17.49695149).add(-17.84535207)
      .add(-18.19588957).add(-18.54831496).add(-18.90257362)
      .add(-19.25849455).add(-19.61566645).add(-19.9734937).add(-20.33162931)
      .add(-20.68969131).add(-21.04629875).add(-21.39960739)
      .add(-21.74953302).add(-22.09572857).add(-22.43610004)
      .add(-22.76956849).add(-23.09620737).add(-23.41613428)
      .add(-23.72938621).add(-24.03565203).add(-24.33608177)
      .add(-24.63174683).add(-24.922453).add(-25.20920177).add(-25.49367232)
      .add(-25.77880311).add(-26.06722101).add(-26.35741513)
      .add(-26.65342006).add(-26.95597455).add(-27.26659444)
      .add(-27.58654972).add(-27.91646448).add(-28.25484821)
      .add(-28.60439354).add(-28.96604702).add(-29.33943517)
      .add(-29.72513594).add(-30.11796622).add(-30.52842717)
      .add(-30.94687981).add(-31.37526202).add(-31.81165309)
      .add(-32.25072017).add(-32.44778674).array())
      .add(stan::math::array_builder<double>().add(-1.90037906)
      .add(-1.98710252).add(-2.19136019).add(-2.40858812).add(-2.63588773)
      .add(-2.87197707).add(-3.11536417).add(-3.36239856).add(-3.61350968)
      .add(-3.86781924).add(-4.12462973).add(-4.38377206).add(-4.64481903)
      .add(-4.90715635).add(-5.17029619).add(-5.43398921).add(-5.69810218)
      .add(-5.96292506).add(-6.22877142).add(-6.49626669).add(-6.76649052)
      .add(-7.03839278).add(-7.31100545).add(-7.58466408).add(-7.85956488)
      .add(-8.13548154).add(-8.4124109).add(-8.69037548).add(-8.96927522)
      .add(-9.2488491).add(-9.52978676).add(-9.8122099).add(-10.09647457)
      .add(-10.38285073).add(-10.67177108).add(-10.96359073)
      .add(-11.25831626).add(-11.55636968).add(-11.85818031)
      .add(-12.16356826).add(-12.47254513).add(-12.78464878)
      .add(-13.10010879).add(-13.41867401).add(-13.74018651)
      .add(-14.06473824).add(-14.39188192).add(-14.72110244)
      .add(-15.05244015).add(-15.38592872).add(-15.72193755)
      .add(-16.06080621).add(-16.40152945).add(-16.74399226)
      .add(-17.08864764).add(-17.43571219).add(-17.78525776)
      .add(-18.13718305).add(-18.49124067).add(-18.84732291)
      .add(-19.20529941).add(-19.56481748).add(-19.92529827)
      .add(-20.28632842).add(-20.64749628).add(-21.00745542)
      .add(-21.36432289).add(-21.71782831).add(-22.0675007).add(-22.41122923)
      .add(-22.74780397).add(-23.07713848).add(-23.3993372).add(-23.71440736)
      .add(-24.02200494).add(-24.3232592).add(-24.61924365).add(-24.90980731)
      .add(-25.19599499).add(-25.47954519).add(-25.76340323)
      .add(-26.05020276).add(-26.33860201).add(-26.63261819)
      .add(-26.93305886).add(-27.24148032).add(-27.55921704)
      .add(-27.88691629).add(-28.22327548).add(-28.57096167)
      .add(-28.93101589).add(-29.30318688).add(-29.68813227)
      .add(-30.08113893).add(-30.49186122).add(-30.91146014)
      .add(-31.34170751).add(-31.78101283).add(-32.22426171)
      .add(-32.42361197).array()).add(stan::math::array_builder<double>()
      .add(-1.89035838).add(-1.97633559).add(-2.17881109).add(-2.39418459)
      .add(-2.61961702).add(-2.85373734).add(-3.09508721).add(-3.34055584)
      .add(-3.59036046).add(-3.84362035).add(-4.09964941).add(-4.35821842)
      .add(-4.61886513).add(-4.88095197).add(-5.14395833).add(-5.40756801)
      .add(-5.67155154).add(-5.93610235).add(-6.2014755).add(-6.46823395)
      .add(-6.73731569).add(-7.00795965).add(-7.2794618).add(-7.55211722)
      .add(-7.82608179).add(-8.10117054).add(-8.37736217).add(-8.65464187)
      .add(-8.93285356).add(-9.21165975).add(-9.49166044).add(-9.77290396)
      .add(-10.05569974).add(-10.34028601).add(-10.62710416)
      .add(-10.91655548).add(-11.20870558).add(-11.50404641)
      .add(-11.80307978).add(-12.10570627).add(-12.41201691)
      .add(-12.72160998).add(-13.03476426).add(-13.35125687)
      .add(-13.67095446).add(-13.99396183).add(-14.31982319).add(-14.6480214)
      .add(-14.97859597).add(-15.31155648).add(-15.64727607)
      .add(-15.98608262).add(-16.32697379).add(-16.66983194)
      .add(-17.01511228).add(-17.36304537).add(-17.71370279)
      .add(-18.06700929).add(-18.42272187).add(-18.7806814).add(-19.14080419)
      .add(-19.50280647).add(-19.86613781).add(-20.23032497)
      .add(-20.59493708).add(-20.95868337).add(-21.31965867)
      .add(-21.67739583).add(-22.03128144).add(-22.37917506)
      .add(-22.71970719).add(-23.05259162).add(-23.37788308)
      .add(-23.69552595).add(-24.00512902).add(-24.30778687).add(-24.604566)
      .add(-24.89535824).add(-25.18125384).add(-25.46405455)
      .add(-25.74671618).add(-26.03188524).add(-26.31840331)
      .add(-26.61027422).add(-26.90838169).add(-27.2143277).add(-27.52951494)
      .add(-27.8546179).add(-28.18853336).add(-28.53390689).add(-28.89188091)
      .add(-29.26233681).add(-29.64603097).add(-30.03875681)
      .add(-30.44931135).add(-30.86972618).add(-31.30163242)
      .add(-31.74385294).add(-32.19159871).add(-32.39350428).array())
      .add(stan::math::array_builder<double>().add(-1.88094832)
      .add(-1.96608587).add(-2.16650572).add(-2.3796615).add(-2.60277891)
      .add(-2.8344146).add(-3.0731548).add(-3.31640704).add(-3.5642371)
      .add(-3.81580482).add(-4.07046469).add(-4.32795388).add(-4.58779501)
      .add(-4.8493416).add(-5.11204522).add(-5.37551554).add(-5.63940622)
      .add(-5.90377737).add(-6.16878585).add(-6.43489136).add(-6.70286923)
      .add(-6.97222146).add(-7.24249237).add(-7.51395736).add(-7.7867655)
      .add(-8.06079972).add(-8.33605103).add(-8.61249312).add(-8.88993117)
      .add(-9.16795501).add(-9.44705979).add(-9.727196).add(-10.00859371)
      .add(-10.29142143).add(-10.57609699).add(-10.86304571)
      .add(-11.15237824).add(-11.4446524).add(-11.74044939).add(-12.03976498)
      .add(-12.34279517).add(-12.64922487).add(-12.95940645)
      .add(-13.27316816).add(-13.59042164).add(-13.91129746)
      .add(-14.23534031).add(-14.56203748).add(-14.8914281).add(-15.22349615)
      .add(-15.55861394).add(-15.89709268).add(-16.23792939)
      .add(-16.58099983).add(-16.92675725).add(-17.27544337)
      .add(-17.62712777).add(-17.98176166).add(-18.3391083).add(-18.69895922)
      .add(-19.06128285).add(-19.42587485).add(-19.79222666)
      .add(-20.15981557).add(-20.5282073).add(-20.89619625).add(-21.26188314)
      .add(-21.62460317).add(-21.98358848).add(-22.33666053)
      .add(-22.68226009).add(-23.0198508).add(-23.34938497).add(-23.67069194)
      .add(-23.98330582).add(-24.28825904).add(-24.58659134)
      .add(-24.87823134).add(-25.16431407).add(-25.44670768)
      .add(-25.72838288).add(-26.01200776).add(-26.29662711)
      .add(-26.58623777).add(-26.8818099).add(-27.1849976).add(-27.49727558)
      .add(-27.81935069).add(-28.15033009).add(-28.49284223)
      .add(-28.84813663).add(-29.21623732).add(-29.59801894)
      .add(-29.98981613).add(-30.39957134).add(-30.82025809).add(-31.2534045)
      .add(-31.69834844).add(-32.15077468).add(-32.35548229).array())
      .add(stan::math::array_builder<double>().add(-1.87293958)
      .add(-1.95720919).add(-2.15543109).add(-2.36610006).add(-2.58649239)
      .add(-2.81509736).add(-3.0505465).add(-3.29072772).add(-3.53562864)
      .add(-3.78450752).add(-4.03680748).add(-4.29228217).add(-4.55048448)
      .add(-4.81079963).add(-5.07268148).add(-5.335681).add(-5.59933287)
      .add(-5.8635337).add(-6.12829538).add(-6.39391597).add(-6.6609631)
      .add(-6.92914008).add(-7.19819222).add(-7.46837828).add(-7.73986432)
      .add(-8.0126251).add(-8.28670217).add(-8.56209959).add(-8.83862295)
      .add(-9.11581623).add(-9.39407079).add(-9.67322555).add(-9.95339846)
      .add(-10.23464017).add(-10.51729532).add(-10.80177025).add(-11.0881851)
      .add(-11.37714041).add(-11.66929021).add(-11.96473187)
      .add(-12.26379268).add(-12.56627589).add(-12.87264055)
      .add(-13.18280147).add(-13.49674924).add(-13.81466497)
      .add(-14.13611353).add(-14.46060215).add(-14.78817522)
      .add(-15.11879315).add(-15.4528231).add(-15.79055392).add(-16.13097759)
      .add(-16.47395724).add(-16.81993703).add(-17.16916386)
      .add(-17.52170076).add(-17.87752241).add(-18.2363982).add(-18.59807222)
      .add(-18.96256765).add(-19.32976711).add(-19.69921666)
      .add(-20.07035778).add(-20.44277437).add(-20.81538355)
      .add(-21.18633438).add(-21.55478312).add(-21.91981325).add(-22.279214)
      .add(-22.6312164).add(-22.97498217).add(-23.31029276).add(-23.63678591)
      .add(-23.95387232).add(-24.26247048).add(-24.56355188)
      .add(-24.85706128).add(-25.1441683).add(-25.42680565).add(-25.70796239)
      .add(-25.99034009).add(-26.27321414).add(-26.56058507)
      .add(-26.85352413).add(-27.15374543).add(-27.46279937)
      .add(-27.78143125).add(-28.10896595).add(-28.44801933)
      .add(-28.79995014).add(-29.16493193).add(-29.54397433)
      .add(-29.93397511).add(-30.34205234).add(-30.76217437).add(-31.1958175)
      .add(-31.64294374).add(-32.09989842).add(-32.30752399).array())
      .add(stan::math::array_builder<double>().add(-1.86732812)
      .add(-1.950861).add(-2.14713027).add(-2.35544627).add(-2.57308518)
      .add(-2.79843968).add(-3.03014696).add(-3.26647799).add(-3.50740015)
      .add(-3.75232014).add(-4.00082744).add(-4.25276945).add(-4.50781004)
      .add(-4.76544786).add(-5.02521641).add(-5.28667855).add(-5.54930776)
      .add(-5.81286013).add(-6.07719102).add(-6.34239433).add(-6.60877868)
      .add(-6.87613755).add(-7.14431255).add(-7.41350134).add(-7.68386519)
      .add(-7.95545587).add(-8.22838145).add(-8.50271442).add(-8.77831405)
      .add(-9.05473431).add(-9.33229538).add(-9.6107452).add(-9.89008147)
      .add(-10.17020077).add(-10.45132069).add(-10.73376722)
      .add(-11.01760787).add(-11.30343143).add(-11.59192877)
      .add(-11.88327845).add(-12.17794915).add(-12.47588558)
      .add(-12.77768567).add(-13.08339422).add(-13.39312749)
      .add(-13.70715614).add(-14.02510126).add(-14.3465203).add(-14.67147958)
      .add(-14.99992752).add(-15.33222588).add(-15.66863823)
      .add(-16.00814827).add(-16.35059965).add(-16.69641772)
      .add(-17.04584425).add(-17.3989276).add(-17.75565693).add(-18.11580342)
      .add(-18.47906595).add(-18.84551681).add(-19.21512198).add(-19.5874861)
      .add(-19.96202809).add(-20.33837228).add(-20.71559274)
      .add(-21.09193569).add(-21.46642734).add(-21.83804185)
      .add(-22.20456934).add(-22.56404971).add(-22.91532612)
      .add(-23.25795133).add(-23.59128928).add(-23.91456239)
      .add(-24.22849677).add(-24.5339227).add(-24.83075131).add(-25.12015303)
      .add(-25.404106).add(-25.68561286).add(-25.96741991).add(-26.24906072)
      .add(-26.53455566).add(-26.8250943).add(-27.12245847).add(-27.42827537)
      .add(-27.74333462).add(-28.06717083).add(-28.4023917).add(-28.7504578)
      .add(-29.11168737).add(-29.48722932).add(-29.87452149)
      .add(-30.27995116).add(-30.69845534).add(-31.13151581)
      .add(-31.57978309).add(-32.04042436).add(-32.25071264).array())
      .add(stan::math::array_builder<double>().add(-1.86467483)
      .add(-1.94781389).add(-2.14298489).add(-2.34987897).add(-2.56571843)
      .add(-2.78876437).add(-3.01757804).add(-3.2505962).add(-3.48774239)
      .add(-3.7285176).add(-3.9726315).add(-4.220047).add(-4.47057964)
      .add(-4.72390117).add(-4.97970704).add(-5.23768429).add(-5.49738568)
      .add(-5.7585766).add(-6.02108907).add(-6.28492635).add(-6.55023066)
      .add(-6.81682303).add(-7.08454627).add(-7.3534811).add(-7.62370253)
      .add(-7.89522983).add(-8.16815011).add(-8.44254585).add(-8.71830552)
      .add(-8.99500246).add(-9.27290579).add(-9.55171635).add(-9.83134718)
      .add(-10.11156705).add(-10.39246763).add(-10.67427098)
      .add(-10.95695651).add(-11.2410526).add(-11.52723733).add(-11.81572138)
      .add(-12.10707742).add(-12.40136846).add(-12.69932012)
      .add(-13.00111352).add(-13.30700505).add(-13.61737491)
      .add(-13.93192822).add(-14.25029745).add(-14.5725902).add(-14.89876436)
      .add(-15.22918417).add(-15.56409637).add(-15.90247956)
      .add(-16.24415845).add(-16.58953635).add(-16.93884178)
      .add(-17.29210356).add(-17.64931222).add(-18.01023405)
      .add(-18.37453243).add(-18.74230817).add(-19.1135818).add(-19.48799706)
      .add(-19.86495794).add(-20.24413197).add(-20.62473303)
      .add(-21.00511155).add(-21.38423545).add(-21.76103716)
      .add(-22.13334699).add(-22.49909791).add(-22.85690923)
      .add(-23.20614233).add(-23.54590718).add(-23.87523608)
      .add(-24.19463998).add(-24.50476779).add(-24.80544513)
      .add(-25.09779579).add(-25.38380065).add(-25.66645664)
      .add(-25.94854727).add(-26.22982888).add(-26.51435133)
      .add(-26.80341245).add(-27.09885387).add(-27.4023642).add(-27.71477253)
      .add(-28.03576492).add(-28.36794495).add(-28.71284313)
      .add(-29.07088159).add(-29.44331342).add(-29.82796009)
      .add(-30.23072506).add(-30.64724095).add(-31.07902667)
      .add(-31.52727559).add(-31.98986156).add(-32.20183053).array())
      .add(stan::math::array_builder<double>().add(-1.86467483)
      .add(-1.94781389).add(-2.14298489).add(-2.34987897).add(-2.56571843)
      .add(-2.78876437).add(-3.01757804).add(-3.2505962).add(-3.48774239)
      .add(-3.7285176).add(-3.9726315).add(-4.220047).add(-4.47057964)
      .add(-4.72390117).add(-4.97970704).add(-5.23768429).add(-5.49738568)
      .add(-5.7585766).add(-6.02108907).add(-6.28492635).add(-6.55023066)
      .add(-6.81682303).add(-7.08454627).add(-7.3534811).add(-7.62370253)
      .add(-7.89522983).add(-8.16815011).add(-8.44254585).add(-8.71830552)
      .add(-8.99500246).add(-9.27290579).add(-9.55171635).add(-9.83134718)
      .add(-10.11156705).add(-10.39246763).add(-10.67427098)
      .add(-10.95695651).add(-11.2410526).add(-11.52723733).add(-11.81572138)
      .add(-12.10707742).add(-12.40136846).add(-12.69932012)
      .add(-13.00111352).add(-13.30700505).add(-13.61737491)
      .add(-13.93192822).add(-14.25029745).add(-14.5725902).add(-14.89876436)
      .add(-15.22918417).add(-15.56409637).add(-15.90247956)
      .add(-16.24415845).add(-16.58953635).add(-16.93884178)
      .add(-17.29210356).add(-17.64931222).add(-18.01023405)
      .add(-18.37453243).add(-18.74230817).add(-19.1135818).add(-19.48799706)
      .add(-19.86495794).add(-20.24413197).add(-20.62473303)
      .add(-21.00511155).add(-21.38423545).add(-21.76103716)
      .add(-22.13334699).add(-22.49909791).add(-22.85690923)
      .add(-23.20614233).add(-23.54590718).add(-23.87523608)
      .add(-24.19463998).add(-24.50476779).add(-24.80544513)
      .add(-25.09779579).add(-25.38380065).add(-25.66645664)
      .add(-25.94854727).add(-26.22982888).add(-26.51435133)
      .add(-26.80341245).add(-27.09885387).add(-27.4023642).add(-27.71477253)
      .add(-28.03576492).add(-28.36794495).add(-28.71284313)
      .add(-29.07088159).add(-29.44331342).add(-29.82796009)
      .add(-30.23072506).add(-30.64724095).add(-31.07902667)
      .add(-31.52727559).add(-31.98986156).add(-32.20183053).array())
      .add(stan::math::array_builder<double>().add(-1.86732812)
      .add(-1.950861).add(-2.14713027).add(-2.35544627).add(-2.57308518)
      .add(-2.79843968).add(-3.03014696).add(-3.26647799).add(-3.50740015)
      .add(-3.75232014).add(-4.00082744).add(-4.25276945).add(-4.50781004)
      .add(-4.76544786).add(-5.02521641).add(-5.28667855).add(-5.54930776)
      .add(-5.81286013).add(-6.07719102).add(-6.34239433).add(-6.60877868)
      .add(-6.87613755).add(-7.14431255).add(-7.41350134).add(-7.68386519)
      .add(-7.95545587).add(-8.22838145).add(-8.50271442).add(-8.77831405)
      .add(-9.05473431).add(-9.33229538).add(-9.6107452).add(-9.89008147)
      .add(-10.17020077).add(-10.45132069).add(-10.73376722)
      .add(-11.01760787).add(-11.30343143).add(-11.59192877)
      .add(-11.88327845).add(-12.17794915).add(-12.47588558)
      .add(-12.77768567).add(-13.08339422).add(-13.39312749)
      .add(-13.70715614).add(-14.02510126).add(-14.3465203).add(-14.67147958)
      .add(-14.99992752).add(-15.33222588).add(-15.66863823)
      .add(-16.00814827).add(-16.35059965).add(-16.69641772)
      .add(-17.04584425).add(-17.3989276).add(-17.75565693).add(-18.11580342)
      .add(-18.47906595).add(-18.84551681).add(-19.21512198).add(-19.5874861)
      .add(-19.96202809).add(-20.33837228).add(-20.71559274)
      .add(-21.09193569).add(-21.46642734).add(-21.83804185)
      .add(-22.20456934).add(-22.56404971).add(-22.91532612)
      .add(-23.25795133).add(-23.59128928).add(-23.91456239)
      .add(-24.22849677).add(-24.5339227).add(-24.83075131).add(-25.12015303)
      .add(-25.404106).add(-25.68561286).add(-25.96741991).add(-26.24906072)
      .add(-26.53455566).add(-26.8250943).add(-27.12245847).add(-27.42827537)
      .add(-27.74333462).add(-28.06717083).add(-28.4023917).add(-28.7504578)
      .add(-29.11168737).add(-29.48722932).add(-29.87452149)
      .add(-30.27995116).add(-30.69845534).add(-31.13151581)
      .add(-31.57978309).add(-32.04042436).add(-32.25071264).array())
      .add(stan::math::array_builder<double>().add(-1.87293958)
      .add(-1.95720919).add(-2.15543109).add(-2.36610006).add(-2.58649239)
      .add(-2.81509736).add(-3.0505465).add(-3.29072772).add(-3.53562864)
      .add(-3.78450752).add(-4.03680748).add(-4.29228217).add(-4.55048448)
      .add(-4.81079963).add(-5.07268148).add(-5.335681).add(-5.59933287)
      .add(-5.8635337).add(-6.12829538).add(-6.39391597).add(-6.6609631)
      .add(-6.92914008).add(-7.19819222).add(-7.46837828).add(-7.73986432)
      .add(-8.0126251).add(-8.28670217).add(-8.56209959).add(-8.83862295)
      .add(-9.11581623).add(-9.39407079).add(-9.67322555).add(-9.95339846)
      .add(-10.23464017).add(-10.51729532).add(-10.80177025).add(-11.0881851)
      .add(-11.37714041).add(-11.66929021).add(-11.96473187)
      .add(-12.26379268).add(-12.56627589).add(-12.87264055)
      .add(-13.18280147).add(-13.49674924).add(-13.81466497)
      .add(-14.13611353).add(-14.46060215).add(-14.78817522)
      .add(-15.11879315).add(-15.4528231).add(-15.79055392).add(-16.13097759)
      .add(-16.47395724).add(-16.81993703).add(-17.16916386)
      .add(-17.52170076).add(-17.87752241).add(-18.2363982).add(-18.59807222)
      .add(-18.96256765).add(-19.32976711).add(-19.69921666)
      .add(-20.07035778).add(-20.44277437).add(-20.81538355)
      .add(-21.18633438).add(-21.55478312).add(-21.91981325).add(-22.279214)
      .add(-22.6312164).add(-22.97498217).add(-23.31029276).add(-23.63678591)
      .add(-23.95387232).add(-24.26247048).add(-24.56355188)
      .add(-24.85706128).add(-25.1441683).add(-25.42680565).add(-25.70796239)
      .add(-25.99034009).add(-26.27321414).add(-26.56058507)
      .add(-26.85352413).add(-27.15374543).add(-27.46279937)
      .add(-27.78143125).add(-28.10896595).add(-28.44801933)
      .add(-28.79995014).add(-29.16493193).add(-29.54397433)
      .add(-29.93397511).add(-30.34205234).add(-30.76217437).add(-31.1958175)
      .add(-31.64294374).add(-32.09989842).add(-32.30752399).array())
      .add(stan::math::array_builder<double>().add(-1.88094832)
      .add(-1.96608587).add(-2.16650572).add(-2.3796615).add(-2.60277891)
      .add(-2.8344146).add(-3.0731548).add(-3.31640704).add(-3.5642371)
      .add(-3.81580482).add(-4.07046469).add(-4.32795388).add(-4.58779501)
      .add(-4.8493416).add(-5.11204522).add(-5.37551554).add(-5.63940622)
      .add(-5.90377737).add(-6.16878585).add(-6.43489136).add(-6.70286923)
      .add(-6.97222146).add(-7.24249237).add(-7.51395736).add(-7.7867655)
      .add(-8.06079972).add(-8.33605103).add(-8.61249312).add(-8.88993117)
      .add(-9.16795501).add(-9.44705979).add(-9.727196).add(-10.00859371)
      .add(-10.29142143).add(-10.57609699).add(-10.86304571)
      .add(-11.15237824).add(-11.4446524).add(-11.74044939).add(-12.03976498)
      .add(-12.34279517).add(-12.64922487).add(-12.95940645)
      .add(-13.27316816).add(-13.59042164).add(-13.91129746)
      .add(-14.23534031).add(-14.56203748).add(-14.8914281).add(-15.22349615)
      .add(-15.55861394).add(-15.89709268).add(-16.23792939)
      .add(-16.58099983).add(-16.92675725).add(-17.27544337)
      .add(-17.62712777).add(-17.98176166).add(-18.3391083).add(-18.69895922)
      .add(-19.06128285).add(-19.42587485).add(-19.79222666)
      .add(-20.15981557).add(-20.5282073).add(-20.89619625).add(-21.26188314)
      .add(-21.62460317).add(-21.98358848).add(-22.33666053)
      .add(-22.68226009).add(-23.0198508).add(-23.34938497).add(-23.67069194)
      .add(-23.98330582).add(-24.28825904).add(-24.58659134)
      .add(-24.87823134).add(-25.16431407).add(-25.44670768)
      .add(-25.72838288).add(-26.01200776).add(-26.29662711)
      .add(-26.58623777).add(-26.8818099).add(-27.1849976).add(-27.49727558)
      .add(-27.81935069).add(-28.15033009).add(-28.49284223)
      .add(-28.84813663).add(-29.21623732).add(-29.59801894)
      .add(-29.98981613).add(-30.39957134).add(-30.82025809).add(-31.2534045)
      .add(-31.69834844).add(-32.15077468).add(-32.35548229).array())
      .add(stan::math::array_builder<double>().add(-1.89035838)
      .add(-1.97633559).add(-2.17881109).add(-2.39418459).add(-2.61961702)
      .add(-2.85373734).add(-3.09508721).add(-3.34055584).add(-3.59036046)
      .add(-3.84362035).add(-4.09964941).add(-4.35821842).add(-4.61886513)
      .add(-4.88095197).add(-5.14395833).add(-5.40756801).add(-5.67155154)
      .add(-5.93610235).add(-6.2014755).add(-6.46823395).add(-6.73731569)
      .add(-7.00795965).add(-7.2794618).add(-7.55211722).add(-7.82608179)
      .add(-8.10117054).add(-8.37736217).add(-8.65464187).add(-8.93285356)
      .add(-9.21165975).add(-9.49166044).add(-9.77290396).add(-10.05569974)
      .add(-10.34028601).add(-10.62710416).add(-10.91655548)
      .add(-11.20870558).add(-11.50404641).add(-11.80307978)
      .add(-12.10570627).add(-12.41201691).add(-12.72160998)
      .add(-13.03476426).add(-13.35125687).add(-13.67095446)
      .add(-13.99396183).add(-14.31982319).add(-14.6480214).add(-14.97859597)
      .add(-15.31155648).add(-15.64727607).add(-15.98608262)
      .add(-16.32697379).add(-16.66983194).add(-17.01511228)
      .add(-17.36304537).add(-17.71370279).add(-18.06700929)
      .add(-18.42272187).add(-18.7806814).add(-19.14080419).add(-19.50280647)
      .add(-19.86613781).add(-20.23032497).add(-20.59493708)
      .add(-20.95868337).add(-21.31965867).add(-21.67739583)
      .add(-22.03128144).add(-22.37917506).add(-22.71970719)
      .add(-23.05259162).add(-23.37788308).add(-23.69552595)
      .add(-24.00512902).add(-24.30778687).add(-24.604566).add(-24.89535824)
      .add(-25.18125384).add(-25.46405455).add(-25.74671618)
      .add(-26.03188524).add(-26.31840331).add(-26.61027422)
      .add(-26.90838169).add(-27.2143277).add(-27.52951494).add(-27.8546179)
      .add(-28.18853336).add(-28.53390689).add(-28.89188091)
      .add(-29.26233681).add(-29.64603097).add(-30.03875681)
      .add(-30.44931135).add(-30.86972618).add(-31.30163242)
      .add(-31.74385294).add(-32.19159871).add(-32.39350428).array())
      .add(stan::math::array_builder<double>().add(-1.90037906)
      .add(-1.98710252).add(-2.19136019).add(-2.40858812).add(-2.63588773)
      .add(-2.87197707).add(-3.11536417).add(-3.36239856).add(-3.61350968)
      .add(-3.86781924).add(-4.12462973).add(-4.38377206).add(-4.64481903)
      .add(-4.90715635).add(-5.17029619).add(-5.43398921).add(-5.69810218)
      .add(-5.96292506).add(-6.22877142).add(-6.49626669).add(-6.76649052)
      .add(-7.03839278).add(-7.31100545).add(-7.58466408).add(-7.85956488)
      .add(-8.13548154).add(-8.4124109).add(-8.69037548).add(-8.96927522)
      .add(-9.2488491).add(-9.52978676).add(-9.8122099).add(-10.09647457)
      .add(-10.38285073).add(-10.67177108).add(-10.96359073)
      .add(-11.25831626).add(-11.55636968).add(-11.85818031)
      .add(-12.16356826).add(-12.47254513).add(-12.78464878)
      .add(-13.10010879).add(-13.41867401).add(-13.74018651)
      .add(-14.06473824).add(-14.39188192).add(-14.72110244)
      .add(-15.05244015).add(-15.38592872).add(-15.72193755)
      .add(-16.06080621).add(-16.40152945).add(-16.74399226)
      .add(-17.08864764).add(-17.43571219).add(-17.78525776)
      .add(-18.13718305).add(-18.49124067).add(-18.84732291)
      .add(-19.20529941).add(-19.56481748).add(-19.92529827)
      .add(-20.28632842).add(-20.64749628).add(-21.00745542)
      .add(-21.36432289).add(-21.71782831).add(-22.0675007).add(-22.41122923)
      .add(-22.74780397).add(-23.07713848).add(-23.3993372).add(-23.71440736)
      .add(-24.02200494).add(-24.3232592).add(-24.61924365).add(-24.90980731)
      .add(-25.19599499).add(-25.47954519).add(-25.76340323)
      .add(-26.05020276).add(-26.33860201).add(-26.63261819)
      .add(-26.93305886).add(-27.24148032).add(-27.55921704)
      .add(-27.88691629).add(-28.22327548).add(-28.57096167)
      .add(-28.93101589).add(-29.30318688).add(-29.68813227)
      .add(-30.08113893).add(-30.49186122).add(-30.91146014)
      .add(-31.34170751).add(-31.78101283).add(-32.22426171)
      .add(-32.42361197).array()).add(stan::math::array_builder<double>()
      .add(-1.91053194).add(-1.99789466).add(-2.20365062).add(-2.42239385)
      .add(-2.65117815).add(-2.8888279).add(-3.13382839).add(-3.38197292)
      .add(-3.63394954).add(-3.88891146).add(-4.14616548).add(-4.40561481)
      .add(-4.66687373).add(-4.92935251).add(-5.19259063).add(-5.45639192)
      .add(-5.7206971).add(-5.98586245).add(-6.25223335).add(-6.52047381)
      .add(-6.79180029).add(-7.06486579).add(-7.33843601).add(-7.6129109)
      .add(-7.88855735).add(-8.16512799).add(-8.4426571).add(-8.72121669)
      .add(-9.00076624).add(-9.28111393).add(-9.56301951).add(-9.8466545)
      .add(-10.13239588).add(-10.42051957).add(-10.71143115)
      .add(-11.00543049).add(-11.3024627).add(-11.60288407).add(-11.90706205)
      .add(-12.21475146).add(-12.52590489).add(-12.84001902)
      .add(-13.15729068).add(-13.47745447).add(-13.80033951)
      .add(-14.12603135).add(-14.45409474).add(-14.78401889)
      .add(-15.11584367).add(-15.4496244).add(-15.7857231).add(-16.12448725)
      .add(-16.46490631).add(-16.80686545).add(-17.15081326)
      .add(-17.49695149).add(-17.84535207).add(-18.19588957)
      .add(-18.54831496).add(-18.90257362).add(-19.25849455)
      .add(-19.61566645).add(-19.9734937).add(-20.33162931).add(-20.68969131)
      .add(-21.04629875).add(-21.39960739).add(-21.74953302)
      .add(-22.09572857).add(-22.43610004).add(-22.76956849)
      .add(-23.09620737).add(-23.41613428).add(-23.72938621)
      .add(-24.03565203).add(-24.33608177).add(-24.63174683).add(-24.922453)
      .add(-25.20920177).add(-25.49367232).add(-25.77880311)
      .add(-26.06722101).add(-26.35741513).add(-26.65342006)
      .add(-26.95597455).add(-27.26659444).add(-27.58654972)
      .add(-27.91646448).add(-28.25484821).add(-28.60439354)
      .add(-28.96604702).add(-29.33943517).add(-29.72513594)
      .add(-30.11796622).add(-30.52842717).add(-30.94687981)
      .add(-31.37526202).add(-31.81165309).add(-32.25072017)
      .add(-32.44778674).array()).add(stan::math::array_builder<double>()
      .add(-1.92050298).add(-2.00840107).add(-2.21539255).add(-2.43535482)
      .add(-2.66530706).add(-2.904195).add(-3.15049019).add(-3.39941719)
      .add(-3.65195823).add(-3.90731834).add(-4.16481655).add(-4.42443259)
      .add(-4.68582174).add(-4.94841469).add(-5.21176896).add(-5.47572714)
      .add(-5.74028425).add(-6.00583983).add(-6.2727542).add(-6.54171669)
      .add(-6.81408389).add(-7.08821248).add(-7.36260453).add(-7.63774579)
      .add(-7.91399812).add(-8.19110658).add(-8.46915348).add(-8.74826396)
      .add(-9.02845353).add(-9.30958847).add(-9.59248031).add(-9.87733104)
      .add(-10.16452033).add(-10.45431377).add(-10.74708034)
      .add(-11.04306289).add(-11.34214791).add(-11.64463316)
      .add(-11.95083493).add(-12.26045578).add(-12.57340477)
      .add(-12.88915108).add(-13.20786962).add(-13.52928921)
      .add(-13.85323268).add(-14.17978213).add(-14.50851538)
      .add(-14.83892637).add(-15.17105275).add(-15.50496923)
      .add(-15.84102764).add(-16.17958069).add(-16.51961106)
      .add(-16.86100271).add(-17.20419876).add(-17.54938632)
      .add(-17.89663799).add(-18.24580679).add(-18.59664488)
      .add(-18.94915192).add(-19.30312192).add(-19.65809414)
      .add(-20.01346541).add(-20.36895861).add(-20.72422759)
      .add(-21.07787157).add(-21.42809385).add(-21.77498183)
      .add(-22.11829299).add(-22.45593754).add(-22.78694386)
      .add(-23.11151544).add(-23.42975852).add(-23.74171888)
      .add(-24.04711125).add(-24.34709934).add(-24.64274835)
      .add(-24.93382227).add(-25.221282).add(-25.50675094).add(-25.79316351)
      .add(-26.08314405).add(-26.37502322).add(-26.67285564)
      .add(-26.97731679).add(-27.28988642).add(-27.6117734).add(-27.94358211)
      .add(-28.28364492).add(-28.63468369).add(-28.99755777)
      .add(-29.37178135).add(-29.7578702).add(-30.15020624).add(-30.56011949)
      .add(-30.97723562).add(-31.4036741).add(-31.83724944).add(-32.27248478)
      .add(-32.46752421).array()).add(stan::math::array_builder<double>()
      .add(-1.93017477).add(-2.01851835).add(-2.22652506).add(-2.44746813)
      .add(-2.6783441).add(-2.91823196).add(-3.16559633).add(-3.41508183)
      .add(-3.66799172).add(-3.9235959).add(-4.18122804).add(-4.44094325)
      .add(-4.70243379).add(-4.96514444).add(-5.22864147).add(-5.49279416)
      .add(-5.75763669).add(-6.02359593).add(-6.29103784).add(-6.56067113)
      .add(-6.83400023).add(-7.10908955).add(-7.38418155).add(-7.65986572)
      .add(-7.93661742).add(-8.21418224).add(-8.49269515).add(-8.77233306)
      .add(-9.05316091).add(-9.33509129).add(-9.61897182).add(-9.90502011)
      .add(-10.19360598).add(-10.48497477).add(-10.77945474).add(-11.0772335)
      .add(-11.378144).add(-11.6824331).add(-11.99037534).add(-12.30163164)
      .add(-12.61607902).add(-12.93316875).add(-13.25306095)
      .add(-13.57548379).add(-13.90025754).add(-14.22746205).add(-14.5566881)
      .add(-14.88743404).add(-15.2197336).add(-15.55367891).add(-15.88960963)
      .add(-16.22788181).add(-16.56747045).add(-16.90825761)
      .add(-17.25068065).add(-17.59491278).add(-17.94102822)
      .add(-18.28886121).add(-18.63816773).add(-18.98900245)
      .add(-19.34112931).add(-19.69404598).add(-20.04714878)
      .add(-20.40023157).add(-20.75298734).add(-21.10400551)
      .add(-21.45154086).add(-21.79583703).add(-22.13673812).add(-22.4721477)
      .add(-22.80118276).add(-23.12415485).add(-23.44114236)
      .add(-23.75218648).add(-24.05702445).add(-24.35683013)
      .add(-24.65266071).add(-24.94424039).add(-25.23249205)
      .add(-25.51898638).add(-25.80665586).add(-26.09812548)
      .add(-26.39157577).add(-26.69108326).add(-26.99726445)
      .add(-27.31156672).add(-27.63514102).add(-27.9685749).add(-28.31003354)
      .add(-28.66227139).add(-29.02606766).add(-29.40083339)
      .add(-29.78703775).add(-30.17865991).add(-30.58783675)
      .add(-31.00351602).add(-31.42800712).add(-31.85891061).add(-32.2906568)
      .add(-32.48389809).array()).add(stan::math::array_builder<double>()
      .add(-1.93954285).add(-2.02825771).add(-2.23710214).add(-2.45884012)
      .add(-2.69045546).add(-2.93116949).add(-3.17944463).add(-3.42933476)
      .add(-3.68248473).add(-3.9382373).add(-4.19594007).add(-4.45572018)
      .add(-4.71730156).add(-4.98013701).add(-5.24379377).add(-5.50815858)
      .add(-5.77329386).add(-6.03964317).add(-6.30757368).add(-6.57781177)
      .add(-6.85201912).add(-7.12797283).add(-7.40365955).add(-7.67978685)
      .add(-7.95695746).add(-8.23492148).add(-8.51386744).add(-8.79402004)
      .add(-9.07548588).add(-9.35821295).add(-9.64307222).add(-9.93028573)
      .add(-10.22020517).add(-10.51304987).add(-10.8091064).add(-11.10851061)
      .add(-11.41104757).add(-11.71692043).add(-12.0263699).add(-12.33902368)
      .add(-12.65473523).add(-12.97294465).add(-13.29380204)
      .add(-13.61703795).add(-13.94247217).add(-14.27018262).add(-14.5997724)
      .add(-14.93074367).add(-15.2631248).add(-15.59702371).add(-15.93276649)
      .add(-16.27071122).add(-16.60982477).add(-16.94998704)
      .add(-17.29162975).add(-17.63491326).add(-17.97991453)
      .add(-18.32645172).add(-18.674287).add(-19.02353024).add(-19.37391959)
      .add(-19.72491762).add(-20.0759254).add(-20.42680731).add(-20.77729677)
      .add(-21.12598017).add(-21.47116492).add(-21.81323603)
      .add(-22.15210856).add(-22.48567064).add(-22.81311328).add(-23.1348399)
      .add(-23.4508899).add(-23.76129105).add(-24.0658018).add(-24.36560437)
      .add(-24.66174729).add(-24.95391693).add(-25.24300054)
      .add(-25.53051866).add(-25.81940347).add(-26.11228303)
      .add(-26.40719453).add(-26.70823772).add(-27.01597371)
      .add(-27.33182067).add(-27.65687458).add(-27.99170862)
      .add(-28.33432998).add(-28.68752858).add(-29.05201029)
      .add(-29.42709126).add(-29.81320783).add(-30.20396564)
      .add(-30.61228409).add(-31.02648369).add(-31.44906698)
      .add(-31.87745988).add(-32.30603498).add(-32.49767781).array())
      .add(stan::math::array_builder<double>().add(-1.94845527)
      .add(-2.03747273).add(-2.2469925).add(-2.46935822).add(-2.70155028)
      .add(-2.94293964).add(-3.19199106).add(-3.44216229).add(-3.69545584)
      .add(-3.95129312).add(-4.20903364).add(-4.46887148).add(-4.73055586)
      .add(-4.99354121).add(-5.25738837).add(-5.52199328).add(-5.78743726)
      .add(-6.05417249).add(-6.32256513).add(-6.5933593).add(-6.86838314)
      .add(-7.14513199).add(-7.42134007).add(-7.69784405).add(-7.97538398)
      .add(-8.25371605).add(-8.53308111).add(-8.81374666).add(-9.0958535)
      .add(-9.37937571).add(-9.66519758).add(-9.95353759).add(-10.24472413)
      .add(-10.53894763).add(-10.83645386).add(-11.13733115).add(-11.4413223)
      .add(-11.74859321).add(-12.05935731).add(-12.37321566)
      .add(-12.69000456).add(-13.00915769).add(-13.33081829)
      .add(-13.65472111).add(-13.98068656).add(-14.30879049)
      .add(-14.63864754).add(-14.96976297).add(-15.30215865)
      .add(-15.63595694).add(-15.97146942).add(-16.30905529)
      .add(-16.64767314).add(-16.98720073).add(-17.32806453)
      .add(-17.67041326).add(-18.01432772).add(-18.35961256)
      .add(-18.70603813).add(-19.05376938).add(-19.40252217)
      .add(-19.75172938).add(-20.10080069).add(-20.44966942)
      .add(-20.79810941).add(-21.14470864).add(-21.48782649)
      .add(-21.82797577).add(-22.16512911).add(-22.49715228)
      .add(-22.82329903).add(-23.14405255).add(-23.45940562)
      .add(-23.76936675).add(-24.07371521).add(-24.37364079)
      .add(-24.67018318).add(-24.96299288).add(-25.25292346)
      .add(-25.54144761).add(-25.83149852).add(-26.12570915)
      .add(-26.42197908).add(-26.72443234).add(-27.03357756)
      .add(-27.35080647).add(-27.67716289).add(-28.01320777)
      .add(-28.35679867).add(-28.71076353).add(-29.07574132)
      .add(-29.45096069).add(-29.83683719).add(-30.22662931).add(-30.6340134)
      .add(-31.04672739).add(-31.46746656).add(-31.89351282)
      .add(-32.31920489).add(-32.50942185).array())
      .add(stan::math::array_builder<double>().add(-1.95695625)
      .add(-2.04622042).add(-2.25628573).add(-2.47914922).add(-2.71179535)
      .add(-2.95374992).add(-3.20348308).add(-3.45385129).add(-3.70722702)
      .add(-3.96311309).add(-4.22087758).add(-4.48077593).add(-4.74257656)
      .add(-5.00573013).add(-5.2697855).add(-5.5346419).add(-5.80039311)
      .add(-6.06749476).add(-6.33631205).add(-6.60760849).add(-6.8833877)
      .add(-7.16086834).add(-7.43753467).add(-7.71436103).add(-7.99223202)
      .add(-8.27090956).add(-8.55068429).add(-8.83186107).add(-9.11460792)
      .add(-9.39891702).add(-9.68567817).add(-9.97510051).add(-10.26748595)
      .add(-10.56299487).add(-10.86183409).add(-11.16404874)
      .add(-11.46934455).add(-11.77785576).add(-12.08977383)
      .add(-12.40467842).add(-12.72239336).add(-13.04234933)
      .add(-13.36468482).add(-13.68913978).add(-14.01553582)
      .add(-14.34394635).add(-14.67399671).add(-15.00519461)
      .add(-15.33755449).add(-15.67121209).add(-16.00646381)
      .add(-16.34366939).add(-16.68177922).add(-17.02066908)
      .add(-17.36076075).add(-17.70219252).add(-18.04505015)
      .add(-18.38912711).add(-18.73420364).add(-19.08049924)
      .add(-19.42771044).add(-19.77524489).add(-20.12252361).add(-20.4695466)
      .add(-20.81612731).add(-21.16085834).add(-21.50214954)
      .add(-21.84062927).add(-22.1763165).add(-22.50704931).add(-22.83213538)
      .add(-23.15212854).add(-23.46696969).add(-23.7766441).add(-24.08095194)
      .add(-24.38109032).add(-24.67809016).add(-24.97156778)
      .add(-25.26234491).add(-25.55184833).add(-25.8430133).add(-26.13847916)
      .add(-26.43601286).add(-26.73976343).add(-27.05018961)
      .add(-27.36865913).add(-27.6961662).add(-28.0332615).add(-28.37766064)
      .add(-28.7322318).add(-29.09755296).add(-29.47277201).add(-29.8582941)
      .add(-30.24705437).add(-30.65346006).add(-31.06470606)
      .add(-31.48367741).add(-31.90753597).add(-32.33060277)
      .add(-32.51954267).array()).add(stan::math::array_builder<double>()
      .add(-1.96499252).add(-2.05445424).add(-2.26495215).add(-2.48820249)
      .add(-2.72120067).add(-2.96363099).add(-3.21397128).add(-3.46447441)
      .add(-3.71789182).add(-3.97380897).add(-4.23159842).add(-4.49157103)
      .add(-4.75350837).add(-5.01685243).add(-5.28113546).add(-5.54625529)
      .add(-5.81231308).add(-6.07976434).add(-6.34897438).add(-6.62072838)
      .add(-6.89721365).add(-7.17537695).add(-7.45245451).add(-7.7295647)
      .add(-8.0077417).add(-8.28675188).add(-8.56693239).add(-8.84862018)
      .add(-9.13200433).add(-9.41708854).add(-9.7047621).add(-9.99522077)
      .add(-10.28873833).add(-10.5854451).add(-10.88551128).add(-11.188943)
      .add(-11.49541366).add(-11.80503061).add(-12.11796766)
      .add(-12.43378719).add(-12.75230411).add(-13.07294856)
      .add(-13.39585564).add(-13.72077109).add(-14.04751788)
      .add(-14.37616658).add(-14.70635243).add(-15.03758498)
      .add(-15.36987051).add(-15.70335729).add(-16.03832615)
      .add(-16.37513699).add(-16.71273218).add(-17.05098584)
      .add(-17.39031565).add(-17.73085075).add(-18.07268283)
      .add(-18.41559631).add(-18.75938272).add(-19.10431533).add(-19.4500738)
      .add(-19.79604417).add(-20.14166068).add(-20.48698741)
      .add(-20.83187603).add(-21.17492578).add(-21.51459496)
      .add(-21.85161664).add(-22.18604678).add(-22.51569168)
      .add(-22.83990603).add(-23.15930729).add(-23.47378092)
      .add(-23.78328605).add(-24.0876442).add(-24.38805971).add(-24.68555497)
      .add(-24.97971363).add(-25.27132723).add(-25.56177831)
      .add(-25.85400512).add(-26.15065461).add(-26.4493654).add(-26.75431219)
      .add(-27.06590602).add(-27.38549281).add(-27.71401957)
      .add(-28.05202843).add(-28.39710013).add(-28.752145).add(-29.11768555)
      .add(-29.49279487).add(-29.87787682).add(-30.2655646).add(-30.67097026)
      .add(-31.08078075).add(-31.49806626).add(-31.91988742)
      .add(-32.34055847).add(-32.52834982).array())
      .add(stan::math::array_builder<double>().add(-1.97276985)
      .add(-2.06239285).add(-2.27324221).add(-2.49680217).add(-2.73008337)
      .add(-2.97293083).add(-3.22383104).add(-3.47442787).add(-3.72785996)
      .add(-3.98379502).add(-4.24160601).add(-4.50165454).add(-4.76373087)
      .add(-5.02726514).add(-5.29177041).add(-5.55714057).add(-5.82348116)
      .add(-6.0912459).add(-6.36080221).add(-6.63295968).add(-6.91009685)
      .add(-7.18889227).add(-7.46633503).add(-7.74369245).add(-8.02215182)
      .add(-8.30148161).add(-8.58206192).add(-8.86425662).add(-9.14827027)
      .add(-9.43411252).add(-9.72266747).add(-10.01411459).add(-10.30869882)
      .add(-10.60652099).add(-10.9077172).add(-11.21225853).add(-11.51979014)
      .add(-11.83039656).add(-12.14423751).add(-12.46086126)
      .add(-12.78007657).add(-13.10131472).add(-13.42470841)
      .add(-13.75000932).add(-14.07704185).add(-14.40587328)
      .add(-14.73614799).add(-15.06737688).add(-15.39955751)
      .add(-15.73284996).add(-16.06751929).add(-16.40392533)
      .add(-16.74100273).add(-17.07862431).add(-17.41720435)
      .add(-17.75686395).add(-18.09770172).add(-18.43949489)
      .add(-18.78204741).add(-19.12568532).add(-19.47007346)
      .add(-19.81457924).add(-20.15865138).add(-20.50241512)
      .add(-20.84575875).add(-21.18728946).add(-21.52551175).add(-21.8612539)
      .add(-22.19460098).add(-22.52332446).add(-22.84682062)
      .add(-23.16576504).add(-23.47998524).add(-23.78941225)
      .add(-24.09388936).add(-24.39462821).add(-24.69264295)
      .add(-24.98748594).add(-25.27991992).add(-25.57128479)
      .add(-25.86452252).add(-26.16228866).add(-26.46209742)
      .add(-26.76814963).add(-27.08081061).add(-27.40140641)
      .add(-27.73083916).add(-28.06964398).add(-28.41527326)
      .add(-28.77068112).add(-29.13633969).add(-29.51125262)
      .add(-29.89583036).add(-30.28242352).add(-30.68682321)
      .add(-31.09523974).add(-31.51092274).add(-31.93084655).add(-32.3493258)
      .add(-32.53607988).array()).add(stan::math::array_builder<double>()
      .add(-1.98015639).add(-2.06990581).add(-2.28102841).add(-2.5048243)
      .add(-2.73832406).add(-2.98153484).add(-3.23295258).add(-3.4836111)
      .add(-3.73704168).add(-3.9929935).add(-4.25083558).add(-4.51097506)
      .add(-4.77320619).add(-5.03694404).add(-5.3016799).add(-5.56730132)
      .add(-5.83391547).add(-6.10197286).add(-6.37184525).add(-6.64436918)
      .add(-6.92212103).add(-7.20151475).add(-7.47929293).add(-7.75687533)
      .add(-8.03560464).add(-8.31524896).add(-8.59622776).add(-8.87892723)
      .add(-9.16356273).add(-9.45014546).add(-9.73955079).add(-10.03194011)
      .add(-10.32752948).add(-10.62639137).add(-10.92863038)
      .add(-11.23418615).add(-11.54267921).add(-11.85417477)
      .add(-12.16882135).add(-12.48615571).add(-12.80598245)
      .add(-13.12773531).add(-13.45154511).add(-13.77716961)
      .add(-14.10443447).add(-14.43340331).add(-14.76372896)
      .add(-15.09492324).add(-15.42697458).add(-15.76005429)
      .add(-16.09441157).add(-16.43040613).add(-16.7669652).add(-17.10396077)
      .add(-17.44180432).add(-17.78061009).add(-18.12048441)
      .add(-18.46119902).add(-18.80257118).add(-19.14497854)
      .add(-19.48807276).add(-19.83120512).add(-20.17383955)
      .add(-20.51615953).add(-20.85808813).add(-21.19824132)
      .add(-21.53516751).add(-21.86978185).add(-22.202192).add(-22.53013232)
      .add(-22.85303624).add(-23.17163324).add(-23.48569116)
      .add(-23.79511144).add(-24.09975962).add(-24.40085482)
      .add(-24.69940318).add(-24.99492706).add(-25.28816168)
      .add(-25.58040571).add(-25.87460545).add(-26.17342592)
      .add(-26.47426044).add(-26.78133635).add(-27.09497504)
      .add(-27.41648448).add(-27.74672402).add(-28.0862232).add(-28.43231211)
      .add(-28.78799004).add(-29.15368342).add(-29.52833128)
      .add(-29.91235745).add(-30.2978475).add(-30.70124633).add(-31.10831576)
      .add(-31.52247839).add(-31.94063427).add(-32.35710298)
      .add(-32.54291653).array()).array(),
      "assigning variable AtmosphericFluxPolyCoeffs");
    std::vector<local_scalar_t__> cos_theta_grid;
    cos_theta_grid = std::vector<local_scalar_t__>(30, DUMMY_VAR__);
    
    current_statement__ = 105;
    assign(cos_theta_grid, nil_index_list(),
      stan::math::array_builder<double>().add(-1.).add(-0.93103448)
      .add(-0.86206897).add(-0.79310345).add(-0.72413793).add(-0.65517241)
      .add(-0.5862069).add(-0.51724138).add(-0.44827586).add(-0.37931034)
      .add(-0.31034483).add(-0.24137931).add(-0.17241379).add(-0.10344828)
      .add(-0.03448276).add(0.03448276).add(0.10344828).add(0.17241379)
      .add(0.24137931).add(0.31034483).add(0.37931034).add(0.44827586)
      .add(0.51724138).add(0.5862069).add(0.65517241).add(0.72413793)
      .add(0.79310345).add(0.86206897).add(0.93103448).add(1.).array(),
      "assigning variable cos_theta_grid");
    std::vector<local_scalar_t__> log_energy_grid;
    log_energy_grid = std::vector<local_scalar_t__>(100, DUMMY_VAR__);
    
    current_statement__ = 106;
    assign(log_energy_grid, nil_index_list(),
      stan::math::array_builder<double>().add(0.).add(0.09090909)
      .add(0.18181818).add(0.27272727).add(0.36363636).add(0.45454545)
      .add(0.54545455).add(0.63636364).add(0.72727273).add(0.81818182)
      .add(0.90909091).add(1.).add(1.09090909).add(1.18181818)
      .add(1.27272727).add(1.36363636).add(1.45454545).add(1.54545455)
      .add(1.63636364).add(1.72727273).add(1.81818182).add(1.90909091)
      .add(2.).add(2.09090909).add(2.18181818).add(2.27272727)
      .add(2.36363636).add(2.45454545).add(2.54545455).add(2.63636364)
      .add(2.72727273).add(2.81818182).add(2.90909091).add(3.)
      .add(3.09090909).add(3.18181818).add(3.27272727).add(3.36363636)
      .add(3.45454545).add(3.54545455).add(3.63636364).add(3.72727273)
      .add(3.81818182).add(3.90909091).add(4.).add(4.09090909)
      .add(4.18181818).add(4.27272727).add(4.36363636).add(4.45454545)
      .add(4.54545455).add(4.63636364).add(4.72727273).add(4.81818182)
      .add(4.90909091).add(5.).add(5.09090909).add(5.18181818)
      .add(5.27272727).add(5.36363636).add(5.45454545).add(5.54545455)
      .add(5.63636364).add(5.72727273).add(5.81818182).add(5.90909091)
      .add(6.).add(6.09090909).add(6.18181818).add(6.27272727)
      .add(6.36363636).add(6.45454545).add(6.54545455).add(6.63636364)
      .add(6.72727273).add(6.81818182).add(6.90909091).add(7.)
      .add(7.09090909).add(7.18181818).add(7.27272727).add(7.36363636)
      .add(7.45454545).add(7.54545455).add(7.63636364).add(7.72727273)
      .add(7.81818182).add(7.90909091).add(8.).add(8.09090909)
      .add(8.18181818).add(8.27272727).add(8.36363636).add(8.45454545)
      .add(8.54545455).add(8.63636364).add(8.72727273).add(8.81818182)
      .add(8.90909091).add(9.).array(), "assigning variable log_energy_grid");
    Eigen::Matrix<local_scalar_t__, -1, 1> vector_interp_energies;
    vector_interp_energies = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(vector_interp_energies, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> vector_coz_grid_points;
    vector_coz_grid_points = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(vector_coz_grid_points, DUMMY_VAR__);
    
    current_statement__ = 109;
    assign(vector_interp_energies, cons_list(index_uni(1), nil_index_list()),
      interpolate(to_vector(log_energy_grid),
        to_vector(
          AtmosphericFluxPolyCoeffs[(binary_search(
                                       stan::math::abs(
                                         stan::math::cos(
                                           (stan::math::pi() -
                                             stan::math::acos(
                                               true_dir[(3 - 1)])))),
                                       cos_theta_grid, pstream__) - 1)]),
        stan::math::log10(
          truncate_value(true_energy, 1.0, 1000000000.0, pstream__)), pstream__),
      "assigning variable vector_interp_energies");
    current_statement__ = 110;
    assign(vector_interp_energies, cons_list(index_uni(2), nil_index_list()),
      interpolate(to_vector(log_energy_grid),
        to_vector(
          AtmosphericFluxPolyCoeffs[((binary_search(
                                        stan::math::abs(
                                          stan::math::cos(
                                            (stan::math::pi() -
                                              stan::math::acos(
                                                true_dir[(3 - 1)])))),
                                        cos_theta_grid, pstream__) + 1) - 1)]),
        stan::math::log10(
          truncate_value(true_energy, 1.0, 1000000000.0, pstream__)), pstream__),
      "assigning variable vector_interp_energies");
    current_statement__ = 111;
    assign(vector_coz_grid_points, cons_list(index_uni(1), nil_index_list()),
      cos_theta_grid[(binary_search(
                        stan::math::abs(
                          stan::math::cos(
                            (stan::math::pi() -
                              stan::math::acos(true_dir[(3 - 1)])))),
                        cos_theta_grid, pstream__) - 1)],
      "assigning variable vector_coz_grid_points");
    current_statement__ = 112;
    assign(vector_coz_grid_points, cons_list(index_uni(2), nil_index_list()),
      cos_theta_grid[((binary_search(
                         stan::math::abs(
                           stan::math::cos(
                             (stan::math::pi() -
                               stan::math::acos(true_dir[(3 - 1)])))),
                         cos_theta_grid, pstream__) + 1) - 1)],
      "assigning variable vector_coz_grid_points");
    current_statement__ = 113;
    return (pow(10,
              interpolate(vector_coz_grid_points, vector_interp_energies,
                stan::math::abs(
                  stan::math::cos(
                    (stan::math::pi() - stan::math::acos(true_dir[(3 - 1)])))), pstream__))
             * 10000.0);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct AtmopshericNumuFlux_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& true_energy,
           const Eigen::Matrix<T1__, -1, 1>& true_dir,
           std::ostream* pstream__)  const 
{
return AtmopshericNumuFlux(true_energy, true_dir, pstream__);
}
};

class atmo_gen_model final : public model_base_crtp<atmo_gen_model> {

 private:
  double Esrc_min;
  double Esrc_max;
  double cosz_min;
  double cosz_max;
 
 public:
  ~atmo_gen_model() final { }
  
  std::string model_name() const final { return "atmo_gen_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 v2.25.0");
    stanc_info.push_back("stancflags = --include_paths=/Users/fran/projects/hierarchical_nu/software/stan_files");
    return stanc_info;
  }
  
  
  atmo_gen_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "atmo_gen_model_namespace::atmo_gen_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization","Esrc_min","double",
          context__.to_vec());
      Esrc_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      Esrc_min = context__.vals_r("Esrc_min")[(1 - 1)];
      current_statement__ = 14;
      context__.validate_dims("data initialization","Esrc_max","double",
          context__.to_vec());
      Esrc_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      Esrc_max = context__.vals_r("Esrc_max")[(1 - 1)];
      current_statement__ = 15;
      context__.validate_dims("data initialization","cosz_min","double",
          context__.to_vec());
      cosz_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      cosz_min = context__.vals_r("cosz_min")[(1 - 1)];
      current_statement__ = 16;
      context__.validate_dims("data initialization","cosz_max","double",
          context__.to_vec());
      cosz_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      cosz_max = context__.vals_r("cosz_max")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "atmo_gen_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ energy;
      energy = DUMMY_VAR__;
      
      current_statement__ = 1;
      energy = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        energy = stan::math::lub_constrain(energy, Esrc_min, Esrc_max, lp__);
      } else {
        current_statement__ = 1;
        energy = stan::math::lub_constrain(energy, Esrc_min, Esrc_max);
      }
      local_scalar_t__ coszen;
      coszen = DUMMY_VAR__;
      
      current_statement__ = 2;
      coszen = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        coszen = stan::math::lub_constrain(coszen, cosz_min, cosz_max, lp__);
      } else {
        current_statement__ = 2;
        coszen = stan::math::lub_constrain(coszen, cosz_min, cosz_max);
      }
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      current_statement__ = 3;
      phi = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        phi = stan::math::lub_constrain(phi, 0, 6.283185307179586, lp__);
      } else {
        current_statement__ = 3;
        phi = stan::math::lub_constrain(phi, 0, 6.283185307179586);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> omega;
      omega = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(omega, DUMMY_VAR__);
      
      local_scalar_t__ zen;
      zen = DUMMY_VAR__;
      
      local_scalar_t__ theta;
      theta = DUMMY_VAR__;
      
      current_statement__ = 7;
      zen = stan::math::acos(coszen);
      current_statement__ = 8;
      theta = (stan::math::pi() - zen);
      current_statement__ = 9;
      assign(omega, cons_list(index_uni(1), nil_index_list()),
        (stan::math::sin(theta) * stan::math::cos(phi)),
        "assigning variable omega");
      current_statement__ = 10;
      assign(omega, cons_list(index_uni(2), nil_index_list()),
        (stan::math::sin(theta) * stan::math::sin(phi)),
        "assigning variable omega");
      current_statement__ = 11;
      assign(omega, cons_list(index_uni(3), nil_index_list()),
        stan::math::cos(theta), "assigning variable omega");
      current_statement__ = 4;
      current_statement__ = 4;
      check_unit_vector(function__, "omega", omega);
      {
        current_statement__ = 12;
        lp_accum__.add(
          stan::math::log(AtmopshericNumuFlux(energy, omega, pstream__)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "atmo_gen_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double energy;
      energy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      energy = in__.scalar();
      current_statement__ = 1;
      energy = stan::math::lub_constrain(energy, Esrc_min, Esrc_max);
      double coszen;
      coszen = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      coszen = in__.scalar();
      current_statement__ = 2;
      coszen = stan::math::lub_constrain(coszen, cosz_min, cosz_max);
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      phi = in__.scalar();
      current_statement__ = 3;
      phi = stan::math::lub_constrain(phi, 0, 6.283185307179586);
      Eigen::Matrix<double, -1, 1> omega;
      omega = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(omega, std::numeric_limits<double>::quiet_NaN());
      
      double zen;
      zen = std::numeric_limits<double>::quiet_NaN();
      
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(energy);
      vars__.emplace_back(coszen);
      vars__.emplace_back(phi);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      zen = stan::math::acos(coszen);
      current_statement__ = 8;
      theta = (stan::math::pi() - zen);
      current_statement__ = 9;
      assign(omega, cons_list(index_uni(1), nil_index_list()),
        (stan::math::sin(theta) * stan::math::cos(phi)),
        "assigning variable omega");
      current_statement__ = 10;
      assign(omega, cons_list(index_uni(2), nil_index_list()),
        (stan::math::sin(theta) * stan::math::sin(phi)),
        "assigning variable omega");
      current_statement__ = 11;
      assign(omega, cons_list(index_uni(3), nil_index_list()),
        stan::math::cos(theta), "assigning variable omega");
      current_statement__ = 4;
      current_statement__ = 4;
      check_unit_vector(function__, "omega", omega);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          vars__.emplace_back(omega[(sym1__ - 1)]);}
        vars__.emplace_back(zen);
        vars__.emplace_back(theta);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double energy;
      energy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      energy = context__.vals_r("energy")[(1 - 1)];
      double energy_free__;
      energy_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      energy_free__ = stan::math::lub_free(energy, Esrc_min, Esrc_max);
      double coszen;
      coszen = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      coszen = context__.vals_r("coszen")[(1 - 1)];
      double coszen_free__;
      coszen_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      coszen_free__ = stan::math::lub_free(coszen, cosz_min, cosz_max);
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      phi = context__.vals_r("phi")[(1 - 1)];
      double phi_free__;
      phi_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      phi_free__ = stan::math::lub_free(phi, 0, 6.283185307179586);
      vars__.emplace_back(energy_free__);
      vars__.emplace_back(coszen_free__);
      vars__.emplace_back(phi_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("energy");
    names__.emplace_back("coszen");
    names__.emplace_back("phi");
    names__.emplace_back("omega");
    names__.emplace_back("zen");
    names__.emplace_back("theta");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "energy");
    param_names__.emplace_back(std::string() + "coszen");
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "zen");
      param_names__.emplace_back(std::string() + "theta");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "energy");
    param_names__.emplace_back(std::string() + "coszen");
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "zen");
      param_names__.emplace_back(std::string() + "theta");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"energy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"coszen\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"zen\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"energy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"coszen\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"zen\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = atmo_gen_model_namespace::atmo_gen_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


