
// Code generated by stanc v2.26.0
#include <stan/model/model_header.hpp>
namespace atmo_gen_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 647, column 0 to column 44)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 648, column 0 to column 44)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 649, column 0 to column 43)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 653, column 0 to column 21)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 654, column 0 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 655, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 656, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 657, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 658, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 659, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 660, column 0 to column 22)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 664, column 0 to column 50)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 640, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 641, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 642, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 643, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 13, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 18, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 16, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 22, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 11, column 45, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 31, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 31, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 32, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 35, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 34, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 34, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 38, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 29, column 39, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 46, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 47, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 49, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 48, column 15, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 48, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 51, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 45, column 39, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 59, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 58, column 25, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 58, column 10, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 56, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 55, column 20, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 55, column 5, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 61, column 5, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 54, column 55, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 68, column 18, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 68, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 69, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 72, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 71, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 70, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 74, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 66, column 0, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 79, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 80, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 81, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 89, column 12, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 95, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 93, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 92, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 91, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 90, column 12, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 88, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 87, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 86, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 85, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 84, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 83, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 82, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 98, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 78, column 0, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 15, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 17, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 18, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 20, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 21, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 22, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 23, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 38, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 23, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 35, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 28, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 35, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 33, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 45, column 7, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 43, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 30, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 49, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 50, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 51, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 52, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 54, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 56, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 12, column 59, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 7, column 0 to line 606, column 69)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 607, column 0 to line 611, column 74)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 612, column 0 to line 628, column 46)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 629, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 630, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 631, column 0 to column 228)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 632, column 0 to column 232)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 633, column 0 to column 110)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 634, column 0 to column 114)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 635, column 0 to column 118)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/atmo_gen.stan', line 6, column 0 to line 636, column 1)"};


template <typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
trapz(const T0__& x_values_arg__, const T1__& y_values_arg__,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& x_values = to_ref(x_values_arg__);
  const auto& y_values = to_ref(y_values_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 17;
    N = num_elements(x_values);
    local_scalar_t__ I;
    I = DUMMY_VAR__;
    
    current_statement__ = 18;
    I = 0;
    current_statement__ = 21;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 19;
      I = (I +
            ((0.5 * (x_values[((i + 1) - 1)] - x_values[(i - 1)])) *
              (y_values[(i - 1)] + y_values[((i + 1) - 1)])));}
    current_statement__ = 22;
    return I;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct trapz_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
operator()(const T0__& x_values, const T1__& y_values,
           std::ostream* pstream__)  const 
{
return trapz(x_values, y_values, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
linspace(const T0__& A, const T1__& B, const int& N, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 24;
    validate_non_negative_index("output", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> output;
    output = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(output, DUMMY_VAR__);
    
    local_scalar_t__ dx;
    dx = DUMMY_VAR__;
    
    current_statement__ = 26;
    dx = ((B - A) / (N - 1));
    current_statement__ = 29;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 27;
      assign(output, cons_list(index_uni(i), nil_index_list()),
        (A + ((i - 1) * dx)), "assigning variable output");}
    current_statement__ = 30;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct linspace_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& A, const T1__& B, const int& N,
           std::ostream* pstream__)  const 
{
return linspace(A, B, N, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
eval_poly1d(const T0__& x, const T1__& coeffs_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>>;
  const auto& coeffs = to_ref(coeffs_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 32;
    N = num_elements(coeffs);
    local_scalar_t__ res;
    res = DUMMY_VAR__;
    
    current_statement__ = 33;
    res = 0;
    current_statement__ = 36;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 34;
      res = (res + (coeffs[(i - 1)] * pow(x, (N - i))));}
    current_statement__ = 37;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eval_poly1d_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
operator()(const T0__& x, const T1__& coeffs, std::ostream* pstream__)  const 
{
return eval_poly1d(x, coeffs, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
truncate_value(const T0__& x, const T1__& min_val, const T2__& max_val,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 44;
    if (logical_lt(x, min_val)) {
      current_statement__ = 42;
      return min_val;
    } else {
      current_statement__ = 41;
      if (logical_gt(x, max_val)) {
        current_statement__ = 39;
        return max_val;
      } 
    }
    current_statement__ = 45;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct truncate_value_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& x, const T1__& min_val, const T2__& max_val,
           std::ostream* pstream__)  const 
{
return truncate_value(x, min_val, max_val, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
generate_bin_edges(const T0__& lower_edge, const T1__& upper_edge,
                   const int& nbins, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 47;
    validate_non_negative_index("binedges", "nbins + 1", (nbins + 1));
    std::vector<local_scalar_t__> binedges;
    binedges = std::vector<local_scalar_t__>((nbins + 1), DUMMY_VAR__);
    
    local_scalar_t__ binwidth;
    binwidth = DUMMY_VAR__;
    
    current_statement__ = 49;
    binwidth = ((upper_edge - lower_edge) / nbins);
    current_statement__ = 52;
    for (int i = 1; i <= (nbins + 1); ++i) {
      current_statement__ = 50;
      assign(binedges, cons_list(index_uni(i), nil_index_list()),
        (lower_edge + ((i - 1) * binwidth)), "assigning variable binedges");}
    current_statement__ = 53;
    return binedges;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct generate_bin_edges_functor__ {
template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
operator()(const T0__& lower_edge, const T1__& upper_edge, const int& nbins,
           std::ostream* pstream__)  const 
{
return generate_bin_edges(lower_edge, upper_edge, nbins, pstream__);
}
};

template <typename T0__, typename T1__>
int
binary_search(const T0__& value, const std::vector<T1__>& binedges,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int L;
    L = std::numeric_limits<int>::min();
    
    current_statement__ = 55;
    L = 1;
    int R;
    R = std::numeric_limits<int>::min();
    
    current_statement__ = 56;
    R = size(binedges);
    int m;
    m = std::numeric_limits<int>::min();
    
    current_statement__ = 70;
    if (logical_lt(value, binedges[(1 - 1)])) {
      current_statement__ = 69;
      return 0;
    } else {
      current_statement__ = 68;
      if (logical_gt(value, binedges[(R - 1)])) {
        current_statement__ = 67;
        return (R + 1);
      } else {
        current_statement__ = 65;
        while (logical_lt(L, (R - 1))) {
          current_statement__ = 58;
          m = ((L + R) / 2);
          current_statement__ = 63;
          if (logical_lt(binedges[(m - 1)], value)) {
            current_statement__ = 62;
            L = m;
          } else {
            current_statement__ = 61;
            if (logical_gt(binedges[(m - 1)], value)) {
              current_statement__ = 60;
              R = m;
            } else {
              current_statement__ = 59;
              return m;
            }
          }
        }
      }
    }
    current_statement__ = 71;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct binary_search_functor__ {
template <typename T0__, typename T1__>
int
operator()(const T0__& value, const std::vector<T1__>& binedges,
           std::ostream* pstream__)  const 
{
return binary_search(value, binedges, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>
interpolate(const T0__& x_values_arg__, const T1__& y_values_arg__,
            const T2__& x, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          T2__>;
  const auto& x_values = to_ref(x_values_arg__);
  const auto& y_values = to_ref(y_values_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x_left;
    x_left = DUMMY_VAR__;
    
    local_scalar_t__ y_left;
    y_left = DUMMY_VAR__;
    
    local_scalar_t__ x_right;
    x_right = DUMMY_VAR__;
    
    local_scalar_t__ y_right;
    y_right = DUMMY_VAR__;
    
    local_scalar_t__ dydx;
    dydx = DUMMY_VAR__;
    
    int Nx;
    Nx = std::numeric_limits<int>::min();
    
    current_statement__ = 78;
    Nx = num_elements(x_values);
    local_scalar_t__ xmin;
    xmin = DUMMY_VAR__;
    
    current_statement__ = 79;
    xmin = x_values[(1 - 1)];
    local_scalar_t__ xmax;
    xmax = DUMMY_VAR__;
    
    current_statement__ = 80;
    xmax = x_values[(Nx - 1)];
    int i;
    i = std::numeric_limits<int>::min();
    
    current_statement__ = 81;
    i = 1;
    current_statement__ = 89;
    if ((primitive_value(logical_gt(x, xmax)) || primitive_value(
        logical_lt(x, xmin)))) {
      current_statement__ = 87;
      if (logical_gt(x, xmax)) {
        current_statement__ = 85;
        return y_values[(Nx - 1)];
      } else {
        current_statement__ = 84;
        if (logical_lt(x, xmin)) {
          current_statement__ = 82;
          return y_values[(1 - 1)];
        } 
      }
    } 
    current_statement__ = 96;
    if (logical_gte(x, x_values[((Nx - 1) - 1)])) {
      current_statement__ = 94;
      i = (Nx - 1);
    } else {
      current_statement__ = 92;
      while (logical_gt(x, x_values[((i + 1) - 1)])) {
        current_statement__ = 90;
        i = (i + 1);
      }
    }
    current_statement__ = 97;
    x_left = x_values[(i - 1)];
    current_statement__ = 98;
    y_left = y_values[(i - 1)];
    current_statement__ = 99;
    x_right = x_values[((i + 1) - 1)];
    current_statement__ = 100;
    y_right = y_values[((i + 1) - 1)];
    current_statement__ = 101;
    dydx = ((y_right - y_left) / (x_right - x_left));
    current_statement__ = 102;
    return (y_left + (dydx * (x - x_left)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct interpolate_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
T2__>
operator()(const T0__& x_values, const T1__& y_values, const T2__& x,
           std::ostream* pstream__)  const 
{
return interpolate(x_values, y_values, x, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
AtmopshericNumuFlux(const T0__& true_energy, const T1__& true_dir_arg__,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>>;
  const auto& true_dir = to_ref(true_dir_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> AtmosphericFluxPolyCoeffs;
    AtmosphericFluxPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(30, std::vector<local_scalar_t__>(100, DUMMY_VAR__));
    
    current_statement__ = 104;
    assign(AtmosphericFluxPolyCoeffs, nil_index_list(),
      std::vector<std::vector<double>>{std::vector<double>{-1.98015639,
      -2.06990581, -2.28102841, -2.5048243, -2.73832406, -2.98153484,
      -3.23295258, -3.4836111, -3.73704168, -3.9929935, -4.25083558,
      -4.51097506, -4.77320619, -5.03694404, -5.3016799, -5.56730132,
      -5.83391547, -6.10197286, -6.37184525, -6.64436918, -6.92212103,
      -7.20151475, -7.47929293, -7.75687533, -8.03560464, -8.31524896,
      -8.59622776, -8.87892723, -9.16356273, -9.45014546, -9.73955079,
      -10.03194011, -10.32752948, -10.62639137, -10.92863038, -11.23418615,
      -11.54267921, -11.85417477, -12.16882135, -12.48615571, -12.80598245,
      -13.12773531, -13.45154511, -13.77716961, -14.10443447, -14.43340331,
      -14.76372896, -15.09492324, -15.42697458, -15.76005429, -16.09441157,
      -16.43040613, -16.7669652, -17.10396077, -17.44180432, -17.78061009,
      -18.12048441, -18.46119902, -18.80257118, -19.14497854, -19.48807276,
      -19.83120512, -20.17383955, -20.51615953, -20.85808813, -21.19824132,
      -21.53516751, -21.86978185, -22.202192, -22.53013232, -22.85303624,
      -23.17163324, -23.48569116, -23.79511144, -24.09975962, -24.40085482,
      -24.69940318, -24.99492706, -25.28816168, -25.58040571, -25.87460545,
      -26.17342592, -26.47426044, -26.78133635, -27.09497504, -27.41648448,
      -27.74672402, -28.0862232, -28.43231211, -28.78799004, -29.15368342,
      -29.52833128, -29.91235745, -30.2978475, -30.70124633, -31.10831576,
      -31.52247839, -31.94063427, -32.35710298, -32.54291653},
      std::vector<double>{-1.97276985, -2.06239285, -2.27324221, -2.49680217,
      -2.73008337, -2.97293083, -3.22383104, -3.47442787, -3.72785996,
      -3.98379502, -4.24160601, -4.50165454, -4.76373087, -5.02726514,
      -5.29177041, -5.55714057, -5.82348116, -6.0912459, -6.36080221,
      -6.63295968, -6.91009685, -7.18889227, -7.46633503, -7.74369245,
      -8.02215182, -8.30148161, -8.58206192, -8.86425662, -9.14827027,
      -9.43411252, -9.72266747, -10.01411459, -10.30869882, -10.60652099,
      -10.9077172, -11.21225853, -11.51979014, -11.83039656, -12.14423751,
      -12.46086126, -12.78007657, -13.10131472, -13.42470841, -13.75000932,
      -14.07704185, -14.40587328, -14.73614799, -15.06737688, -15.39955751,
      -15.73284996, -16.06751929, -16.40392533, -16.74100273, -17.07862431,
      -17.41720435, -17.75686395, -18.09770172, -18.43949489, -18.78204741,
      -19.12568532, -19.47007346, -19.81457924, -20.15865138, -20.50241512,
      -20.84575875, -21.18728946, -21.52551175, -21.8612539, -22.19460098,
      -22.52332446, -22.84682062, -23.16576504, -23.47998524, -23.78941225,
      -24.09388936, -24.39462821, -24.69264295, -24.98748594, -25.27991992,
      -25.57128479, -25.86452252, -26.16228866, -26.46209742, -26.76814963,
      -27.08081061, -27.40140641, -27.73083916, -28.06964398, -28.41527326,
      -28.77068112, -29.13633969, -29.51125262, -29.89583036, -30.28242352,
      -30.68682321, -31.09523974, -31.51092274, -31.93084655, -32.3493258,
      -32.53607988}, std::vector<double>{-1.96499252, -2.05445424,
      -2.26495215, -2.48820249, -2.72120067, -2.96363099, -3.21397128,
      -3.46447441, -3.71789182, -3.97380897, -4.23159842, -4.49157103,
      -4.75350837, -5.01685243, -5.28113546, -5.54625529, -5.81231308,
      -6.07976434, -6.34897438, -6.62072838, -6.89721365, -7.17537695,
      -7.45245451, -7.7295647, -8.0077417, -8.28675188, -8.56693239,
      -8.84862018, -9.13200433, -9.41708854, -9.7047621, -9.99522077,
      -10.28873833, -10.5854451, -10.88551128, -11.188943, -11.49541366,
      -11.80503061, -12.11796766, -12.43378719, -12.75230411, -13.07294856,
      -13.39585564, -13.72077109, -14.04751788, -14.37616658, -14.70635243,
      -15.03758498, -15.36987051, -15.70335729, -16.03832615, -16.37513699,
      -16.71273218, -17.05098584, -17.39031565, -17.73085075, -18.07268283,
      -18.41559631, -18.75938272, -19.10431533, -19.4500738, -19.79604417,
      -20.14166068, -20.48698741, -20.83187603, -21.17492578, -21.51459496,
      -21.85161664, -22.18604678, -22.51569168, -22.83990603, -23.15930729,
      -23.47378092, -23.78328605, -24.0876442, -24.38805971, -24.68555497,
      -24.97971363, -25.27132723, -25.56177831, -25.85400512, -26.15065461,
      -26.4493654, -26.75431219, -27.06590602, -27.38549281, -27.71401957,
      -28.05202843, -28.39710013, -28.752145, -29.11768555, -29.49279487,
      -29.87787682, -30.2655646, -30.67097026, -31.08078075, -31.49806626,
      -31.91988742, -32.34055847, -32.52834982}, std::vector<double>{
      -1.95695625, -2.04622042, -2.25628573, -2.47914922, -2.71179535,
      -2.95374992, -3.20348308, -3.45385129, -3.70722702, -3.96311309,
      -4.22087758, -4.48077593, -4.74257656, -5.00573013, -5.2697855,
      -5.5346419, -5.80039311, -6.06749476, -6.33631205, -6.60760849,
      -6.8833877, -7.16086834, -7.43753467, -7.71436103, -7.99223202,
      -8.27090956, -8.55068429, -8.83186107, -9.11460792, -9.39891702,
      -9.68567817, -9.97510051, -10.26748595, -10.56299487, -10.86183409,
      -11.16404874, -11.46934455, -11.77785576, -12.08977383, -12.40467842,
      -12.72239336, -13.04234933, -13.36468482, -13.68913978, -14.01553582,
      -14.34394635, -14.67399671, -15.00519461, -15.33755449, -15.67121209,
      -16.00646381, -16.34366939, -16.68177922, -17.02066908, -17.36076075,
      -17.70219252, -18.04505015, -18.38912711, -18.73420364, -19.08049924,
      -19.42771044, -19.77524489, -20.12252361, -20.4695466, -20.81612731,
      -21.16085834, -21.50214954, -21.84062927, -22.1763165, -22.50704931,
      -22.83213538, -23.15212854, -23.46696969, -23.7766441, -24.08095194,
      -24.38109032, -24.67809016, -24.97156778, -25.26234491, -25.55184833,
      -25.8430133, -26.13847916, -26.43601286, -26.73976343, -27.05018961,
      -27.36865913, -27.6961662, -28.0332615, -28.37766064, -28.7322318,
      -29.09755296, -29.47277201, -29.8582941, -30.24705437, -30.65346006,
      -31.06470606, -31.48367741, -31.90753597, -32.33060277, -32.51954267},
      std::vector<double>{-1.94845527, -2.03747273, -2.2469925, -2.46935822,
      -2.70155028, -2.94293964, -3.19199106, -3.44216229, -3.69545584,
      -3.95129312, -4.20903364, -4.46887148, -4.73055586, -4.99354121,
      -5.25738837, -5.52199328, -5.78743726, -6.05417249, -6.32256513,
      -6.5933593, -6.86838314, -7.14513199, -7.42134007, -7.69784405,
      -7.97538398, -8.25371605, -8.53308111, -8.81374666, -9.0958535,
      -9.37937571, -9.66519758, -9.95353759, -10.24472413, -10.53894763,
      -10.83645386, -11.13733115, -11.4413223, -11.74859321, -12.05935731,
      -12.37321566, -12.69000456, -13.00915769, -13.33081829, -13.65472111,
      -13.98068656, -14.30879049, -14.63864754, -14.96976297, -15.30215865,
      -15.63595694, -15.97146942, -16.30905529, -16.64767314, -16.98720073,
      -17.32806453, -17.67041326, -18.01432772, -18.35961256, -18.70603813,
      -19.05376938, -19.40252217, -19.75172938, -20.10080069, -20.44966942,
      -20.79810941, -21.14470864, -21.48782649, -21.82797577, -22.16512911,
      -22.49715228, -22.82329903, -23.14405255, -23.45940562, -23.76936675,
      -24.07371521, -24.37364079, -24.67018318, -24.96299288, -25.25292346,
      -25.54144761, -25.83149852, -26.12570915, -26.42197908, -26.72443234,
      -27.03357756, -27.35080647, -27.67716289, -28.01320777, -28.35679867,
      -28.71076353, -29.07574132, -29.45096069, -29.83683719, -30.22662931,
      -30.6340134, -31.04672739, -31.46746656, -31.89351282, -32.31920489,
      -32.50942185}, std::vector<double>{-1.93954285, -2.02825771,
      -2.23710214, -2.45884012, -2.69045546, -2.93116949, -3.17944463,
      -3.42933476, -3.68248473, -3.9382373, -4.19594007, -4.45572018,
      -4.71730156, -4.98013701, -5.24379377, -5.50815858, -5.77329386,
      -6.03964317, -6.30757368, -6.57781177, -6.85201912, -7.12797283,
      -7.40365955, -7.67978685, -7.95695746, -8.23492148, -8.51386744,
      -8.79402004, -9.07548588, -9.35821295, -9.64307222, -9.93028573,
      -10.22020517, -10.51304987, -10.8091064, -11.10851061, -11.41104757,
      -11.71692043, -12.0263699, -12.33902368, -12.65473523, -12.97294465,
      -13.29380204, -13.61703795, -13.94247217, -14.27018262, -14.5997724,
      -14.93074367, -15.2631248, -15.59702371, -15.93276649, -16.27071122,
      -16.60982477, -16.94998704, -17.29162975, -17.63491326, -17.97991453,
      -18.32645172, -18.674287, -19.02353024, -19.37391959, -19.72491762,
      -20.0759254, -20.42680731, -20.77729677, -21.12598017, -21.47116492,
      -21.81323603, -22.15210856, -22.48567064, -22.81311328, -23.1348399,
      -23.4508899, -23.76129105, -24.0658018, -24.36560437, -24.66174729,
      -24.95391693, -25.24300054, -25.53051866, -25.81940347, -26.11228303,
      -26.40719453, -26.70823772, -27.01597371, -27.33182067, -27.65687458,
      -27.99170862, -28.33432998, -28.68752858, -29.05201029, -29.42709126,
      -29.81320783, -30.20396564, -30.61228409, -31.02648369, -31.44906698,
      -31.87745988, -32.30603498, -32.49767781}, std::vector<double>{
      -1.93017477, -2.01851835, -2.22652506, -2.44746813, -2.6783441,
      -2.91823196, -3.16559633, -3.41508183, -3.66799172, -3.9235959,
      -4.18122804, -4.44094325, -4.70243379, -4.96514444, -5.22864147,
      -5.49279416, -5.75763669, -6.02359593, -6.29103784, -6.56067113,
      -6.83400023, -7.10908955, -7.38418155, -7.65986572, -7.93661742,
      -8.21418224, -8.49269515, -8.77233306, -9.05316091, -9.33509129,
      -9.61897182, -9.90502011, -10.19360598, -10.48497477, -10.77945474,
      -11.0772335, -11.378144, -11.6824331, -11.99037534, -12.30163164,
      -12.61607902, -12.93316875, -13.25306095, -13.57548379, -13.90025754,
      -14.22746205, -14.5566881, -14.88743404, -15.2197336, -15.55367891,
      -15.88960963, -16.22788181, -16.56747045, -16.90825761, -17.25068065,
      -17.59491278, -17.94102822, -18.28886121, -18.63816773, -18.98900245,
      -19.34112931, -19.69404598, -20.04714878, -20.40023157, -20.75298734,
      -21.10400551, -21.45154086, -21.79583703, -22.13673812, -22.4721477,
      -22.80118276, -23.12415485, -23.44114236, -23.75218648, -24.05702445,
      -24.35683013, -24.65266071, -24.94424039, -25.23249205, -25.51898638,
      -25.80665586, -26.09812548, -26.39157577, -26.69108326, -26.99726445,
      -27.31156672, -27.63514102, -27.9685749, -28.31003354, -28.66227139,
      -29.02606766, -29.40083339, -29.78703775, -30.17865991, -30.58783675,
      -31.00351602, -31.42800712, -31.85891061, -32.2906568, -32.48389809},
      std::vector<double>{-1.92050298, -2.00840107, -2.21539255, -2.43535482,
      -2.66530706, -2.904195, -3.15049019, -3.39941719, -3.65195823,
      -3.90731834, -4.16481655, -4.42443259, -4.68582174, -4.94841469,
      -5.21176896, -5.47572714, -5.74028425, -6.00583983, -6.2727542,
      -6.54171669, -6.81408389, -7.08821248, -7.36260453, -7.63774579,
      -7.91399812, -8.19110658, -8.46915348, -8.74826396, -9.02845353,
      -9.30958847, -9.59248031, -9.87733104, -10.16452033, -10.45431377,
      -10.74708034, -11.04306289, -11.34214791, -11.64463316, -11.95083493,
      -12.26045578, -12.57340477, -12.88915108, -13.20786962, -13.52928921,
      -13.85323268, -14.17978213, -14.50851538, -14.83892637, -15.17105275,
      -15.50496923, -15.84102764, -16.17958069, -16.51961106, -16.86100271,
      -17.20419876, -17.54938632, -17.89663799, -18.24580679, -18.59664488,
      -18.94915192, -19.30312192, -19.65809414, -20.01346541, -20.36895861,
      -20.72422759, -21.07787157, -21.42809385, -21.77498183, -22.11829299,
      -22.45593754, -22.78694386, -23.11151544, -23.42975852, -23.74171888,
      -24.04711125, -24.34709934, -24.64274835, -24.93382227, -25.221282,
      -25.50675094, -25.79316351, -26.08314405, -26.37502322, -26.67285564,
      -26.97731679, -27.28988642, -27.6117734, -27.94358211, -28.28364492,
      -28.63468369, -28.99755777, -29.37178135, -29.7578702, -30.15020624,
      -30.56011949, -30.97723562, -31.4036741, -31.83724944, -32.27248478,
      -32.46752421}, std::vector<double>{-1.91053194, -1.99789466,
      -2.20365062, -2.42239385, -2.65117815, -2.8888279, -3.13382839,
      -3.38197292, -3.63394954, -3.88891146, -4.14616548, -4.40561481,
      -4.66687373, -4.92935251, -5.19259063, -5.45639192, -5.7206971,
      -5.98586245, -6.25223335, -6.52047381, -6.79180029, -7.06486579,
      -7.33843601, -7.6129109, -7.88855735, -8.16512799, -8.4426571,
      -8.72121669, -9.00076624, -9.28111393, -9.56301951, -9.8466545,
      -10.13239588, -10.42051957, -10.71143115, -11.00543049, -11.3024627,
      -11.60288407, -11.90706205, -12.21475146, -12.52590489, -12.84001902,
      -13.15729068, -13.47745447, -13.80033951, -14.12603135, -14.45409474,
      -14.78401889, -15.11584367, -15.4496244, -15.7857231, -16.12448725,
      -16.46490631, -16.80686545, -17.15081326, -17.49695149, -17.84535207,
      -18.19588957, -18.54831496, -18.90257362, -19.25849455, -19.61566645,
      -19.9734937, -20.33162931, -20.68969131, -21.04629875, -21.39960739,
      -21.74953302, -22.09572857, -22.43610004, -22.76956849, -23.09620737,
      -23.41613428, -23.72938621, -24.03565203, -24.33608177, -24.63174683,
      -24.922453, -25.20920177, -25.49367232, -25.77880311, -26.06722101,
      -26.35741513, -26.65342006, -26.95597455, -27.26659444, -27.58654972,
      -27.91646448, -28.25484821, -28.60439354, -28.96604702, -29.33943517,
      -29.72513594, -30.11796622, -30.52842717, -30.94687981, -31.37526202,
      -31.81165309, -32.25072017, -32.44778674}, std::vector<double>{
      -1.90037906, -1.98710252, -2.19136019, -2.40858812, -2.63588773,
      -2.87197707, -3.11536417, -3.36239856, -3.61350968, -3.86781924,
      -4.12462973, -4.38377206, -4.64481903, -4.90715635, -5.17029619,
      -5.43398921, -5.69810218, -5.96292506, -6.22877142, -6.49626669,
      -6.76649052, -7.03839278, -7.31100545, -7.58466408, -7.85956488,
      -8.13548154, -8.4124109, -8.69037548, -8.96927522, -9.2488491,
      -9.52978676, -9.8122099, -10.09647457, -10.38285073, -10.67177108,
      -10.96359073, -11.25831626, -11.55636968, -11.85818031, -12.16356826,
      -12.47254513, -12.78464878, -13.10010879, -13.41867401, -13.74018651,
      -14.06473824, -14.39188192, -14.72110244, -15.05244015, -15.38592872,
      -15.72193755, -16.06080621, -16.40152945, -16.74399226, -17.08864764,
      -17.43571219, -17.78525776, -18.13718305, -18.49124067, -18.84732291,
      -19.20529941, -19.56481748, -19.92529827, -20.28632842, -20.64749628,
      -21.00745542, -21.36432289, -21.71782831, -22.0675007, -22.41122923,
      -22.74780397, -23.07713848, -23.3993372, -23.71440736, -24.02200494,
      -24.3232592, -24.61924365, -24.90980731, -25.19599499, -25.47954519,
      -25.76340323, -26.05020276, -26.33860201, -26.63261819, -26.93305886,
      -27.24148032, -27.55921704, -27.88691629, -28.22327548, -28.57096167,
      -28.93101589, -29.30318688, -29.68813227, -30.08113893, -30.49186122,
      -30.91146014, -31.34170751, -31.78101283, -32.22426171, -32.42361197},
      std::vector<double>{-1.89035838, -1.97633559, -2.17881109, -2.39418459,
      -2.61961702, -2.85373734, -3.09508721, -3.34055584, -3.59036046,
      -3.84362035, -4.09964941, -4.35821842, -4.61886513, -4.88095197,
      -5.14395833, -5.40756801, -5.67155154, -5.93610235, -6.2014755,
      -6.46823395, -6.73731569, -7.00795965, -7.2794618, -7.55211722,
      -7.82608179, -8.10117054, -8.37736217, -8.65464187, -8.93285356,
      -9.21165975, -9.49166044, -9.77290396, -10.05569974, -10.34028601,
      -10.62710416, -10.91655548, -11.20870558, -11.50404641, -11.80307978,
      -12.10570627, -12.41201691, -12.72160998, -13.03476426, -13.35125687,
      -13.67095446, -13.99396183, -14.31982319, -14.6480214, -14.97859597,
      -15.31155648, -15.64727607, -15.98608262, -16.32697379, -16.66983194,
      -17.01511228, -17.36304537, -17.71370279, -18.06700929, -18.42272187,
      -18.7806814, -19.14080419, -19.50280647, -19.86613781, -20.23032497,
      -20.59493708, -20.95868337, -21.31965867, -21.67739583, -22.03128144,
      -22.37917506, -22.71970719, -23.05259162, -23.37788308, -23.69552595,
      -24.00512902, -24.30778687, -24.604566, -24.89535824, -25.18125384,
      -25.46405455, -25.74671618, -26.03188524, -26.31840331, -26.61027422,
      -26.90838169, -27.2143277, -27.52951494, -27.8546179, -28.18853336,
      -28.53390689, -28.89188091, -29.26233681, -29.64603097, -30.03875681,
      -30.44931135, -30.86972618, -31.30163242, -31.74385294, -32.19159871,
      -32.39350428}, std::vector<double>{-1.88094832, -1.96608587,
      -2.16650572, -2.3796615, -2.60277891, -2.8344146, -3.0731548,
      -3.31640704, -3.5642371, -3.81580482, -4.07046469, -4.32795388,
      -4.58779501, -4.8493416, -5.11204522, -5.37551554, -5.63940622,
      -5.90377737, -6.16878585, -6.43489136, -6.70286923, -6.97222146,
      -7.24249237, -7.51395736, -7.7867655, -8.06079972, -8.33605103,
      -8.61249312, -8.88993117, -9.16795501, -9.44705979, -9.727196,
      -10.00859371, -10.29142143, -10.57609699, -10.86304571, -11.15237824,
      -11.4446524, -11.74044939, -12.03976498, -12.34279517, -12.64922487,
      -12.95940645, -13.27316816, -13.59042164, -13.91129746, -14.23534031,
      -14.56203748, -14.8914281, -15.22349615, -15.55861394, -15.89709268,
      -16.23792939, -16.58099983, -16.92675725, -17.27544337, -17.62712777,
      -17.98176166, -18.3391083, -18.69895922, -19.06128285, -19.42587485,
      -19.79222666, -20.15981557, -20.5282073, -20.89619625, -21.26188314,
      -21.62460317, -21.98358848, -22.33666053, -22.68226009, -23.0198508,
      -23.34938497, -23.67069194, -23.98330582, -24.28825904, -24.58659134,
      -24.87823134, -25.16431407, -25.44670768, -25.72838288, -26.01200776,
      -26.29662711, -26.58623777, -26.8818099, -27.1849976, -27.49727558,
      -27.81935069, -28.15033009, -28.49284223, -28.84813663, -29.21623732,
      -29.59801894, -29.98981613, -30.39957134, -30.82025809, -31.2534045,
      -31.69834844, -32.15077468, -32.35548229}, std::vector<double>{
      -1.87293958, -1.95720919, -2.15543109, -2.36610006, -2.58649239,
      -2.81509736, -3.0505465, -3.29072772, -3.53562864, -3.78450752,
      -4.03680748, -4.29228217, -4.55048448, -4.81079963, -5.07268148,
      -5.335681, -5.59933287, -5.8635337, -6.12829538, -6.39391597,
      -6.6609631, -6.92914008, -7.19819222, -7.46837828, -7.73986432,
      -8.0126251, -8.28670217, -8.56209959, -8.83862295, -9.11581623,
      -9.39407079, -9.67322555, -9.95339846, -10.23464017, -10.51729532,
      -10.80177025, -11.0881851, -11.37714041, -11.66929021, -11.96473187,
      -12.26379268, -12.56627589, -12.87264055, -13.18280147, -13.49674924,
      -13.81466497, -14.13611353, -14.46060215, -14.78817522, -15.11879315,
      -15.4528231, -15.79055392, -16.13097759, -16.47395724, -16.81993703,
      -17.16916386, -17.52170076, -17.87752241, -18.2363982, -18.59807222,
      -18.96256765, -19.32976711, -19.69921666, -20.07035778, -20.44277437,
      -20.81538355, -21.18633438, -21.55478312, -21.91981325, -22.279214,
      -22.6312164, -22.97498217, -23.31029276, -23.63678591, -23.95387232,
      -24.26247048, -24.56355188, -24.85706128, -25.1441683, -25.42680565,
      -25.70796239, -25.99034009, -26.27321414, -26.56058507, -26.85352413,
      -27.15374543, -27.46279937, -27.78143125, -28.10896595, -28.44801933,
      -28.79995014, -29.16493193, -29.54397433, -29.93397511, -30.34205234,
      -30.76217437, -31.1958175, -31.64294374, -32.09989842, -32.30752399},
      std::vector<double>{-1.86732812, -1.950861, -2.14713027, -2.35544627,
      -2.57308518, -2.79843968, -3.03014696, -3.26647799, -3.50740015,
      -3.75232014, -4.00082744, -4.25276945, -4.50781004, -4.76544786,
      -5.02521641, -5.28667855, -5.54930776, -5.81286013, -6.07719102,
      -6.34239433, -6.60877868, -6.87613755, -7.14431255, -7.41350134,
      -7.68386519, -7.95545587, -8.22838145, -8.50271442, -8.77831405,
      -9.05473431, -9.33229538, -9.6107452, -9.89008147, -10.17020077,
      -10.45132069, -10.73376722, -11.01760787, -11.30343143, -11.59192877,
      -11.88327845, -12.17794915, -12.47588558, -12.77768567, -13.08339422,
      -13.39312749, -13.70715614, -14.02510126, -14.3465203, -14.67147958,
      -14.99992752, -15.33222588, -15.66863823, -16.00814827, -16.35059965,
      -16.69641772, -17.04584425, -17.3989276, -17.75565693, -18.11580342,
      -18.47906595, -18.84551681, -19.21512198, -19.5874861, -19.96202809,
      -20.33837228, -20.71559274, -21.09193569, -21.46642734, -21.83804185,
      -22.20456934, -22.56404971, -22.91532612, -23.25795133, -23.59128928,
      -23.91456239, -24.22849677, -24.5339227, -24.83075131, -25.12015303,
      -25.404106, -25.68561286, -25.96741991, -26.24906072, -26.53455566,
      -26.8250943, -27.12245847, -27.42827537, -27.74333462, -28.06717083,
      -28.4023917, -28.7504578, -29.11168737, -29.48722932, -29.87452149,
      -30.27995116, -30.69845534, -31.13151581, -31.57978309, -32.04042436,
      -32.25071264}, std::vector<double>{-1.86467483, -1.94781389,
      -2.14298489, -2.34987897, -2.56571843, -2.78876437, -3.01757804,
      -3.2505962, -3.48774239, -3.7285176, -3.9726315, -4.220047,
      -4.47057964, -4.72390117, -4.97970704, -5.23768429, -5.49738568,
      -5.7585766, -6.02108907, -6.28492635, -6.55023066, -6.81682303,
      -7.08454627, -7.3534811, -7.62370253, -7.89522983, -8.16815011,
      -8.44254585, -8.71830552, -8.99500246, -9.27290579, -9.55171635,
      -9.83134718, -10.11156705, -10.39246763, -10.67427098, -10.95695651,
      -11.2410526, -11.52723733, -11.81572138, -12.10707742, -12.40136846,
      -12.69932012, -13.00111352, -13.30700505, -13.61737491, -13.93192822,
      -14.25029745, -14.5725902, -14.89876436, -15.22918417, -15.56409637,
      -15.90247956, -16.24415845, -16.58953635, -16.93884178, -17.29210356,
      -17.64931222, -18.01023405, -18.37453243, -18.74230817, -19.1135818,
      -19.48799706, -19.86495794, -20.24413197, -20.62473303, -21.00511155,
      -21.38423545, -21.76103716, -22.13334699, -22.49909791, -22.85690923,
      -23.20614233, -23.54590718, -23.87523608, -24.19463998, -24.50476779,
      -24.80544513, -25.09779579, -25.38380065, -25.66645664, -25.94854727,
      -26.22982888, -26.51435133, -26.80341245, -27.09885387, -27.4023642,
      -27.71477253, -28.03576492, -28.36794495, -28.71284313, -29.07088159,
      -29.44331342, -29.82796009, -30.23072506, -30.64724095, -31.07902667,
      -31.52727559, -31.98986156, -32.20183053}, std::vector<double>{
      -1.86467483, -1.94781389, -2.14298489, -2.34987897, -2.56571843,
      -2.78876437, -3.01757804, -3.2505962, -3.48774239, -3.7285176,
      -3.9726315, -4.220047, -4.47057964, -4.72390117, -4.97970704,
      -5.23768429, -5.49738568, -5.7585766, -6.02108907, -6.28492635,
      -6.55023066, -6.81682303, -7.08454627, -7.3534811, -7.62370253,
      -7.89522983, -8.16815011, -8.44254585, -8.71830552, -8.99500246,
      -9.27290579, -9.55171635, -9.83134718, -10.11156705, -10.39246763,
      -10.67427098, -10.95695651, -11.2410526, -11.52723733, -11.81572138,
      -12.10707742, -12.40136846, -12.69932012, -13.00111352, -13.30700505,
      -13.61737491, -13.93192822, -14.25029745, -14.5725902, -14.89876436,
      -15.22918417, -15.56409637, -15.90247956, -16.24415845, -16.58953635,
      -16.93884178, -17.29210356, -17.64931222, -18.01023405, -18.37453243,
      -18.74230817, -19.1135818, -19.48799706, -19.86495794, -20.24413197,
      -20.62473303, -21.00511155, -21.38423545, -21.76103716, -22.13334699,
      -22.49909791, -22.85690923, -23.20614233, -23.54590718, -23.87523608,
      -24.19463998, -24.50476779, -24.80544513, -25.09779579, -25.38380065,
      -25.66645664, -25.94854727, -26.22982888, -26.51435133, -26.80341245,
      -27.09885387, -27.4023642, -27.71477253, -28.03576492, -28.36794495,
      -28.71284313, -29.07088159, -29.44331342, -29.82796009, -30.23072506,
      -30.64724095, -31.07902667, -31.52727559, -31.98986156, -32.20183053},
      std::vector<double>{-1.86732812, -1.950861, -2.14713027, -2.35544627,
      -2.57308518, -2.79843968, -3.03014696, -3.26647799, -3.50740015,
      -3.75232014, -4.00082744, -4.25276945, -4.50781004, -4.76544786,
      -5.02521641, -5.28667855, -5.54930776, -5.81286013, -6.07719102,
      -6.34239433, -6.60877868, -6.87613755, -7.14431255, -7.41350134,
      -7.68386519, -7.95545587, -8.22838145, -8.50271442, -8.77831405,
      -9.05473431, -9.33229538, -9.6107452, -9.89008147, -10.17020077,
      -10.45132069, -10.73376722, -11.01760787, -11.30343143, -11.59192877,
      -11.88327845, -12.17794915, -12.47588558, -12.77768567, -13.08339422,
      -13.39312749, -13.70715614, -14.02510126, -14.3465203, -14.67147958,
      -14.99992752, -15.33222588, -15.66863823, -16.00814827, -16.35059965,
      -16.69641772, -17.04584425, -17.3989276, -17.75565693, -18.11580342,
      -18.47906595, -18.84551681, -19.21512198, -19.5874861, -19.96202809,
      -20.33837228, -20.71559274, -21.09193569, -21.46642734, -21.83804185,
      -22.20456934, -22.56404971, -22.91532612, -23.25795133, -23.59128928,
      -23.91456239, -24.22849677, -24.5339227, -24.83075131, -25.12015303,
      -25.404106, -25.68561286, -25.96741991, -26.24906072, -26.53455566,
      -26.8250943, -27.12245847, -27.42827537, -27.74333462, -28.06717083,
      -28.4023917, -28.7504578, -29.11168737, -29.48722932, -29.87452149,
      -30.27995116, -30.69845534, -31.13151581, -31.57978309, -32.04042436,
      -32.25071264}, std::vector<double>{-1.87293958, -1.95720919,
      -2.15543109, -2.36610006, -2.58649239, -2.81509736, -3.0505465,
      -3.29072772, -3.53562864, -3.78450752, -4.03680748, -4.29228217,
      -4.55048448, -4.81079963, -5.07268148, -5.335681, -5.59933287,
      -5.8635337, -6.12829538, -6.39391597, -6.6609631, -6.92914008,
      -7.19819222, -7.46837828, -7.73986432, -8.0126251, -8.28670217,
      -8.56209959, -8.83862295, -9.11581623, -9.39407079, -9.67322555,
      -9.95339846, -10.23464017, -10.51729532, -10.80177025, -11.0881851,
      -11.37714041, -11.66929021, -11.96473187, -12.26379268, -12.56627589,
      -12.87264055, -13.18280147, -13.49674924, -13.81466497, -14.13611353,
      -14.46060215, -14.78817522, -15.11879315, -15.4528231, -15.79055392,
      -16.13097759, -16.47395724, -16.81993703, -17.16916386, -17.52170076,
      -17.87752241, -18.2363982, -18.59807222, -18.96256765, -19.32976711,
      -19.69921666, -20.07035778, -20.44277437, -20.81538355, -21.18633438,
      -21.55478312, -21.91981325, -22.279214, -22.6312164, -22.97498217,
      -23.31029276, -23.63678591, -23.95387232, -24.26247048, -24.56355188,
      -24.85706128, -25.1441683, -25.42680565, -25.70796239, -25.99034009,
      -26.27321414, -26.56058507, -26.85352413, -27.15374543, -27.46279937,
      -27.78143125, -28.10896595, -28.44801933, -28.79995014, -29.16493193,
      -29.54397433, -29.93397511, -30.34205234, -30.76217437, -31.1958175,
      -31.64294374, -32.09989842, -32.30752399}, std::vector<double>{
      -1.88094832, -1.96608587, -2.16650572, -2.3796615, -2.60277891,
      -2.8344146, -3.0731548, -3.31640704, -3.5642371, -3.81580482,
      -4.07046469, -4.32795388, -4.58779501, -4.8493416, -5.11204522,
      -5.37551554, -5.63940622, -5.90377737, -6.16878585, -6.43489136,
      -6.70286923, -6.97222146, -7.24249237, -7.51395736, -7.7867655,
      -8.06079972, -8.33605103, -8.61249312, -8.88993117, -9.16795501,
      -9.44705979, -9.727196, -10.00859371, -10.29142143, -10.57609699,
      -10.86304571, -11.15237824, -11.4446524, -11.74044939, -12.03976498,
      -12.34279517, -12.64922487, -12.95940645, -13.27316816, -13.59042164,
      -13.91129746, -14.23534031, -14.56203748, -14.8914281, -15.22349615,
      -15.55861394, -15.89709268, -16.23792939, -16.58099983, -16.92675725,
      -17.27544337, -17.62712777, -17.98176166, -18.3391083, -18.69895922,
      -19.06128285, -19.42587485, -19.79222666, -20.15981557, -20.5282073,
      -20.89619625, -21.26188314, -21.62460317, -21.98358848, -22.33666053,
      -22.68226009, -23.0198508, -23.34938497, -23.67069194, -23.98330582,
      -24.28825904, -24.58659134, -24.87823134, -25.16431407, -25.44670768,
      -25.72838288, -26.01200776, -26.29662711, -26.58623777, -26.8818099,
      -27.1849976, -27.49727558, -27.81935069, -28.15033009, -28.49284223,
      -28.84813663, -29.21623732, -29.59801894, -29.98981613, -30.39957134,
      -30.82025809, -31.2534045, -31.69834844, -32.15077468, -32.35548229},
      std::vector<double>{-1.89035838, -1.97633559, -2.17881109, -2.39418459,
      -2.61961702, -2.85373734, -3.09508721, -3.34055584, -3.59036046,
      -3.84362035, -4.09964941, -4.35821842, -4.61886513, -4.88095197,
      -5.14395833, -5.40756801, -5.67155154, -5.93610235, -6.2014755,
      -6.46823395, -6.73731569, -7.00795965, -7.2794618, -7.55211722,
      -7.82608179, -8.10117054, -8.37736217, -8.65464187, -8.93285356,
      -9.21165975, -9.49166044, -9.77290396, -10.05569974, -10.34028601,
      -10.62710416, -10.91655548, -11.20870558, -11.50404641, -11.80307978,
      -12.10570627, -12.41201691, -12.72160998, -13.03476426, -13.35125687,
      -13.67095446, -13.99396183, -14.31982319, -14.6480214, -14.97859597,
      -15.31155648, -15.64727607, -15.98608262, -16.32697379, -16.66983194,
      -17.01511228, -17.36304537, -17.71370279, -18.06700929, -18.42272187,
      -18.7806814, -19.14080419, -19.50280647, -19.86613781, -20.23032497,
      -20.59493708, -20.95868337, -21.31965867, -21.67739583, -22.03128144,
      -22.37917506, -22.71970719, -23.05259162, -23.37788308, -23.69552595,
      -24.00512902, -24.30778687, -24.604566, -24.89535824, -25.18125384,
      -25.46405455, -25.74671618, -26.03188524, -26.31840331, -26.61027422,
      -26.90838169, -27.2143277, -27.52951494, -27.8546179, -28.18853336,
      -28.53390689, -28.89188091, -29.26233681, -29.64603097, -30.03875681,
      -30.44931135, -30.86972618, -31.30163242, -31.74385294, -32.19159871,
      -32.39350428}, std::vector<double>{-1.90037906, -1.98710252,
      -2.19136019, -2.40858812, -2.63588773, -2.87197707, -3.11536417,
      -3.36239856, -3.61350968, -3.86781924, -4.12462973, -4.38377206,
      -4.64481903, -4.90715635, -5.17029619, -5.43398921, -5.69810218,
      -5.96292506, -6.22877142, -6.49626669, -6.76649052, -7.03839278,
      -7.31100545, -7.58466408, -7.85956488, -8.13548154, -8.4124109,
      -8.69037548, -8.96927522, -9.2488491, -9.52978676, -9.8122099,
      -10.09647457, -10.38285073, -10.67177108, -10.96359073, -11.25831626,
      -11.55636968, -11.85818031, -12.16356826, -12.47254513, -12.78464878,
      -13.10010879, -13.41867401, -13.74018651, -14.06473824, -14.39188192,
      -14.72110244, -15.05244015, -15.38592872, -15.72193755, -16.06080621,
      -16.40152945, -16.74399226, -17.08864764, -17.43571219, -17.78525776,
      -18.13718305, -18.49124067, -18.84732291, -19.20529941, -19.56481748,
      -19.92529827, -20.28632842, -20.64749628, -21.00745542, -21.36432289,
      -21.71782831, -22.0675007, -22.41122923, -22.74780397, -23.07713848,
      -23.3993372, -23.71440736, -24.02200494, -24.3232592, -24.61924365,
      -24.90980731, -25.19599499, -25.47954519, -25.76340323, -26.05020276,
      -26.33860201, -26.63261819, -26.93305886, -27.24148032, -27.55921704,
      -27.88691629, -28.22327548, -28.57096167, -28.93101589, -29.30318688,
      -29.68813227, -30.08113893, -30.49186122, -30.91146014, -31.34170751,
      -31.78101283, -32.22426171, -32.42361197}, std::vector<double>{
      -1.91053194, -1.99789466, -2.20365062, -2.42239385, -2.65117815,
      -2.8888279, -3.13382839, -3.38197292, -3.63394954, -3.88891146,
      -4.14616548, -4.40561481, -4.66687373, -4.92935251, -5.19259063,
      -5.45639192, -5.7206971, -5.98586245, -6.25223335, -6.52047381,
      -6.79180029, -7.06486579, -7.33843601, -7.6129109, -7.88855735,
      -8.16512799, -8.4426571, -8.72121669, -9.00076624, -9.28111393,
      -9.56301951, -9.8466545, -10.13239588, -10.42051957, -10.71143115,
      -11.00543049, -11.3024627, -11.60288407, -11.90706205, -12.21475146,
      -12.52590489, -12.84001902, -13.15729068, -13.47745447, -13.80033951,
      -14.12603135, -14.45409474, -14.78401889, -15.11584367, -15.4496244,
      -15.7857231, -16.12448725, -16.46490631, -16.80686545, -17.15081326,
      -17.49695149, -17.84535207, -18.19588957, -18.54831496, -18.90257362,
      -19.25849455, -19.61566645, -19.9734937, -20.33162931, -20.68969131,
      -21.04629875, -21.39960739, -21.74953302, -22.09572857, -22.43610004,
      -22.76956849, -23.09620737, -23.41613428, -23.72938621, -24.03565203,
      -24.33608177, -24.63174683, -24.922453, -25.20920177, -25.49367232,
      -25.77880311, -26.06722101, -26.35741513, -26.65342006, -26.95597455,
      -27.26659444, -27.58654972, -27.91646448, -28.25484821, -28.60439354,
      -28.96604702, -29.33943517, -29.72513594, -30.11796622, -30.52842717,
      -30.94687981, -31.37526202, -31.81165309, -32.25072017, -32.44778674},
      std::vector<double>{-1.92050298, -2.00840107, -2.21539255, -2.43535482,
      -2.66530706, -2.904195, -3.15049019, -3.39941719, -3.65195823,
      -3.90731834, -4.16481655, -4.42443259, -4.68582174, -4.94841469,
      -5.21176896, -5.47572714, -5.74028425, -6.00583983, -6.2727542,
      -6.54171669, -6.81408389, -7.08821248, -7.36260453, -7.63774579,
      -7.91399812, -8.19110658, -8.46915348, -8.74826396, -9.02845353,
      -9.30958847, -9.59248031, -9.87733104, -10.16452033, -10.45431377,
      -10.74708034, -11.04306289, -11.34214791, -11.64463316, -11.95083493,
      -12.26045578, -12.57340477, -12.88915108, -13.20786962, -13.52928921,
      -13.85323268, -14.17978213, -14.50851538, -14.83892637, -15.17105275,
      -15.50496923, -15.84102764, -16.17958069, -16.51961106, -16.86100271,
      -17.20419876, -17.54938632, -17.89663799, -18.24580679, -18.59664488,
      -18.94915192, -19.30312192, -19.65809414, -20.01346541, -20.36895861,
      -20.72422759, -21.07787157, -21.42809385, -21.77498183, -22.11829299,
      -22.45593754, -22.78694386, -23.11151544, -23.42975852, -23.74171888,
      -24.04711125, -24.34709934, -24.64274835, -24.93382227, -25.221282,
      -25.50675094, -25.79316351, -26.08314405, -26.37502322, -26.67285564,
      -26.97731679, -27.28988642, -27.6117734, -27.94358211, -28.28364492,
      -28.63468369, -28.99755777, -29.37178135, -29.7578702, -30.15020624,
      -30.56011949, -30.97723562, -31.4036741, -31.83724944, -32.27248478,
      -32.46752421}, std::vector<double>{-1.93017477, -2.01851835,
      -2.22652506, -2.44746813, -2.6783441, -2.91823196, -3.16559633,
      -3.41508183, -3.66799172, -3.9235959, -4.18122804, -4.44094325,
      -4.70243379, -4.96514444, -5.22864147, -5.49279416, -5.75763669,
      -6.02359593, -6.29103784, -6.56067113, -6.83400023, -7.10908955,
      -7.38418155, -7.65986572, -7.93661742, -8.21418224, -8.49269515,
      -8.77233306, -9.05316091, -9.33509129, -9.61897182, -9.90502011,
      -10.19360598, -10.48497477, -10.77945474, -11.0772335, -11.378144,
      -11.6824331, -11.99037534, -12.30163164, -12.61607902, -12.93316875,
      -13.25306095, -13.57548379, -13.90025754, -14.22746205, -14.5566881,
      -14.88743404, -15.2197336, -15.55367891, -15.88960963, -16.22788181,
      -16.56747045, -16.90825761, -17.25068065, -17.59491278, -17.94102822,
      -18.28886121, -18.63816773, -18.98900245, -19.34112931, -19.69404598,
      -20.04714878, -20.40023157, -20.75298734, -21.10400551, -21.45154086,
      -21.79583703, -22.13673812, -22.4721477, -22.80118276, -23.12415485,
      -23.44114236, -23.75218648, -24.05702445, -24.35683013, -24.65266071,
      -24.94424039, -25.23249205, -25.51898638, -25.80665586, -26.09812548,
      -26.39157577, -26.69108326, -26.99726445, -27.31156672, -27.63514102,
      -27.9685749, -28.31003354, -28.66227139, -29.02606766, -29.40083339,
      -29.78703775, -30.17865991, -30.58783675, -31.00351602, -31.42800712,
      -31.85891061, -32.2906568, -32.48389809}, std::vector<double>{
      -1.93954285, -2.02825771, -2.23710214, -2.45884012, -2.69045546,
      -2.93116949, -3.17944463, -3.42933476, -3.68248473, -3.9382373,
      -4.19594007, -4.45572018, -4.71730156, -4.98013701, -5.24379377,
      -5.50815858, -5.77329386, -6.03964317, -6.30757368, -6.57781177,
      -6.85201912, -7.12797283, -7.40365955, -7.67978685, -7.95695746,
      -8.23492148, -8.51386744, -8.79402004, -9.07548588, -9.35821295,
      -9.64307222, -9.93028573, -10.22020517, -10.51304987, -10.8091064,
      -11.10851061, -11.41104757, -11.71692043, -12.0263699, -12.33902368,
      -12.65473523, -12.97294465, -13.29380204, -13.61703795, -13.94247217,
      -14.27018262, -14.5997724, -14.93074367, -15.2631248, -15.59702371,
      -15.93276649, -16.27071122, -16.60982477, -16.94998704, -17.29162975,
      -17.63491326, -17.97991453, -18.32645172, -18.674287, -19.02353024,
      -19.37391959, -19.72491762, -20.0759254, -20.42680731, -20.77729677,
      -21.12598017, -21.47116492, -21.81323603, -22.15210856, -22.48567064,
      -22.81311328, -23.1348399, -23.4508899, -23.76129105, -24.0658018,
      -24.36560437, -24.66174729, -24.95391693, -25.24300054, -25.53051866,
      -25.81940347, -26.11228303, -26.40719453, -26.70823772, -27.01597371,
      -27.33182067, -27.65687458, -27.99170862, -28.33432998, -28.68752858,
      -29.05201029, -29.42709126, -29.81320783, -30.20396564, -30.61228409,
      -31.02648369, -31.44906698, -31.87745988, -32.30603498, -32.49767781},
      std::vector<double>{-1.94845527, -2.03747273, -2.2469925, -2.46935822,
      -2.70155028, -2.94293964, -3.19199106, -3.44216229, -3.69545584,
      -3.95129312, -4.20903364, -4.46887148, -4.73055586, -4.99354121,
      -5.25738837, -5.52199328, -5.78743726, -6.05417249, -6.32256513,
      -6.5933593, -6.86838314, -7.14513199, -7.42134007, -7.69784405,
      -7.97538398, -8.25371605, -8.53308111, -8.81374666, -9.0958535,
      -9.37937571, -9.66519758, -9.95353759, -10.24472413, -10.53894763,
      -10.83645386, -11.13733115, -11.4413223, -11.74859321, -12.05935731,
      -12.37321566, -12.69000456, -13.00915769, -13.33081829, -13.65472111,
      -13.98068656, -14.30879049, -14.63864754, -14.96976297, -15.30215865,
      -15.63595694, -15.97146942, -16.30905529, -16.64767314, -16.98720073,
      -17.32806453, -17.67041326, -18.01432772, -18.35961256, -18.70603813,
      -19.05376938, -19.40252217, -19.75172938, -20.10080069, -20.44966942,
      -20.79810941, -21.14470864, -21.48782649, -21.82797577, -22.16512911,
      -22.49715228, -22.82329903, -23.14405255, -23.45940562, -23.76936675,
      -24.07371521, -24.37364079, -24.67018318, -24.96299288, -25.25292346,
      -25.54144761, -25.83149852, -26.12570915, -26.42197908, -26.72443234,
      -27.03357756, -27.35080647, -27.67716289, -28.01320777, -28.35679867,
      -28.71076353, -29.07574132, -29.45096069, -29.83683719, -30.22662931,
      -30.6340134, -31.04672739, -31.46746656, -31.89351282, -32.31920489,
      -32.50942185}, std::vector<double>{-1.95695625, -2.04622042,
      -2.25628573, -2.47914922, -2.71179535, -2.95374992, -3.20348308,
      -3.45385129, -3.70722702, -3.96311309, -4.22087758, -4.48077593,
      -4.74257656, -5.00573013, -5.2697855, -5.5346419, -5.80039311,
      -6.06749476, -6.33631205, -6.60760849, -6.8833877, -7.16086834,
      -7.43753467, -7.71436103, -7.99223202, -8.27090956, -8.55068429,
      -8.83186107, -9.11460792, -9.39891702, -9.68567817, -9.97510051,
      -10.26748595, -10.56299487, -10.86183409, -11.16404874, -11.46934455,
      -11.77785576, -12.08977383, -12.40467842, -12.72239336, -13.04234933,
      -13.36468482, -13.68913978, -14.01553582, -14.34394635, -14.67399671,
      -15.00519461, -15.33755449, -15.67121209, -16.00646381, -16.34366939,
      -16.68177922, -17.02066908, -17.36076075, -17.70219252, -18.04505015,
      -18.38912711, -18.73420364, -19.08049924, -19.42771044, -19.77524489,
      -20.12252361, -20.4695466, -20.81612731, -21.16085834, -21.50214954,
      -21.84062927, -22.1763165, -22.50704931, -22.83213538, -23.15212854,
      -23.46696969, -23.7766441, -24.08095194, -24.38109032, -24.67809016,
      -24.97156778, -25.26234491, -25.55184833, -25.8430133, -26.13847916,
      -26.43601286, -26.73976343, -27.05018961, -27.36865913, -27.6961662,
      -28.0332615, -28.37766064, -28.7322318, -29.09755296, -29.47277201,
      -29.8582941, -30.24705437, -30.65346006, -31.06470606, -31.48367741,
      -31.90753597, -32.33060277, -32.51954267}, std::vector<double>{
      -1.96499252, -2.05445424, -2.26495215, -2.48820249, -2.72120067,
      -2.96363099, -3.21397128, -3.46447441, -3.71789182, -3.97380897,
      -4.23159842, -4.49157103, -4.75350837, -5.01685243, -5.28113546,
      -5.54625529, -5.81231308, -6.07976434, -6.34897438, -6.62072838,
      -6.89721365, -7.17537695, -7.45245451, -7.7295647, -8.0077417,
      -8.28675188, -8.56693239, -8.84862018, -9.13200433, -9.41708854,
      -9.7047621, -9.99522077, -10.28873833, -10.5854451, -10.88551128,
      -11.188943, -11.49541366, -11.80503061, -12.11796766, -12.43378719,
      -12.75230411, -13.07294856, -13.39585564, -13.72077109, -14.04751788,
      -14.37616658, -14.70635243, -15.03758498, -15.36987051, -15.70335729,
      -16.03832615, -16.37513699, -16.71273218, -17.05098584, -17.39031565,
      -17.73085075, -18.07268283, -18.41559631, -18.75938272, -19.10431533,
      -19.4500738, -19.79604417, -20.14166068, -20.48698741, -20.83187603,
      -21.17492578, -21.51459496, -21.85161664, -22.18604678, -22.51569168,
      -22.83990603, -23.15930729, -23.47378092, -23.78328605, -24.0876442,
      -24.38805971, -24.68555497, -24.97971363, -25.27132723, -25.56177831,
      -25.85400512, -26.15065461, -26.4493654, -26.75431219, -27.06590602,
      -27.38549281, -27.71401957, -28.05202843, -28.39710013, -28.752145,
      -29.11768555, -29.49279487, -29.87787682, -30.2655646, -30.67097026,
      -31.08078075, -31.49806626, -31.91988742, -32.34055847, -32.52834982},
      std::vector<double>{-1.97276985, -2.06239285, -2.27324221, -2.49680217,
      -2.73008337, -2.97293083, -3.22383104, -3.47442787, -3.72785996,
      -3.98379502, -4.24160601, -4.50165454, -4.76373087, -5.02726514,
      -5.29177041, -5.55714057, -5.82348116, -6.0912459, -6.36080221,
      -6.63295968, -6.91009685, -7.18889227, -7.46633503, -7.74369245,
      -8.02215182, -8.30148161, -8.58206192, -8.86425662, -9.14827027,
      -9.43411252, -9.72266747, -10.01411459, -10.30869882, -10.60652099,
      -10.9077172, -11.21225853, -11.51979014, -11.83039656, -12.14423751,
      -12.46086126, -12.78007657, -13.10131472, -13.42470841, -13.75000932,
      -14.07704185, -14.40587328, -14.73614799, -15.06737688, -15.39955751,
      -15.73284996, -16.06751929, -16.40392533, -16.74100273, -17.07862431,
      -17.41720435, -17.75686395, -18.09770172, -18.43949489, -18.78204741,
      -19.12568532, -19.47007346, -19.81457924, -20.15865138, -20.50241512,
      -20.84575875, -21.18728946, -21.52551175, -21.8612539, -22.19460098,
      -22.52332446, -22.84682062, -23.16576504, -23.47998524, -23.78941225,
      -24.09388936, -24.39462821, -24.69264295, -24.98748594, -25.27991992,
      -25.57128479, -25.86452252, -26.16228866, -26.46209742, -26.76814963,
      -27.08081061, -27.40140641, -27.73083916, -28.06964398, -28.41527326,
      -28.77068112, -29.13633969, -29.51125262, -29.89583036, -30.28242352,
      -30.68682321, -31.09523974, -31.51092274, -31.93084655, -32.3493258,
      -32.53607988}, std::vector<double>{-1.98015639, -2.06990581,
      -2.28102841, -2.5048243, -2.73832406, -2.98153484, -3.23295258,
      -3.4836111, -3.73704168, -3.9929935, -4.25083558, -4.51097506,
      -4.77320619, -5.03694404, -5.3016799, -5.56730132, -5.83391547,
      -6.10197286, -6.37184525, -6.64436918, -6.92212103, -7.20151475,
      -7.47929293, -7.75687533, -8.03560464, -8.31524896, -8.59622776,
      -8.87892723, -9.16356273, -9.45014546, -9.73955079, -10.03194011,
      -10.32752948, -10.62639137, -10.92863038, -11.23418615, -11.54267921,
      -11.85417477, -12.16882135, -12.48615571, -12.80598245, -13.12773531,
      -13.45154511, -13.77716961, -14.10443447, -14.43340331, -14.76372896,
      -15.09492324, -15.42697458, -15.76005429, -16.09441157, -16.43040613,
      -16.7669652, -17.10396077, -17.44180432, -17.78061009, -18.12048441,
      -18.46119902, -18.80257118, -19.14497854, -19.48807276, -19.83120512,
      -20.17383955, -20.51615953, -20.85808813, -21.19824132, -21.53516751,
      -21.86978185, -22.202192, -22.53013232, -22.85303624, -23.17163324,
      -23.48569116, -23.79511144, -24.09975962, -24.40085482, -24.69940318,
      -24.99492706, -25.28816168, -25.58040571, -25.87460545, -26.17342592,
      -26.47426044, -26.78133635, -27.09497504, -27.41648448, -27.74672402,
      -28.0862232, -28.43231211, -28.78799004, -29.15368342, -29.52833128,
      -29.91235745, -30.2978475, -30.70124633, -31.10831576, -31.52247839,
      -31.94063427, -32.35710298, -32.54291653}},
      "assigning variable AtmosphericFluxPolyCoeffs");
    std::vector<local_scalar_t__> cos_theta_grid;
    cos_theta_grid = std::vector<local_scalar_t__>(30, DUMMY_VAR__);
    
    current_statement__ = 105;
    assign(cos_theta_grid, nil_index_list(), std::vector<double>{-1.,
      -0.93103448, -0.86206897, -0.79310345, -0.72413793, -0.65517241,
      -0.5862069, -0.51724138, -0.44827586, -0.37931034, -0.31034483,
      -0.24137931, -0.17241379, -0.10344828, -0.03448276, 0.03448276,
      0.10344828, 0.17241379, 0.24137931, 0.31034483, 0.37931034, 0.44827586,
      0.51724138, 0.5862069, 0.65517241, 0.72413793, 0.79310345, 0.86206897,
      0.93103448, 1.}, "assigning variable cos_theta_grid");
    std::vector<local_scalar_t__> log_energy_grid;
    log_energy_grid = std::vector<local_scalar_t__>(100, DUMMY_VAR__);
    
    current_statement__ = 106;
    assign(log_energy_grid, nil_index_list(), std::vector<double>{0.,
      0.09090909, 0.18181818, 0.27272727, 0.36363636, 0.45454545, 0.54545455,
      0.63636364, 0.72727273, 0.81818182, 0.90909091, 1., 1.09090909,
      1.18181818, 1.27272727, 1.36363636, 1.45454545, 1.54545455, 1.63636364,
      1.72727273, 1.81818182, 1.90909091, 2., 2.09090909, 2.18181818,
      2.27272727, 2.36363636, 2.45454545, 2.54545455, 2.63636364, 2.72727273,
      2.81818182, 2.90909091, 3., 3.09090909, 3.18181818, 3.27272727,
      3.36363636, 3.45454545, 3.54545455, 3.63636364, 3.72727273, 3.81818182,
      3.90909091, 4., 4.09090909, 4.18181818, 4.27272727, 4.36363636,
      4.45454545, 4.54545455, 4.63636364, 4.72727273, 4.81818182, 4.90909091,
      5., 5.09090909, 5.18181818, 5.27272727, 5.36363636, 5.45454545,
      5.54545455, 5.63636364, 5.72727273, 5.81818182, 5.90909091, 6.,
      6.09090909, 6.18181818, 6.27272727, 6.36363636, 6.45454545, 6.54545455,
      6.63636364, 6.72727273, 6.81818182, 6.90909091, 7., 7.09090909,
      7.18181818, 7.27272727, 7.36363636, 7.45454545, 7.54545455, 7.63636364,
      7.72727273, 7.81818182, 7.90909091, 8., 8.09090909, 8.18181818,
      8.27272727, 8.36363636, 8.45454545, 8.54545455, 8.63636364, 8.72727273,
      8.81818182, 8.90909091, 9.}, "assigning variable log_energy_grid");
    Eigen::Matrix<local_scalar_t__, -1, 1> vector_interp_energies;
    vector_interp_energies = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(vector_interp_energies, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> vector_coz_grid_points;
    vector_coz_grid_points = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(vector_coz_grid_points, DUMMY_VAR__);
    
    current_statement__ = 109;
    assign(vector_interp_energies, cons_list(index_uni(1), nil_index_list()),
      interpolate(to_vector(log_energy_grid),
        to_vector(
          AtmosphericFluxPolyCoeffs[(binary_search(
                                       stan::math::abs(
                                         stan::math::cos(
                                           (stan::math::pi() -
                                             stan::math::acos(
                                               true_dir[(3 - 1)])))),
                                       cos_theta_grid, pstream__) - 1)]),
        stan::math::log10(
          truncate_value(true_energy, 1.0, 1000000000.0, pstream__)), pstream__),
      "assigning variable vector_interp_energies");
    current_statement__ = 110;
    assign(vector_interp_energies, cons_list(index_uni(2), nil_index_list()),
      interpolate(to_vector(log_energy_grid),
        to_vector(
          AtmosphericFluxPolyCoeffs[((binary_search(
                                        stan::math::abs(
                                          stan::math::cos(
                                            (stan::math::pi() -
                                              stan::math::acos(
                                                true_dir[(3 - 1)])))),
                                        cos_theta_grid, pstream__) + 1) - 1)]),
        stan::math::log10(
          truncate_value(true_energy, 1.0, 1000000000.0, pstream__)), pstream__),
      "assigning variable vector_interp_energies");
    current_statement__ = 111;
    assign(vector_coz_grid_points, cons_list(index_uni(1), nil_index_list()),
      cos_theta_grid[(binary_search(
                        stan::math::abs(
                          stan::math::cos(
                            (stan::math::pi() -
                              stan::math::acos(true_dir[(3 - 1)])))),
                        cos_theta_grid, pstream__) - 1)],
      "assigning variable vector_coz_grid_points");
    current_statement__ = 112;
    assign(vector_coz_grid_points, cons_list(index_uni(2), nil_index_list()),
      cos_theta_grid[((binary_search(
                         stan::math::abs(
                           stan::math::cos(
                             (stan::math::pi() -
                               stan::math::acos(true_dir[(3 - 1)])))),
                         cos_theta_grid, pstream__) + 1) - 1)],
      "assigning variable vector_coz_grid_points");
    current_statement__ = 113;
    return (pow(10,
              interpolate(vector_coz_grid_points, vector_interp_energies,
                stan::math::abs(
                  stan::math::cos(
                    (stan::math::pi() - stan::math::acos(true_dir[(3 - 1)])))), pstream__))
             * 10000.0);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct AtmopshericNumuFlux_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
stan::value_type_t<T1__>>
operator()(const T0__& true_energy, const T1__& true_dir,
           std::ostream* pstream__)  const 
{
return AtmopshericNumuFlux(true_energy, true_dir, pstream__);
}
};

class atmo_gen_model final : public model_base_crtp<atmo_gen_model> {

 private:
  double Esrc_min;
  double Esrc_max;
  double cosz_min;
  double cosz_max;
 
 public:
  ~atmo_gen_model() { }
  
  inline std::string model_name() const final { return "atmo_gen_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.0", "stancflags = --include_paths=/Users/fran/projects/hierarchical_nu/software/stan_files"};
  }
  
  
  atmo_gen_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "atmo_gen_model_namespace::atmo_gen_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization","Esrc_min","double",
          context__.to_vec());
      Esrc_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      Esrc_min = context__.vals_r("Esrc_min")[(1 - 1)];
      current_statement__ = 14;
      context__.validate_dims("data initialization","Esrc_max","double",
          context__.to_vec());
      Esrc_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      Esrc_max = context__.vals_r("Esrc_max")[(1 - 1)];
      current_statement__ = 15;
      context__.validate_dims("data initialization","cosz_min","double",
          context__.to_vec());
      cosz_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      cosz_min = context__.vals_r("cosz_min")[(1 - 1)];
      current_statement__ = 16;
      context__.validate_dims("data initialization","cosz_max","double",
          context__.to_vec());
      cosz_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      cosz_max = context__.vals_r("cosz_max")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "atmo_gen_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ energy;
      energy = DUMMY_VAR__;
      
      current_statement__ = 1;
      energy = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        energy = stan::math::lub_constrain(energy, Esrc_min, Esrc_max, lp__);
      } else {
        current_statement__ = 1;
        energy = stan::math::lub_constrain(energy, Esrc_min, Esrc_max);
      }
      local_scalar_t__ coszen;
      coszen = DUMMY_VAR__;
      
      current_statement__ = 2;
      coszen = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        coszen = stan::math::lub_constrain(coszen, cosz_min, cosz_max, lp__);
      } else {
        current_statement__ = 2;
        coszen = stan::math::lub_constrain(coszen, cosz_min, cosz_max);
      }
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      current_statement__ = 3;
      phi = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        phi = stan::math::lub_constrain(phi, 0, 6.283185307179586, lp__);
      } else {
        current_statement__ = 3;
        phi = stan::math::lub_constrain(phi, 0, 6.283185307179586);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> omega;
      omega = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(omega, DUMMY_VAR__);
      
      local_scalar_t__ zen;
      zen = DUMMY_VAR__;
      
      local_scalar_t__ theta;
      theta = DUMMY_VAR__;
      
      current_statement__ = 7;
      zen = stan::math::acos(coszen);
      current_statement__ = 8;
      theta = (stan::math::pi() - zen);
      current_statement__ = 9;
      assign(omega, cons_list(index_uni(1), nil_index_list()),
        (stan::math::sin(theta) * stan::math::cos(phi)),
        "assigning variable omega");
      current_statement__ = 10;
      assign(omega, cons_list(index_uni(2), nil_index_list()),
        (stan::math::sin(theta) * stan::math::sin(phi)),
        "assigning variable omega");
      current_statement__ = 11;
      assign(omega, cons_list(index_uni(3), nil_index_list()),
        stan::math::cos(theta), "assigning variable omega");
      current_statement__ = 4;
      current_statement__ = 4;
      check_unit_vector(function__, "omega", omega);
      {
        current_statement__ = 12;
        lp_accum__.add(
          stan::math::log(AtmopshericNumuFlux(energy, omega, pstream__)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "atmo_gen_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double energy;
      energy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      energy = in__.scalar();
      current_statement__ = 1;
      energy = stan::math::lub_constrain(energy, Esrc_min, Esrc_max);
      double coszen;
      coszen = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      coszen = in__.scalar();
      current_statement__ = 2;
      coszen = stan::math::lub_constrain(coszen, cosz_min, cosz_max);
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      phi = in__.scalar();
      current_statement__ = 3;
      phi = stan::math::lub_constrain(phi, 0, 6.283185307179586);
      Eigen::Matrix<double, -1, 1> omega;
      omega = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(omega, std::numeric_limits<double>::quiet_NaN());
      
      double zen;
      zen = std::numeric_limits<double>::quiet_NaN();
      
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(energy);
      vars__.emplace_back(coszen);
      vars__.emplace_back(phi);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      zen = stan::math::acos(coszen);
      current_statement__ = 8;
      theta = (stan::math::pi() - zen);
      current_statement__ = 9;
      assign(omega, cons_list(index_uni(1), nil_index_list()),
        (stan::math::sin(theta) * stan::math::cos(phi)),
        "assigning variable omega");
      current_statement__ = 10;
      assign(omega, cons_list(index_uni(2), nil_index_list()),
        (stan::math::sin(theta) * stan::math::sin(phi)),
        "assigning variable omega");
      current_statement__ = 11;
      assign(omega, cons_list(index_uni(3), nil_index_list()),
        stan::math::cos(theta), "assigning variable omega");
      current_statement__ = 4;
      current_statement__ = 4;
      check_unit_vector(function__, "omega", omega);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          vars__.emplace_back(omega[(sym1__ - 1)]);}
        vars__.emplace_back(zen);
        vars__.emplace_back(theta);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double energy;
      energy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      energy = context__.vals_r("energy")[(1 - 1)];
      double energy_free__;
      energy_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      energy_free__ = stan::math::lub_free(energy, Esrc_min, Esrc_max);
      double coszen;
      coszen = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      coszen = context__.vals_r("coszen")[(1 - 1)];
      double coszen_free__;
      coszen_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      coszen_free__ = stan::math::lub_free(coszen, cosz_min, cosz_max);
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      phi = context__.vals_r("phi")[(1 - 1)];
      double phi_free__;
      phi_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      phi_free__ = stan::math::lub_free(phi, 0, 6.283185307179586);
      vars__.emplace_back(energy_free__);
      vars__.emplace_back(coszen_free__);
      vars__.emplace_back(phi_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("energy");
    names__.emplace_back("coszen");
    names__.emplace_back("phi");
    names__.emplace_back("omega");
    names__.emplace_back("zen");
    names__.emplace_back("theta");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "energy");
    param_names__.emplace_back(std::string() + "coszen");
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "zen");
      param_names__.emplace_back(std::string() + "theta");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "energy");
    param_names__.emplace_back(std::string() + "coszen");
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "zen");
      param_names__.emplace_back(std::string() + "theta");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"energy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"coszen\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"zen\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"energy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"coszen\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"zen\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = atmo_gen_model_namespace::atmo_gen_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return atmo_gen_model_namespace::profiles__;
}

#endif


