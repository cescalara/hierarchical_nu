
// Code generated by stanc v2.24.1
#include <stan/model/model_header.hpp>
namespace atmo_gen_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 647, column 0 to column 44)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 648, column 0 to column 44)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 649, column 0 to column 43)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 653, column 0 to column 21)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 654, column 0 to column 9)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 655, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 656, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 657, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 658, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 659, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 660, column 0 to column 22)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 664, column 0 to column 50)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 640, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 641, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 642, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 643, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 13, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 14, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 18, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 16, column 19, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 16, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 22, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 11, column 45, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 31, column 9, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 31, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 32, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 35, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 34, column 17, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 34, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 38, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 29, column 39, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 46, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 47, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 49, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 48, column 15, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 48, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 51, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 45, column 39, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 59, column 9, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 58, column 25, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 58, column 10, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 56, column 9, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 55, column 20, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 55, column 5, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 61, column 5, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 54, column 55, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 68, column 18, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 68, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 69, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 72, column 8, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 71, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 70, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 74, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 66, column 0, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 79, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 80, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 81, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 89, column 12, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 95, column 16, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 93, column 16, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 92, column 17, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 91, column 16, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 90, column 12, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 88, column 8, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 87, column 8, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 86, column 8, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 85, column 8, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 84, column 9, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 83, column 8, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 82, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 98, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/utils.stan', line 78, column 0, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 14, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 15, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 16, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 17, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 18, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 20, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 21, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 22, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 23, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 38, column 6, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 23, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 9, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 35, column 6, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 17, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 28, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 35, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 33, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 45, column 7, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 43, column 4, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 30, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 49, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 50, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 51, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 52, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 54, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 56, column 2, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/interpolation.stan', line 12, column 59, included from\n'/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 7, column 0 to line 606, column 69)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 607, column 0 to line 611, column 74)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 612, column 0 to line 628, column 46)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 629, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 630, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 631, column 0 to column 228)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 632, column 0 to column 232)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 633, column 0 to column 110)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 634, column 0 to column 114)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 635, column 0 to column 118)",
                                                      " (in '/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files/atmo_gen.stan', line 6, column 0 to line 636, column 1)"};


template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
trapz(const Eigen::Matrix<T0__, -1, 1>& x_values,
      const Eigen::Matrix<T1__, -1, 1>& y_values, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 17;
    N = num_elements(x_values);
    local_scalar_t__ I;
    I = DUMMY_VAR__;
    
    current_statement__ = 18;
    I = 0;
    current_statement__ = 21;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 19;
      I = (I +
            ((0.5 * (x_values[((i + 1) - 1)] - x_values[(i - 1)])) *
              (y_values[(i - 1)] + y_values[((i + 1) - 1)])));}
    current_statement__ = 22;
    return I;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct trapz_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const Eigen::Matrix<T0__, -1, 1>& x_values,
           const Eigen::Matrix<T1__, -1, 1>& y_values,
           std::ostream* pstream__)  const 
{
return trapz(x_values, y_values, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
linspace(const T0__& A, const T1__& B, const int& N, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 24;
    validate_non_negative_index("output", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> output;
    output = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(output, DUMMY_VAR__);
    
    local_scalar_t__ dx;
    dx = DUMMY_VAR__;
    
    current_statement__ = 26;
    dx = ((B - A) / (N - 1));
    current_statement__ = 29;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 27;
      assign(output, cons_list(index_uni(i), nil_index_list()),
        (A + ((i - 1) * dx)), "assigning variable output");}
    current_statement__ = 30;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct linspace_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& A, const T1__& B, const int& N,
           std::ostream* pstream__)  const 
{
return linspace(A, B, N, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
eval_poly1d(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& coeffs,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 32;
    N = num_elements(coeffs);
    local_scalar_t__ res;
    res = DUMMY_VAR__;
    
    current_statement__ = 33;
    res = 0;
    current_statement__ = 36;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 34;
      res = (res + (coeffs[(i - 1)] * pow(x, (N - i))));}
    current_statement__ = 37;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eval_poly1d_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& coeffs,
           std::ostream* pstream__)  const 
{
return eval_poly1d(x, coeffs, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
truncate_value(const T0__& x, const T1__& min_val, const T2__& max_val,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 44;
    if (logical_lt(x, min_val)) {
      current_statement__ = 42;
      return min_val;
    } else {
      current_statement__ = 41;
      if (logical_gt(x, max_val)) {
        current_statement__ = 39;
        return max_val;
      } 
    }
    current_statement__ = 45;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct truncate_value_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& x, const T1__& min_val, const T2__& max_val,
           std::ostream* pstream__)  const 
{
return truncate_value(x, min_val, max_val, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
generate_bin_edges(const T0__& lower_edge, const T1__& upper_edge,
                   const int& nbins, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 47;
    validate_non_negative_index("binedges", "nbins + 1", (nbins + 1));
    std::vector<local_scalar_t__> binedges;
    binedges = std::vector<local_scalar_t__>((nbins + 1), DUMMY_VAR__);
    
    local_scalar_t__ binwidth;
    binwidth = DUMMY_VAR__;
    
    current_statement__ = 49;
    binwidth = ((upper_edge - lower_edge) / nbins);
    current_statement__ = 52;
    for (int i = 1; i <= (nbins + 1); ++i) {
      current_statement__ = 50;
      assign(binedges, cons_list(index_uni(i), nil_index_list()),
        (lower_edge + ((i - 1) * binwidth)), "assigning variable binedges");}
    current_statement__ = 53;
    return binedges;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct generate_bin_edges_functor__ {
template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
operator()(const T0__& lower_edge, const T1__& upper_edge, const int& nbins,
           std::ostream* pstream__)  const 
{
return generate_bin_edges(lower_edge, upper_edge, nbins, pstream__);
}
};

template <typename T0__, typename T1__>
int
binary_search(const T0__& value, const std::vector<T1__>& binedges,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int L;
    L = std::numeric_limits<int>::min();
    
    current_statement__ = 55;
    L = 1;
    int R;
    R = std::numeric_limits<int>::min();
    
    current_statement__ = 56;
    R = size(binedges);
    int m;
    m = std::numeric_limits<int>::min();
    
    current_statement__ = 70;
    if (logical_lt(value, binedges[(1 - 1)])) {
      current_statement__ = 69;
      return 0;
    } else {
      current_statement__ = 68;
      if (logical_gt(value, binedges[(R - 1)])) {
        current_statement__ = 67;
        return (R + 1);
      } else {
        current_statement__ = 65;
        while (logical_lt(L, (R - 1))) {
          current_statement__ = 58;
          m = ((L + R) / 2);
          current_statement__ = 63;
          if (logical_lt(binedges[(m - 1)], value)) {
            current_statement__ = 62;
            L = m;
          } else {
            current_statement__ = 61;
            if (logical_gt(binedges[(m - 1)], value)) {
              current_statement__ = 60;
              R = m;
            } else {
              current_statement__ = 59;
              return m;
            }
          }
        }
      }
    }
    current_statement__ = 71;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct binary_search_functor__ {
template <typename T0__, typename T1__>
int
operator()(const T0__& value, const std::vector<T1__>& binedges,
           std::ostream* pstream__)  const 
{
return binary_search(value, binedges, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
interpolate(const Eigen::Matrix<T0__, -1, 1>& x_values,
            const Eigen::Matrix<T1__, -1, 1>& y_values, const T2__& x,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x_left;
    x_left = DUMMY_VAR__;
    
    local_scalar_t__ y_left;
    y_left = DUMMY_VAR__;
    
    local_scalar_t__ x_right;
    x_right = DUMMY_VAR__;
    
    local_scalar_t__ y_right;
    y_right = DUMMY_VAR__;
    
    local_scalar_t__ dydx;
    dydx = DUMMY_VAR__;
    
    int Nx;
    Nx = std::numeric_limits<int>::min();
    
    current_statement__ = 78;
    Nx = num_elements(x_values);
    local_scalar_t__ xmin;
    xmin = DUMMY_VAR__;
    
    current_statement__ = 79;
    xmin = x_values[(1 - 1)];
    local_scalar_t__ xmax;
    xmax = DUMMY_VAR__;
    
    current_statement__ = 80;
    xmax = x_values[(Nx - 1)];
    int i;
    i = std::numeric_limits<int>::min();
    
    current_statement__ = 81;
    i = 1;
    current_statement__ = 89;
    if ((primitive_value(logical_gt(x, xmax)) || primitive_value(
        logical_lt(x, xmin)))) {
      current_statement__ = 87;
      if (logical_gt(x, xmax)) {
        current_statement__ = 85;
        return y_values[(Nx - 1)];
      } else {
        current_statement__ = 84;
        if (logical_lt(x, xmin)) {
          current_statement__ = 82;
          return y_values[(1 - 1)];
        } 
      }
    } 
    current_statement__ = 96;
    if (logical_gte(x, x_values[((Nx - 1) - 1)])) {
      current_statement__ = 94;
      i = (Nx - 1);
    } else {
      current_statement__ = 92;
      while (logical_gt(x, x_values[((i + 1) - 1)])) {
        current_statement__ = 90;
        i = (i + 1);
      }
    }
    current_statement__ = 97;
    x_left = x_values[(i - 1)];
    current_statement__ = 98;
    y_left = y_values[(i - 1)];
    current_statement__ = 99;
    x_right = x_values[((i + 1) - 1)];
    current_statement__ = 100;
    y_right = y_values[((i + 1) - 1)];
    current_statement__ = 101;
    dydx = ((y_right - y_left) / (x_right - x_left));
    current_statement__ = 102;
    return (y_left + (dydx * (x - x_left)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct interpolate_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const Eigen::Matrix<T0__, -1, 1>& x_values,
           const Eigen::Matrix<T1__, -1, 1>& y_values, const T2__& x,
           std::ostream* pstream__)  const 
{
return interpolate(x_values, y_values, x, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
AtmopshericNumuFlux(const T0__& true_energy,
                    const Eigen::Matrix<T1__, -1, 1>& true_dir,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> AtmosphericFluxPolyCoeffs;
    AtmosphericFluxPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(30, std::vector<local_scalar_t__>(100, DUMMY_VAR__));
    
    current_statement__ = 104;
    assign(AtmosphericFluxPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(-1.98015639)
      .add(-2.06990581).add(-2.28102841).add(-2.5048243).add(-2.73832406)
      .add(-2.98153484).add(-3.23295258).add(-3.4836111).add(-3.73704168)
      .add(-3.9929935).add(-4.25083558).add(-4.51097506).add(-4.77320619)
      .add(-5.03694404).add(-5.3016799).add(-5.56730132).add(-5.83391547)
      .add(-6.10197286).add(-6.37184525).add(-6.64436918).add(-6.92212103)
      .add(-7.20151475).add(-7.47929293).add(-7.75687533).add(-8.03560464)
      .add(-8.31524896).add(-8.59622776).add(-8.87892723).add(-9.16356273)
      .add(-9.45014546).add(-9.73955079).add(-10.03194011).add(-10.32752948)
      .add(-10.62639137).add(-10.92863038).add(-11.23418615)
      .add(-11.54267921).add(-11.85417477).add(-12.16882135)
      .add(-12.48615571).add(-12.80598245).add(-13.12773531)
      .add(-13.45154511).add(-13.77716961).add(-14.10443447)
      .add(-14.43340331).add(-14.76372896).add(-15.09492324)
      .add(-15.42697458).add(-15.76005429).add(-16.09441157)
      .add(-16.43040613).add(-16.7669652).add(-17.10396077).add(-17.44180432)
      .add(-17.78061009).add(-18.12048441).add(-18.46119902)
      .add(-18.80257118).add(-19.14497854).add(-19.48807276)
      .add(-19.83120512).add(-20.17383955).add(-20.51615953)
      .add(-20.85808813).add(-21.19824132).add(-21.53516751)
      .add(-21.86978185).add(-22.202192).add(-22.53013232).add(-22.85303624)
      .add(-23.17163324).add(-23.48569116).add(-23.79511144)
      .add(-24.09975962).add(-24.40085482).add(-24.69940318)
      .add(-24.99492706).add(-25.28816168).add(-25.58040571)
      .add(-25.87460545).add(-26.17342592).add(-26.47426044)
      .add(-26.78133635).add(-27.09497504).add(-27.41648448)
      .add(-27.74672402).add(-28.0862232).add(-28.43231211).add(-28.78799004)
      .add(-29.15368342).add(-29.52833128).add(-29.91235745).add(-30.2978475)
      .add(-30.70124633).add(-31.10831576).add(-31.52247839)
      .add(-31.94063427).add(-32.35710298).add(-32.54291653).array())
      .add(stan::math::array_builder<double>().add(-1.97273715)
      .add(-2.06235936).add(-2.27320675).add(-2.49676477).add(-2.73004429)
      .add(-2.97289037).add(-3.22378955).add(-3.47438636).add(-3.72781913)
      .add(-3.98375561).add(-4.24156869).add(-4.50161981).add(-4.76369906)
      .add(-5.02723645).add(-5.29174488).add(-5.55711812).add(-5.82346161)
      .add(-6.09122897).add(-6.36078763).add(-6.63294714).add(-6.91008602)
      .add(-7.18888292).add(-7.46632699).add(-7.74368553).add(-8.02214581)
      .add(-8.30147634).add(-8.58205724).add(-8.8642524).add(-9.14826642)
      .add(-9.43410896).add(-9.72266415).add(-10.01411147).add(-10.30869586)
      .add(-10.60651819).add(-10.90771454).add(-11.212256).add(-11.51978774)
      .add(-11.83039428).add(-12.14423534).add(-12.46085922)
      .add(-12.78007464).add(-13.10131291).add(-13.4247067).add(-13.75000772)
      .add(-14.07704035).add(-14.40587188).add(-14.73614668)
      .add(-15.06737567).add(-15.39955639).add(-15.73284893)
      .add(-16.06751833).add(-16.40392445).add(-16.74100192)
      .add(-17.07862358).add(-17.41720368).add(-17.75686334)
      .add(-18.09770117).add(-18.4394944).add(-18.78204698).add(-19.12568494)
      .add(-19.47007312).add(-19.81457894).add(-20.15865112).add(-20.5024149)
      .add(-20.84575856).add(-21.1872893).add(-21.5255116).add(-21.86125377)
      .add(-22.19460086).add(-22.52332435).add(-22.84682051)
      .add(-23.16576492).add(-23.47998512).add(-23.78941212)
      .add(-24.09388923).add(-24.39462806).add(-24.69264279)
      .add(-24.98748577).add(-25.27991974).add(-25.57128461)
      .add(-25.86452233).add(-26.16228847).add(-26.46209723)
      .add(-26.76814944).add(-27.08081043).add(-27.40140624).add(-27.730839)
      .add(-28.06964383).add(-28.41527312).add(-28.77068099)
      .add(-29.13633958).add(-29.51125252).add(-29.89583027)
      .add(-30.28242345).add(-30.68682315).add(-31.09523969).add(-31.5109227)
      .add(-31.93084653).add(-32.34932578).add(-32.53607986).array())
      .add(stan::math::array_builder<double>().add(-1.96501455)
      .add(-2.0544769).add(-2.26497637).add(-2.48822829).add(-2.7212279)
      .add(-2.96365947).add(-3.21400079).add(-3.46450424).add(-3.71792143)
      .add(-3.97383778).add(-4.23162588).add(-4.49159674).add(-4.75353201)
      .add(-5.01687381).add(-5.2811545).add(-5.54627201).add(-5.81232759)
      .add(-6.07977683).add(-6.34898504).add(-6.62073745).add(-6.89722136)
      .add(-7.17538348).add(-7.45245999).add(-7.7295693).add(-8.00774557)
      .add(-8.28675515).add(-8.56693519).add(-8.8486226).add(-9.13200646)
      .add(-9.41709044).add(-9.70476381).add(-9.99522233).add(-10.28873978)
      .add(-10.58544644).add(-10.88551252).add(-11.18894416)
      .add(-11.49541474).add(-11.80503161).add(-12.11796859)
      .add(-12.43378805).add(-12.75230491).add(-13.07294929)
      .add(-13.39585632).add(-13.72077171).add(-14.04751845).add(-14.3761671)
      .add(-14.7063529).add(-15.0375854).add(-15.3698709).add(-15.70335764)
      .add(-16.03832646).add(-16.37513726).add(-16.71273241)
      .add(-17.05098604).add(-17.39031583).add(-17.7308509).add(-18.07268296)
      .add(-18.41559642).add(-18.75938281).add(-19.10431539)
      .add(-19.45007385).add(-19.7960442).add(-20.14166071).add(-20.48698742)
      .add(-20.83187603).add(-21.17492578).add(-21.51459496)
      .add(-21.85161665).add(-22.18604679).add(-22.51569169)
      .add(-22.83990605).add(-23.15930731).add(-23.47378095)
      .add(-23.78328609).add(-24.08764425).add(-24.38805977)
      .add(-24.68555503).add(-24.9797137).add(-25.2713273).add(-25.56177838)
      .add(-25.85400519).add(-26.15065468).add(-26.44936547)
      .add(-26.75431225).add(-27.06590606).add(-27.38549284)
      .add(-27.71401958).add(-28.05202843).add(-28.39710011)
      .add(-28.75214496).add(-29.11768549).add(-29.49279479)
      .add(-29.87787673).add(-30.26556451).add(-30.67097017)
      .add(-31.08078066).add(-31.49806617).add(-31.91988734).add(-32.3405584)
      .add(-32.52834976).array()).add(stan::math::array_builder<double>()
      .add(-1.95692411).add(-2.04618716).add(-2.25624968).add(-2.47911022)
      .add(-2.71175352).add(-2.95370544).add(-3.20343624).add(-3.45380317)
      .add(-3.70717853).add(-3.96306525).add(-4.22083138).add(-4.48073221)
      .add(-4.74253594).add(-5.00569308).add(-5.26975229).add(-5.5346126)
      .add(-5.80036762).add(-6.06747283).add(-6.33629336).add(-6.60759268)
      .add(-6.88337435).add(-7.16085714).add(-7.43752539).add(-7.71435339)
      .add(-7.99222573).add(-8.27090438).add(-8.55068).add(-8.83185747)
      .add(-9.11460487).add(-9.39891439).add(-9.68567587).add(-9.97509846)
      .add(-10.26748409).add(-10.56299317).add(-10.86183252)
      .add(-11.16404727).add(-11.46934317).add(-11.77785446).add(-12.0897726)
      .add(-12.40467725).add(-12.72239225).add(-13.04234828)
      .add(-13.36468381).add(-13.68913883).add(-14.01553491)
      .add(-14.34394548).add(-14.67399589).add(-15.00519383)
      .add(-15.33755375).add(-15.67121139).add(-16.00646315)
      .add(-16.34366877).add(-16.68177864).add(-17.02066854)
      .add(-17.36076025).add(-17.70219206).add(-18.04504973)
      .add(-18.38912672).add(-18.73420329).add(-19.08049893)
      .add(-19.42771017).add(-19.77524465).add(-20.1225234).add(-20.46954642)
      .add(-20.81612716).add(-21.1608582).add(-21.50214943).add(-21.84062916)
      .add(-22.1763164).add(-22.50704922).add(-22.83213529).add(-23.15212844)
      .add(-23.46696959).add(-23.77664399).add(-24.08095182)
      .add(-24.38109019).add(-24.67809003).add(-24.97156763)
      .add(-25.26234476).add(-25.55184817).add(-25.84301314).add(-26.138479)
      .add(-26.4360127).add(-26.73976328).add(-27.05018946).add(-27.368659)
      .add(-27.69616608).add(-28.03326139).add(-28.37766055)
      .add(-28.73223172).add(-29.0975529).add(-29.47277196).add(-29.85829406)
      .add(-30.24705435).add(-30.65346005).add(-31.06470606)
      .add(-31.48367742).add(-31.90753598).add(-32.33060278)
      .add(-32.51954268).array()).add(stan::math::array_builder<double>()
      .add(-1.94847635).add(-2.03749466).add(-2.24701656).add(-2.46938459)
      .add(-2.70157896).add(-2.94297058).add(-3.19202408).add(-3.44219668)
      .add(-3.69549096).add(-3.9513282).add(-4.2090679).add(-4.46890424)
      .add(-4.73058657).add(-4.99356944).add(-5.25741383).add(-5.52201584)
      .add(-5.78745695).add(-6.05418944).add(-6.32257955).add(-6.59337145)
      .add(-6.86839332).add(-7.14514043).add(-7.42134696).add(-7.69784962)
      .add(-7.97538845).add(-8.2537196).add(-8.53308393).add(-8.81374888)
      .add(-9.09585526).add(-9.37937709).add(-9.66519867).add(-9.95353846)
      .add(-10.24472482).add(-10.53894818).add(-10.83645431)
      .add(-11.13733152).add(-11.4413226).add(-11.74859345).add(-12.0593575)
      .add(-12.37321583).add(-12.6900047).add(-13.0091578).add(-13.33081838)
      .add(-13.65472118).add(-13.98068662).add(-14.30879053)
      .add(-14.63864757).add(-14.96976299).add(-15.30215867)
      .add(-15.63595696).add(-15.97146943).add(-16.3090553).add(-16.64767315)
      .add(-16.98720074).add(-17.32806453).add(-17.67041326)
      .add(-18.01432772).add(-18.35961256).add(-18.70603813)
      .add(-19.05376939).add(-19.40252217).add(-19.75172938).add(-20.1008007)
      .add(-20.44966942).add(-20.79810942).add(-21.14470864).add(-21.4878265)
      .add(-21.82797578).add(-22.16512911).add(-22.49715228)
      .add(-22.82329904).add(-23.14405256).add(-23.45940562)
      .add(-23.76936675).add(-24.0737152).add(-24.37364079).add(-24.67018318)
      .add(-24.96299287).add(-25.25292345).add(-25.5414476).add(-25.83149852)
      .add(-26.12570914).add(-26.42197908).add(-26.72443233)
      .add(-27.03357755).add(-27.35080646).add(-27.67716288)
      .add(-28.01320776).add(-28.35679866).add(-28.71076353)
      .add(-29.07574131).add(-29.45096069).add(-29.83683719)
      .add(-30.22662931).add(-30.6340134).add(-31.0467274).add(-31.46746657)
      .add(-31.89351283).add(-32.3192049).add(-32.50942186).array())
      .add(stan::math::array_builder<double>().add(-1.93952015)
      .add(-2.02823397).add(-2.2370758).add(-2.4588109).add(-2.69042327)
      .add(-2.9311343).add(-3.17940659).add(-3.42929461).add(-3.68244321)
      .add(-3.93819533).add(-4.19589861).add(-4.4556801).add(-4.71726361)
      .add(-4.98010181).add(-5.24376176).add(-5.50813).add(-5.77326876)
      .add(-6.03962144).add(-6.30755511).add(-6.57779606).add(-6.85200592)
      .add(-7.12796186).add(-7.40365057).add(-7.6797796).add(-7.95695166)
      .add(-8.23491687).add(-8.51386381).add(-8.79401719).add(-9.07548365)
      .add(-9.35821121).add(-9.64307086).add(-9.93028466).add(-10.22020433)
      .add(-10.5130492).add(-10.80910586).add(-11.10851018).add(-11.41104722)
      .add(-11.71692014).add(-12.02636966).add(-12.33902348)
      .add(-12.65473506).add(-12.97294451).add(-13.29380191)
      .add(-13.61703784).add(-13.94247208).add(-14.27018253)
      .add(-14.59977232).add(-14.9307436).add(-15.26312474).add(-15.59702365)
      .add(-15.93276644).add(-16.27071117).add(-16.60982472)
      .add(-16.94998699).add(-17.2916297).add(-17.63491322).add(-17.97991449)
      .add(-18.32645169).add(-18.67428696).add(-19.02353021)
      .add(-19.37391956).add(-19.72491759).add(-20.07592538)
      .add(-20.42680728).add(-20.77729674).add(-21.12598015).add(-21.4711649)
      .add(-21.81323602).add(-22.15210855).add(-22.48567062)
      .add(-22.81311327).add(-23.1348399).add(-23.45088989).add(-23.76129105)
      .add(-24.06580179).add(-24.36560437).add(-24.66174728)
      .add(-24.95391693).add(-25.24300053).add(-25.53051865)
      .add(-25.81940347).add(-26.11228302).add(-26.40719452)
      .add(-26.70823772).add(-27.0159737).add(-27.33182066).add(-27.65687457)
      .add(-27.99170862).add(-28.33432997).add(-28.68752857)
      .add(-29.05201028).add(-29.42709125).add(-29.81320782)
      .add(-30.20396563).add(-30.61228408).add(-31.02648368)
      .add(-31.44906697).add(-31.87745987).add(-32.30603497).add(-32.4976778)
      .array()).add(stan::math::array_builder<double>().add(-1.93020667)
      .add(-2.01855192).add(-2.22656293).add(-2.44751091).add(-2.67839215)
      .add(-2.91828551).add(-3.16565534).add(-3.41514535).add(-3.66805868)
      .add(-3.92366488).add(-4.18129743).add(-4.44101151).add(-4.70249948)
      .add(-4.96520631).add(-5.22869852).add(-5.49284574).add(-5.75768251)
      .add(-6.02363599).add(-6.29107239).add(-6.56070058).add(-6.83402513)
      .add(-7.10911034).add(-7.38419865).add(-7.65987958).add(-7.93662855)
      .add(-8.21419107).add(-8.4927021).add(-8.77233849).add(-9.05316512)
      .add(-9.33509453).add(-9.61897431).add(-9.90502201).add(-10.19360743)
      .add(-10.48497587).add(-10.77945558).add(-11.07723414)
      .add(-11.37814448).add(-11.68243346).add(-11.99037561)
      .add(-12.30163184).add(-12.61607917).add(-12.93316885)
      .add(-13.25306102).add(-13.57548384).add(-13.90025757)
      .add(-14.22746206).add(-14.55668809).add(-14.88743403)
      .add(-15.21973358).add(-15.55367888).add(-15.8896096).add(-16.22788178)
      .add(-16.56747041).add(-16.90825758).add(-17.25068061)
      .add(-17.59491275).add(-17.94102819).add(-18.28886118).add(-18.6381677)
      .add(-18.98900242).add(-19.34112928).add(-19.69404596)
      .add(-20.04714876).add(-20.40023155).add(-20.75298733)
      .add(-21.10400549).add(-21.45154085).add(-21.79583702)
      .add(-22.13673811).add(-22.47214769).add(-22.80118275)
      .add(-23.12415484).add(-23.44114235).add(-23.75218647)
      .add(-24.05702444).add(-24.35683012).add(-24.6526607).add(-24.94424038)
      .add(-25.23249204).add(-25.51898637).add(-25.80665585)
      .add(-26.09812547).add(-26.39157576).add(-26.69108325)
      .add(-26.99726444).add(-27.31156671).add(-27.63514101)
      .add(-27.96857488).add(-28.31003352).add(-28.66227137)
      .add(-29.02606765).add(-29.40083337).add(-29.78703773)
      .add(-30.17865989).add(-30.58783673).add(-31.003516).add(-31.42800711)
      .add(-31.85891059).add(-32.29065679).add(-32.48389808).array())
      .add(stan::math::array_builder<double>().add(-1.92050533)
      .add(-2.00840356).add(-2.2153954).add(-2.4353581).add(-2.66531081)
      .add(-2.90419925).add(-3.15049496).add(-3.39942243).add(-3.65196386)
      .add(-3.90732425).add(-4.16482262).add(-4.42443866).add(-4.6858277)
      .add(-4.9484204).add(-5.2117743).add(-5.47573205).add(-5.74028868)
      .add(-6.00584375).add(-6.27275762).add(-6.54171964).add(-6.81408642)
      .add(-7.08821461).add(-7.36260631).add(-7.63774726).add(-7.91399931)
      .add(-8.19110755).add(-8.46915426).add(-8.74826458).add(-9.02845403)
      .add(-9.30958887).add(-9.59248063).add(-9.8773313).add(-10.16452055)
      .add(-10.45431395).add(-10.74708049).add(-11.04306302)
      .add(-11.34214803).add(-11.64463328).add(-11.95083504)
      .add(-12.26045588).add(-12.57340487).add(-12.88915118)
      .add(-13.20786972).add(-13.52928931).add(-13.85323278)
      .add(-14.17978223).add(-14.50851547).add(-14.83892647)
      .add(-15.17105285).add(-15.50496933).add(-15.84102773)
      .add(-16.17958079).add(-16.51961115).add(-16.8610028).add(-17.20419885)
      .add(-17.54938641).add(-17.89663808).add(-18.24580688)
      .add(-18.59664496).add(-18.949152).add(-19.30312199).add(-19.65809421)
      .add(-20.01346548).add(-20.36895867).add(-20.72422765)
      .add(-21.07787163).add(-21.4280939).add(-21.77498188).add(-22.11829303)
      .add(-22.45593758).add(-22.7869439).add(-23.11151547).add(-23.42975855)
      .add(-23.7417189).add(-24.04711127).add(-24.34709935).add(-24.64274836)
      .add(-24.93382229).add(-25.22128201).add(-25.50675096)
      .add(-25.79316352).add(-26.08314406).add(-26.37502324)
      .add(-26.67285567).add(-26.97731681).add(-27.28988644)
      .add(-27.61177343).add(-27.94358215).add(-28.28364495)
      .add(-28.63468373).add(-28.99755781).add(-29.37178139)
      .add(-29.75787024).add(-30.15020629).add(-30.56011954)
      .add(-30.97723567).add(-31.40367414).add(-31.83724948)
      .add(-32.27248482).add(-32.46752425).array())
      .add(stan::math::array_builder<double>().add(-1.91053305)
      .add(-1.99789584).add(-2.20365198).add(-2.42239543).add(-2.65117997)
      .add(-2.88882999).add(-3.13383075).add(-3.38197554).add(-3.63395238)
      .add(-3.88891448).add(-4.1461686).add(-4.40561797).add(-4.66687684)
      .add(-4.92935552).add(-5.19259347).add(-5.45639455).add(-5.72069949)
      .add(-5.98586457).add(-6.25223522).add(-6.52047544).add(-6.79180169)
      .add(-7.06486698).add(-7.33843701).add(-7.61291173).add(-7.88855803)
      .add(-8.16512855).add(-8.44265756).add(-8.72121707).add(-9.00076654)
      .add(-9.28111418).add(-9.56301972).add(-9.84665468).add(-10.13239603)
      .add(-10.42051971).add(-10.71143126).add(-11.0054306).add(-11.3024628)
      .add(-11.60288417).add(-11.90706214).add(-12.21475154)
      .add(-12.52590497).add(-12.8400191).add(-13.15729076).add(-13.47745454)
      .add(-13.80033958).add(-14.12603142).add(-14.4540948).add(-14.78401895)
      .add(-15.11584372).add(-15.44962445).add(-15.78572314)
      .add(-16.12448729).add(-16.46490635).add(-16.8068655).add(-17.1508133)
      .add(-17.49695152).add(-17.8453521).add(-18.1958896).add(-18.54831499)
      .add(-18.90257365).add(-19.25849457).add(-19.61566647)
      .add(-19.97349371).add(-20.33162933).add(-20.68969133)
      .add(-21.04629876).add(-21.3996074).add(-21.74953303).add(-22.09572858)
      .add(-22.43610005).add(-22.7695685).add(-23.09620738).add(-23.41613429)
      .add(-23.72938621).add(-24.03565203).add(-24.33608177)
      .add(-24.63174684).add(-24.92245301).add(-25.20920178)
      .add(-25.49367233).add(-25.77880312).add(-26.06722102)
      .add(-26.35741514).add(-26.65342007).add(-26.95597456)
      .add(-27.26659446).add(-27.58654974).add(-27.9164645).add(-28.25484823)
      .add(-28.60439355).add(-28.96604703).add(-29.33943518)
      .add(-29.72513595).add(-30.11796623).add(-30.52842718)
      .add(-30.94687981).add(-31.37526202).add(-31.81165309)
      .add(-32.25072017).add(-32.44778674).array())
      .add(stan::math::array_builder<double>().add(-1.90038817)
      .add(-1.98711234).add(-2.19137186).add(-2.40860206).add(-2.63590437)
      .add(-2.87199678).add(-3.11538729).add(-3.36242512).add(-3.61353961)
      .add(-3.86785223).add(-4.12466523).add(-4.38380936).add(-4.64485727)
      .add(-4.9071946).add(-5.17033352).add(-5.4340248).add(-5.69813536)
      .add(-5.96295539).add(-6.22879865).add(-6.49629075).add(-6.76651151)
      .add(-7.03841083).add(-7.31102072).add(-7.58467682).add(-7.85957538)
      .add(-8.13549009).add(-8.41241779).add(-8.69038097).add(-8.96927955)
      .add(-9.2488525).add(-9.5297894).add(-9.81221194).add(-10.09647615)
      .add(-10.38285194).add(-10.67177201).add(-10.96359144).add(-11.2583168)
      .add(-11.5563701).add(-11.85818063).add(-12.16356851).add(-12.47254533)
      .add(-12.78464893).add(-13.10010891).add(-13.41867411)
      .add(-13.74018658).add(-14.06473831).add(-14.39188197)
      .add(-14.72110248).add(-15.05244019).add(-15.38592875)
      .add(-15.72193758).add(-16.06080623).add(-16.40152947)
      .add(-16.74399228).add(-17.08864766).add(-17.43571221)
      .add(-17.78525778).add(-18.13718306).add(-18.49124068)
      .add(-18.84732292).add(-19.20529943).add(-19.5648175).add(-19.92529829)
      .add(-20.28632844).add(-20.6474963).add(-21.00745544).add(-21.36432291)
      .add(-21.71782833).add(-22.06750072).add(-22.41122925)
      .add(-22.74780398).add(-23.0771385).add(-23.39933721).add(-23.71440737)
      .add(-24.02200495).add(-24.32325921).add(-24.61924366)
      .add(-24.90980732).add(-25.19599499).add(-25.47954519)
      .add(-25.76340323).add(-26.05020276).add(-26.33860201)
      .add(-26.63261819).add(-26.93305886).add(-27.24148031)
      .add(-27.55921704).add(-27.88691628).add(-28.22327547)
      .add(-28.57096166).add(-28.93101588).add(-29.30318687)
      .add(-29.68813227).add(-30.08113892).add(-30.49186122)
      .add(-30.91146014).add(-31.34170752).add(-31.78101284)
      .add(-32.22426171).add(-32.42361198).array())
      .add(stan::math::array_builder<double>().add(-1.89036356)
      .add(-1.97634121).add(-2.17881787).add(-2.39419284).add(-2.61962702)
      .add(-2.85374943).add(-3.09510167).add(-3.34057282).add(-3.59038004)
      .add(-3.84364245).add(-4.09967379).add(-4.35824467).add(-4.6188927)
      .add(-4.88098021).add(-5.14398652).add(-5.40759547).add(-5.67157767)
      .add(-5.93612669).add(-6.20149772).add(-6.46825387).add(-6.73733331)
      .add(-7.00797499).add(-7.27947494).add(-7.5521283).add(-7.82609103)
      .add(-8.10117814).add(-8.37736835).add(-8.65464684).add(-8.93285752)
      .add(-9.21166288).add(-9.49166289).add(-9.77290587).add(-10.05570123)
      .add(-10.34028716).add(-10.62710505).add(-10.91655617)
      .add(-11.20870612).add(-11.50404683).add(-11.80308012)
      .add(-12.10570654).add(-12.41201714).add(-12.72161016)
      .add(-13.03476442).add(-13.351257).add(-13.67095459).add(-13.99396194)
      .add(-14.31982329).add(-14.64802149).add(-14.97859605)
      .add(-15.31155656).add(-15.64727615).add(-15.9860827).add(-16.32697386)
      .add(-16.66983201).add(-17.01511236).add(-17.36304545)
      .add(-17.71370286).add(-18.06700937).add(-18.42272193)
      .add(-18.78068146).add(-19.14080425).add(-19.50280654)
      .add(-19.86613787).add(-20.23032503).add(-20.59493714)
      .add(-20.95868342).add(-21.31965872).add(-21.67739588)
      .add(-22.03128149).add(-22.3791751).add(-22.71970723).add(-23.05259166)
      .add(-23.37788311).add(-23.69552598).add(-24.00512905)
      .add(-24.30778689).add(-24.60456602).add(-24.89535825)
      .add(-25.18125385).add(-25.46405456).add(-25.74671619)
      .add(-26.03188525).add(-26.31840332).add(-26.61027424)
      .add(-26.90838171).add(-27.21432772).add(-27.52951496)
      .add(-27.85461792).add(-28.18853339).add(-28.53390691)
      .add(-28.89188093).add(-29.26233684).add(-29.646031).add(-30.03875684)
      .add(-30.44931139).add(-30.86972622).add(-31.30163245)
      .add(-31.74385297).add(-32.19159874).add(-32.39350431).array())
      .add(stan::math::array_builder<double>().add(-1.88095044)
      .add(-1.96608819).add(-2.16650857).add(-2.37966505).add(-2.60278332)
      .add(-2.83442007).add(-3.07316154).add(-3.31641521).add(-3.56424684)
      .add(-3.81581621).add(-4.07047772).add(-4.32796845).add(-4.5878109)
      .add(-4.84935848).add(-5.11206271).add(-5.37553318).add(-5.63942357)
      .add(-5.90379404).add(-6.1688015).add(-6.43490576).add(-6.70288226)
      .add(-6.97223303).add(-7.24250247).add(-7.51396604).add(-7.78677285)
      .add(-8.06080587).add(-8.3360561).add(-8.61249725).add(-8.8899345)
      .add(-9.16795767).add(-9.44706188).add(-9.72719764).add(-10.00859498)
      .add(-10.29142242).add(-10.57609775).add(-10.8630463).add(-11.15237869)
      .add(-11.44465275).add(-11.74044965).add(-12.03976519)
      .add(-12.34279533).add(-12.649225).add(-12.95940655).add(-13.27316824)
      .add(-13.59042171).add(-13.91129752).add(-14.23534037)
      .add(-14.56203754).add(-14.89142815).add(-15.2234962).add(-15.55861399)
      .add(-15.89709273).add(-16.23792944).add(-16.58099989)
      .add(-16.92675731).add(-17.27544343).add(-17.62712783)
      .add(-17.98176172).add(-18.33910837).add(-18.69895928)
      .add(-19.06128291).add(-19.42587491).add(-19.79222672)
      .add(-20.15981563).add(-20.52820736).add(-20.89619631)
      .add(-21.26188319).add(-21.62460322).add(-21.98358853)
      .add(-22.33666058).add(-22.68226013).add(-23.01985084).add(-23.349385)
      .add(-23.67069197).add(-23.98330585).add(-24.28825906)
      .add(-24.58659136).add(-24.87823136).add(-25.16431409)
      .add(-25.44670769).add(-25.72838288).add(-26.01200776)
      .add(-26.29662711).add(-26.58623778).add(-26.88180991).add(-27.1849976)
      .add(-27.49727558).add(-27.81935069).add(-28.1503301).add(-28.49284224)
      .add(-28.84813663).add(-29.21623733).add(-29.59801895)
      .add(-29.98981614).add(-30.39957135).add(-30.8202581).add(-31.25340452)
      .add(-31.69834846).add(-32.15077471).add(-32.35548231).array())
      .add(stan::math::array_builder<double>().add(-1.87294026)
      .add(-1.95720994).add(-2.15543203).add(-2.36610124).add(-2.58649389)
      .add(-2.81509926).add(-3.05054891).add(-3.29073074).add(-3.53563237)
      .add(-3.78451207).add(-4.03681292).add(-4.29228853).add(-4.55049175)
      .add(-4.81080773).add(-5.07269028).add(-5.33569028).add(-5.59934242)
      .add(-5.86354326).add(-6.1283047).add(-6.39392486).add(-6.66097138)
      .add(-6.92914764).add(-7.19819898).add(-7.46838421).add(-7.73986942)
      .add(-8.01262942).add(-8.28670576).add(-8.56210254).add(-8.83862532)
      .add(-9.11581811).add(-9.39407225).add(-9.67322666).add(-9.95339929)
      .add(-10.23464077).add(-10.51729574).add(-10.80177052)
      .add(-11.08818525).add(-11.37714046).add(-11.66929018)
      .add(-11.96473177).add(-12.26379252).add(-12.56627568).add(-12.8726403)
      .add(-13.18280118).add(-13.49674892).add(-13.81466463)
      .add(-14.13611316).add(-14.46060176).add(-14.78817483)
      .add(-15.11879274).add(-15.45282268).add(-15.79055349)
      .add(-16.13097716).add(-16.4739568).add(-16.81993659).add(-17.16916341)
      .add(-17.52170031).add(-17.87752196).add(-18.23639776)
      .add(-18.59807178).add(-18.96256722).add(-19.32976668)
      .add(-19.69921624).add(-20.07035737).add(-20.44277397)
      .add(-20.81538317).add(-21.18633402).add(-21.55478278)
      .add(-21.91981294).add(-22.27921372).add(-22.63121616)
      .add(-22.97498195).add(-23.31029258).add(-23.63678576).add(-23.9538722)
      .add(-24.26247038).add(-24.5635518).add(-24.8570612).add(-25.14416823)
      .add(-25.42680559).add(-25.70796233).add(-25.99034003)
      .add(-26.27321407).add(-26.56058499).add(-26.85352404)
      .add(-27.15374533).add(-27.46279925).add(-27.78143113)
      .add(-28.10896581).add(-28.44801917).add(-28.79994997)
      .add(-29.16493174).add(-29.54397412).add(-29.93397488).add(-30.3420521)
      .add(-30.76217412).add(-31.19581725).add(-31.64294348)
      .add(-32.09989817).add(-32.30752376).array())
      .add(stan::math::array_builder<double>().add(-1.86732791)
      .add(-1.95086077).add(-2.14712998).add(-2.35544588).add(-2.57308466)
      .add(-2.79843899).add(-3.03014606).add(-3.26647681).add(-3.50739861)
      .add(-3.75231817).add(-4.00082496).add(-4.25276639).add(-4.50780631)
      .add(-4.76544343).add(-5.02521128).add(-5.28667275).add(-5.54930139)
      .add(-5.81285333).add(-6.07718396).add(-6.3423872).add(-6.60877168)
      .add(-6.87613085).add(-7.14430629).add(-7.41349563).add(-7.6838601)
      .add(-7.95545141).add(-8.22837762).add(-8.50271118).add(-8.77831136)
      .add(-9.0547321).add(-9.33229359).add(-9.61074377).add(-9.89008035)
      .add(-10.1701999).add(-10.45132002).add(-10.7337667).add(-11.01760747)
      .add(-11.30343112).add(-11.59192854).add(-11.88327827).add(-12.177949)
      .add(-12.47588546).add(-12.77768558).add(-13.08339414)
      .add(-13.39312743).add(-13.70715609).add(-14.02510121)
      .add(-14.34652025).add(-14.67147954).add(-14.99992748)
      .add(-15.33222583).add(-15.66863818).add(-16.00814822).add(-16.3505996)
      .add(-16.69641766).add(-17.04584419).add(-17.39892754)
      .add(-17.75565687).add(-18.11580336).add(-18.47906588)
      .add(-18.84551673).add(-19.21512191).add(-19.58748602)
      .add(-19.96202801).add(-20.33837221).add(-20.71559267)
      .add(-21.09193563).add(-21.46642728).add(-21.83804179)
      .add(-22.20456928).add(-22.56404967).add(-22.91532609).add(-23.2579513)
      .add(-23.59128926).add(-23.91456237).add(-24.22849676)
      .add(-24.53392269).add(-24.8307513).add(-25.12015302).add(-25.40410599)
      .add(-25.68561285).add(-25.96741991).add(-26.24906072)
      .add(-26.53455566).add(-26.82509429).add(-27.12245847)
      .add(-27.42827536).add(-27.74333461).add(-28.06717082)
      .add(-28.40239169).add(-28.75045779).add(-29.11168735)
      .add(-29.48722929).add(-29.87452146).add(-30.27995113).add(-30.6984553)
      .add(-31.13151577).add(-31.57978305).add(-32.04042431).add(-32.2507126)
      .array()).add(stan::math::array_builder<double>().add(-1.86467552)
      .add(-1.94781467).add(-2.14298594).add(-2.3498804).add(-2.56572041)
      .add(-2.78876714).add(-3.01758192).add(-3.25060162).add(-3.48774992)
      .add(-3.72852798).add(-3.97264566).add(-4.22006615).add(-4.47060524)
      .add(-4.72393499).add(-4.97975111).add(-5.2377408).add(-5.49745681)
      .add(-5.7586643).add(-6.02119478).add(-6.28505073).add(-6.55037335)
      .add(-6.81698242).add(-7.08471945).add(-7.35366407).add(-7.62389056)
      .add(-7.89541787).add(-8.16833318).add(-8.44271948).add(-8.71846608)
      .add(-8.99514737).add(-9.27303369).add(-9.55182683).add(-9.83144073)
      .add(-10.11164484).add(-10.39253128).add(-10.67432236)
      .add(-10.95699752).add(-11.24108509).add(-11.52726296)
      .add(-11.81574157).add(-12.10709339).add(-12.40138117)
      .add(-12.69933035).add(-13.00112188).add(-13.307012).add(-13.61738081)
      .add(-13.93193334).add(-14.25030198).add(-14.57259428).add(-14.8987681)
      .add(-15.22918765).add(-15.56409966).add(-15.9024827).add(-16.24416147)
      .add(-16.58953927).add(-16.93884462).add(-17.29210634)
      .add(-17.64931493).add(-18.01023671).add(-18.37453505)
      .add(-18.74231074).add(-19.11358432).add(-19.48799954)
      .add(-19.86496037).add(-20.24413434).add(-20.62473534)
      .add(-21.00511378).add(-21.3842376).add(-21.7610392).add(-22.13334892)
      .add(-22.4990997).add(-22.85691087).add(-23.2061438).add(-23.54590849)
      .add(-23.87523721).add(-24.19464095).add(-24.50476862)
      .add(-24.80544583).add(-25.09779638).add(-25.38380116)
      .add(-25.66645709).add(-25.94854769).add(-26.22982928)
      .add(-26.51435172).add(-26.80341285).add(-27.0988543).add(-27.40236466)
      .add(-27.71477303).add(-28.03576548).add(-28.36794557)
      .add(-28.71284381).add(-29.07088234).add(-29.44331425)
      .add(-29.82796098).add(-30.23072602).add(-30.64724198)
      .add(-31.07902775).add(-31.52727671).add(-31.98986268)
      .add(-32.20183164).array()).add(stan::math::array_builder<double>()
      .add(-1.86467552).add(-1.94781467).add(-2.14298594).add(-2.3498804)
      .add(-2.56572041).add(-2.78876714).add(-3.01758192).add(-3.25060162)
      .add(-3.48774992).add(-3.72852798).add(-3.97264566).add(-4.22006615)
      .add(-4.47060524).add(-4.72393499).add(-4.97975111).add(-5.2377408)
      .add(-5.49745681).add(-5.7586643).add(-6.02119478).add(-6.28505073)
      .add(-6.55037335).add(-6.81698242).add(-7.08471945).add(-7.35366407)
      .add(-7.62389056).add(-7.89541787).add(-8.16833318).add(-8.44271948)
      .add(-8.71846608).add(-8.99514737).add(-9.27303369).add(-9.55182683)
      .add(-9.83144073).add(-10.11164484).add(-10.39253128).add(-10.67432236)
      .add(-10.95699752).add(-11.24108509).add(-11.52726296)
      .add(-11.81574157).add(-12.10709339).add(-12.40138117)
      .add(-12.69933035).add(-13.00112188).add(-13.307012).add(-13.61738081)
      .add(-13.93193334).add(-14.25030198).add(-14.57259428).add(-14.8987681)
      .add(-15.22918765).add(-15.56409966).add(-15.9024827).add(-16.24416147)
      .add(-16.58953927).add(-16.93884462).add(-17.29210634)
      .add(-17.64931493).add(-18.01023671).add(-18.37453505)
      .add(-18.74231074).add(-19.11358432).add(-19.48799954)
      .add(-19.86496037).add(-20.24413434).add(-20.62473534)
      .add(-21.00511378).add(-21.3842376).add(-21.7610392).add(-22.13334892)
      .add(-22.4990997).add(-22.85691087).add(-23.2061438).add(-23.54590849)
      .add(-23.87523721).add(-24.19464095).add(-24.50476862)
      .add(-24.80544583).add(-25.09779638).add(-25.38380116)
      .add(-25.66645709).add(-25.94854769).add(-26.22982928)
      .add(-26.51435172).add(-26.80341285).add(-27.0988543).add(-27.40236466)
      .add(-27.71477303).add(-28.03576548).add(-28.36794557)
      .add(-28.71284381).add(-29.07088234).add(-29.44331425)
      .add(-29.82796098).add(-30.23072602).add(-30.64724198)
      .add(-31.07902775).add(-31.52727671).add(-31.98986268)
      .add(-32.20183164).array()).add(stan::math::array_builder<double>()
      .add(-1.86732791).add(-1.95086077).add(-2.14712998).add(-2.35544588)
      .add(-2.57308466).add(-2.79843899).add(-3.03014606).add(-3.26647681)
      .add(-3.50739861).add(-3.75231817).add(-4.00082496).add(-4.25276639)
      .add(-4.50780631).add(-4.76544343).add(-5.02521128).add(-5.28667275)
      .add(-5.54930139).add(-5.81285333).add(-6.07718396).add(-6.3423872)
      .add(-6.60877168).add(-6.87613085).add(-7.14430629).add(-7.41349563)
      .add(-7.6838601).add(-7.95545141).add(-8.22837762).add(-8.50271118)
      .add(-8.77831136).add(-9.0547321).add(-9.33229359).add(-9.61074377)
      .add(-9.89008035).add(-10.1701999).add(-10.45132002).add(-10.7337667)
      .add(-11.01760747).add(-11.30343112).add(-11.59192854)
      .add(-11.88327827).add(-12.177949).add(-12.47588546).add(-12.77768558)
      .add(-13.08339414).add(-13.39312743).add(-13.70715609)
      .add(-14.02510121).add(-14.34652025).add(-14.67147954)
      .add(-14.99992748).add(-15.33222583).add(-15.66863818)
      .add(-16.00814822).add(-16.3505996).add(-16.69641766).add(-17.04584419)
      .add(-17.39892754).add(-17.75565687).add(-18.11580336)
      .add(-18.47906588).add(-18.84551673).add(-19.21512191)
      .add(-19.58748602).add(-19.96202801).add(-20.33837221)
      .add(-20.71559267).add(-21.09193563).add(-21.46642728)
      .add(-21.83804179).add(-22.20456928).add(-22.56404967)
      .add(-22.91532609).add(-23.2579513).add(-23.59128926).add(-23.91456237)
      .add(-24.22849676).add(-24.53392269).add(-24.8307513).add(-25.12015302)
      .add(-25.40410599).add(-25.68561285).add(-25.96741991)
      .add(-26.24906072).add(-26.53455566).add(-26.82509429)
      .add(-27.12245847).add(-27.42827536).add(-27.74333461)
      .add(-28.06717082).add(-28.40239169).add(-28.75045779)
      .add(-29.11168735).add(-29.48722929).add(-29.87452146)
      .add(-30.27995113).add(-30.6984553).add(-31.13151577).add(-31.57978305)
      .add(-32.04042431).add(-32.2507126).array())
      .add(stan::math::array_builder<double>().add(-1.87294026)
      .add(-1.95720994).add(-2.15543203).add(-2.36610124).add(-2.58649389)
      .add(-2.81509926).add(-3.05054891).add(-3.29073074).add(-3.53563237)
      .add(-3.78451207).add(-4.03681292).add(-4.29228853).add(-4.55049175)
      .add(-4.81080773).add(-5.07269028).add(-5.33569028).add(-5.59934242)
      .add(-5.86354326).add(-6.1283047).add(-6.39392486).add(-6.66097138)
      .add(-6.92914764).add(-7.19819898).add(-7.46838421).add(-7.73986942)
      .add(-8.01262942).add(-8.28670576).add(-8.56210254).add(-8.83862532)
      .add(-9.11581811).add(-9.39407225).add(-9.67322666).add(-9.95339929)
      .add(-10.23464077).add(-10.51729574).add(-10.80177052)
      .add(-11.08818525).add(-11.37714046).add(-11.66929018)
      .add(-11.96473177).add(-12.26379252).add(-12.56627568).add(-12.8726403)
      .add(-13.18280118).add(-13.49674892).add(-13.81466463)
      .add(-14.13611316).add(-14.46060176).add(-14.78817483)
      .add(-15.11879274).add(-15.45282268).add(-15.79055349)
      .add(-16.13097716).add(-16.4739568).add(-16.81993659).add(-17.16916341)
      .add(-17.52170031).add(-17.87752196).add(-18.23639776)
      .add(-18.59807178).add(-18.96256722).add(-19.32976668)
      .add(-19.69921624).add(-20.07035737).add(-20.44277397)
      .add(-20.81538317).add(-21.18633402).add(-21.55478278)
      .add(-21.91981294).add(-22.27921372).add(-22.63121616)
      .add(-22.97498195).add(-23.31029258).add(-23.63678576).add(-23.9538722)
      .add(-24.26247038).add(-24.5635518).add(-24.8570612).add(-25.14416823)
      .add(-25.42680559).add(-25.70796233).add(-25.99034003)
      .add(-26.27321407).add(-26.56058499).add(-26.85352404)
      .add(-27.15374533).add(-27.46279925).add(-27.78143113)
      .add(-28.10896581).add(-28.44801917).add(-28.79994997)
      .add(-29.16493174).add(-29.54397412).add(-29.93397488).add(-30.3420521)
      .add(-30.76217412).add(-31.19581725).add(-31.64294348)
      .add(-32.09989817).add(-32.30752376).array())
      .add(stan::math::array_builder<double>().add(-1.88095044)
      .add(-1.96608819).add(-2.16650857).add(-2.37966505).add(-2.60278332)
      .add(-2.83442007).add(-3.07316154).add(-3.31641521).add(-3.56424684)
      .add(-3.81581621).add(-4.07047772).add(-4.32796845).add(-4.5878109)
      .add(-4.84935848).add(-5.11206271).add(-5.37553318).add(-5.63942357)
      .add(-5.90379404).add(-6.1688015).add(-6.43490576).add(-6.70288226)
      .add(-6.97223303).add(-7.24250247).add(-7.51396604).add(-7.78677285)
      .add(-8.06080587).add(-8.3360561).add(-8.61249725).add(-8.8899345)
      .add(-9.16795767).add(-9.44706188).add(-9.72719764).add(-10.00859498)
      .add(-10.29142242).add(-10.57609775).add(-10.8630463).add(-11.15237869)
      .add(-11.44465275).add(-11.74044965).add(-12.03976519)
      .add(-12.34279533).add(-12.649225).add(-12.95940655).add(-13.27316824)
      .add(-13.59042171).add(-13.91129752).add(-14.23534037)
      .add(-14.56203754).add(-14.89142815).add(-15.2234962).add(-15.55861399)
      .add(-15.89709273).add(-16.23792944).add(-16.58099989)
      .add(-16.92675731).add(-17.27544343).add(-17.62712783)
      .add(-17.98176172).add(-18.33910837).add(-18.69895928)
      .add(-19.06128291).add(-19.42587491).add(-19.79222672)
      .add(-20.15981563).add(-20.52820736).add(-20.89619631)
      .add(-21.26188319).add(-21.62460322).add(-21.98358853)
      .add(-22.33666058).add(-22.68226013).add(-23.01985084).add(-23.349385)
      .add(-23.67069197).add(-23.98330585).add(-24.28825906)
      .add(-24.58659136).add(-24.87823136).add(-25.16431409)
      .add(-25.44670769).add(-25.72838288).add(-26.01200776)
      .add(-26.29662711).add(-26.58623778).add(-26.88180991).add(-27.1849976)
      .add(-27.49727558).add(-27.81935069).add(-28.1503301).add(-28.49284224)
      .add(-28.84813663).add(-29.21623733).add(-29.59801895)
      .add(-29.98981614).add(-30.39957135).add(-30.8202581).add(-31.25340452)
      .add(-31.69834846).add(-32.15077471).add(-32.35548231).array())
      .add(stan::math::array_builder<double>().add(-1.89036356)
      .add(-1.97634121).add(-2.17881787).add(-2.39419284).add(-2.61962702)
      .add(-2.85374943).add(-3.09510167).add(-3.34057282).add(-3.59038004)
      .add(-3.84364245).add(-4.09967379).add(-4.35824467).add(-4.6188927)
      .add(-4.88098021).add(-5.14398652).add(-5.40759547).add(-5.67157767)
      .add(-5.93612669).add(-6.20149772).add(-6.46825387).add(-6.73733331)
      .add(-7.00797499).add(-7.27947494).add(-7.5521283).add(-7.82609103)
      .add(-8.10117814).add(-8.37736835).add(-8.65464684).add(-8.93285752)
      .add(-9.21166288).add(-9.49166289).add(-9.77290587).add(-10.05570123)
      .add(-10.34028716).add(-10.62710505).add(-10.91655617)
      .add(-11.20870612).add(-11.50404683).add(-11.80308012)
      .add(-12.10570654).add(-12.41201714).add(-12.72161016)
      .add(-13.03476442).add(-13.351257).add(-13.67095459).add(-13.99396194)
      .add(-14.31982329).add(-14.64802149).add(-14.97859605)
      .add(-15.31155656).add(-15.64727615).add(-15.9860827).add(-16.32697386)
      .add(-16.66983201).add(-17.01511236).add(-17.36304545)
      .add(-17.71370286).add(-18.06700937).add(-18.42272193)
      .add(-18.78068146).add(-19.14080425).add(-19.50280654)
      .add(-19.86613787).add(-20.23032503).add(-20.59493714)
      .add(-20.95868342).add(-21.31965872).add(-21.67739588)
      .add(-22.03128149).add(-22.3791751).add(-22.71970723).add(-23.05259166)
      .add(-23.37788311).add(-23.69552598).add(-24.00512905)
      .add(-24.30778689).add(-24.60456602).add(-24.89535825)
      .add(-25.18125385).add(-25.46405456).add(-25.74671619)
      .add(-26.03188525).add(-26.31840332).add(-26.61027424)
      .add(-26.90838171).add(-27.21432772).add(-27.52951496)
      .add(-27.85461792).add(-28.18853339).add(-28.53390691)
      .add(-28.89188093).add(-29.26233684).add(-29.646031).add(-30.03875684)
      .add(-30.44931139).add(-30.86972622).add(-31.30163245)
      .add(-31.74385297).add(-32.19159874).add(-32.39350431).array())
      .add(stan::math::array_builder<double>().add(-1.90038817)
      .add(-1.98711234).add(-2.19137186).add(-2.40860206).add(-2.63590437)
      .add(-2.87199678).add(-3.11538729).add(-3.36242512).add(-3.61353961)
      .add(-3.86785223).add(-4.12466523).add(-4.38380936).add(-4.64485727)
      .add(-4.9071946).add(-5.17033352).add(-5.4340248).add(-5.69813536)
      .add(-5.96295539).add(-6.22879865).add(-6.49629075).add(-6.76651151)
      .add(-7.03841083).add(-7.31102072).add(-7.58467682).add(-7.85957538)
      .add(-8.13549009).add(-8.41241779).add(-8.69038097).add(-8.96927955)
      .add(-9.2488525).add(-9.5297894).add(-9.81221194).add(-10.09647615)
      .add(-10.38285194).add(-10.67177201).add(-10.96359144).add(-11.2583168)
      .add(-11.5563701).add(-11.85818063).add(-12.16356851).add(-12.47254533)
      .add(-12.78464893).add(-13.10010891).add(-13.41867411)
      .add(-13.74018658).add(-14.06473831).add(-14.39188197)
      .add(-14.72110248).add(-15.05244019).add(-15.38592875)
      .add(-15.72193758).add(-16.06080623).add(-16.40152947)
      .add(-16.74399228).add(-17.08864766).add(-17.43571221)
      .add(-17.78525778).add(-18.13718306).add(-18.49124068)
      .add(-18.84732292).add(-19.20529943).add(-19.5648175).add(-19.92529829)
      .add(-20.28632844).add(-20.6474963).add(-21.00745544).add(-21.36432291)
      .add(-21.71782833).add(-22.06750072).add(-22.41122925)
      .add(-22.74780398).add(-23.0771385).add(-23.39933721).add(-23.71440737)
      .add(-24.02200495).add(-24.32325921).add(-24.61924366)
      .add(-24.90980732).add(-25.19599499).add(-25.47954519)
      .add(-25.76340323).add(-26.05020276).add(-26.33860201)
      .add(-26.63261819).add(-26.93305886).add(-27.24148031)
      .add(-27.55921704).add(-27.88691628).add(-28.22327547)
      .add(-28.57096166).add(-28.93101588).add(-29.30318687)
      .add(-29.68813227).add(-30.08113892).add(-30.49186122)
      .add(-30.91146014).add(-31.34170752).add(-31.78101284)
      .add(-32.22426171).add(-32.42361198).array())
      .add(stan::math::array_builder<double>().add(-1.91053305)
      .add(-1.99789584).add(-2.20365198).add(-2.42239543).add(-2.65117997)
      .add(-2.88882999).add(-3.13383075).add(-3.38197554).add(-3.63395238)
      .add(-3.88891448).add(-4.1461686).add(-4.40561797).add(-4.66687684)
      .add(-4.92935552).add(-5.19259347).add(-5.45639455).add(-5.72069949)
      .add(-5.98586457).add(-6.25223522).add(-6.52047544).add(-6.79180169)
      .add(-7.06486698).add(-7.33843701).add(-7.61291173).add(-7.88855803)
      .add(-8.16512855).add(-8.44265756).add(-8.72121707).add(-9.00076654)
      .add(-9.28111418).add(-9.56301972).add(-9.84665468).add(-10.13239603)
      .add(-10.42051971).add(-10.71143126).add(-11.0054306).add(-11.3024628)
      .add(-11.60288417).add(-11.90706214).add(-12.21475154)
      .add(-12.52590497).add(-12.8400191).add(-13.15729076).add(-13.47745454)
      .add(-13.80033958).add(-14.12603142).add(-14.4540948).add(-14.78401895)
      .add(-15.11584372).add(-15.44962445).add(-15.78572314)
      .add(-16.12448729).add(-16.46490635).add(-16.8068655).add(-17.1508133)
      .add(-17.49695152).add(-17.8453521).add(-18.1958896).add(-18.54831499)
      .add(-18.90257365).add(-19.25849457).add(-19.61566647)
      .add(-19.97349371).add(-20.33162933).add(-20.68969133)
      .add(-21.04629876).add(-21.3996074).add(-21.74953303).add(-22.09572858)
      .add(-22.43610005).add(-22.7695685).add(-23.09620738).add(-23.41613429)
      .add(-23.72938621).add(-24.03565203).add(-24.33608177)
      .add(-24.63174684).add(-24.92245301).add(-25.20920178)
      .add(-25.49367233).add(-25.77880312).add(-26.06722102)
      .add(-26.35741514).add(-26.65342007).add(-26.95597456)
      .add(-27.26659446).add(-27.58654974).add(-27.9164645).add(-28.25484823)
      .add(-28.60439355).add(-28.96604703).add(-29.33943518)
      .add(-29.72513595).add(-30.11796623).add(-30.52842718)
      .add(-30.94687981).add(-31.37526202).add(-31.81165309)
      .add(-32.25072017).add(-32.44778674).array())
      .add(stan::math::array_builder<double>().add(-1.92050533)
      .add(-2.00840356).add(-2.2153954).add(-2.4353581).add(-2.66531081)
      .add(-2.90419925).add(-3.15049496).add(-3.39942243).add(-3.65196386)
      .add(-3.90732425).add(-4.16482262).add(-4.42443866).add(-4.6858277)
      .add(-4.9484204).add(-5.2117743).add(-5.47573205).add(-5.74028868)
      .add(-6.00584375).add(-6.27275762).add(-6.54171964).add(-6.81408642)
      .add(-7.08821461).add(-7.36260631).add(-7.63774726).add(-7.91399931)
      .add(-8.19110755).add(-8.46915426).add(-8.74826458).add(-9.02845403)
      .add(-9.30958887).add(-9.59248063).add(-9.8773313).add(-10.16452055)
      .add(-10.45431395).add(-10.74708049).add(-11.04306302)
      .add(-11.34214803).add(-11.64463328).add(-11.95083504)
      .add(-12.26045588).add(-12.57340487).add(-12.88915118)
      .add(-13.20786972).add(-13.52928931).add(-13.85323278)
      .add(-14.17978223).add(-14.50851547).add(-14.83892647)
      .add(-15.17105285).add(-15.50496933).add(-15.84102773)
      .add(-16.17958079).add(-16.51961115).add(-16.8610028).add(-17.20419885)
      .add(-17.54938641).add(-17.89663808).add(-18.24580688)
      .add(-18.59664496).add(-18.949152).add(-19.30312199).add(-19.65809421)
      .add(-20.01346548).add(-20.36895867).add(-20.72422765)
      .add(-21.07787163).add(-21.4280939).add(-21.77498188).add(-22.11829303)
      .add(-22.45593758).add(-22.7869439).add(-23.11151547).add(-23.42975855)
      .add(-23.7417189).add(-24.04711127).add(-24.34709935).add(-24.64274836)
      .add(-24.93382229).add(-25.22128201).add(-25.50675096)
      .add(-25.79316352).add(-26.08314406).add(-26.37502324)
      .add(-26.67285567).add(-26.97731681).add(-27.28988644)
      .add(-27.61177343).add(-27.94358215).add(-28.28364495)
      .add(-28.63468373).add(-28.99755781).add(-29.37178139)
      .add(-29.75787024).add(-30.15020629).add(-30.56011954)
      .add(-30.97723567).add(-31.40367414).add(-31.83724948)
      .add(-32.27248482).add(-32.46752425).array())
      .add(stan::math::array_builder<double>().add(-1.93020667)
      .add(-2.01855192).add(-2.22656293).add(-2.44751091).add(-2.67839215)
      .add(-2.91828551).add(-3.16565534).add(-3.41514535).add(-3.66805868)
      .add(-3.92366488).add(-4.18129743).add(-4.44101151).add(-4.70249948)
      .add(-4.96520631).add(-5.22869852).add(-5.49284574).add(-5.75768251)
      .add(-6.02363599).add(-6.29107239).add(-6.56070058).add(-6.83402513)
      .add(-7.10911034).add(-7.38419865).add(-7.65987958).add(-7.93662855)
      .add(-8.21419107).add(-8.4927021).add(-8.77233849).add(-9.05316512)
      .add(-9.33509453).add(-9.61897431).add(-9.90502201).add(-10.19360743)
      .add(-10.48497587).add(-10.77945558).add(-11.07723414)
      .add(-11.37814448).add(-11.68243346).add(-11.99037561)
      .add(-12.30163184).add(-12.61607917).add(-12.93316885)
      .add(-13.25306102).add(-13.57548384).add(-13.90025757)
      .add(-14.22746206).add(-14.55668809).add(-14.88743403)
      .add(-15.21973358).add(-15.55367888).add(-15.8896096).add(-16.22788178)
      .add(-16.56747041).add(-16.90825758).add(-17.25068061)
      .add(-17.59491275).add(-17.94102819).add(-18.28886118).add(-18.6381677)
      .add(-18.98900242).add(-19.34112928).add(-19.69404596)
      .add(-20.04714876).add(-20.40023155).add(-20.75298733)
      .add(-21.10400549).add(-21.45154085).add(-21.79583702)
      .add(-22.13673811).add(-22.47214769).add(-22.80118275)
      .add(-23.12415484).add(-23.44114235).add(-23.75218647)
      .add(-24.05702444).add(-24.35683012).add(-24.6526607).add(-24.94424038)
      .add(-25.23249204).add(-25.51898637).add(-25.80665585)
      .add(-26.09812547).add(-26.39157576).add(-26.69108325)
      .add(-26.99726444).add(-27.31156671).add(-27.63514101)
      .add(-27.96857488).add(-28.31003352).add(-28.66227137)
      .add(-29.02606765).add(-29.40083337).add(-29.78703773)
      .add(-30.17865989).add(-30.58783673).add(-31.003516).add(-31.42800711)
      .add(-31.85891059).add(-32.29065679).add(-32.48389808).array())
      .add(stan::math::array_builder<double>().add(-1.93952015)
      .add(-2.02823397).add(-2.2370758).add(-2.4588109).add(-2.69042327)
      .add(-2.9311343).add(-3.17940659).add(-3.42929461).add(-3.68244321)
      .add(-3.93819533).add(-4.19589861).add(-4.4556801).add(-4.71726361)
      .add(-4.98010181).add(-5.24376176).add(-5.50813).add(-5.77326876)
      .add(-6.03962144).add(-6.30755511).add(-6.57779606).add(-6.85200592)
      .add(-7.12796186).add(-7.40365057).add(-7.6797796).add(-7.95695166)
      .add(-8.23491687).add(-8.51386381).add(-8.79401719).add(-9.07548365)
      .add(-9.35821121).add(-9.64307086).add(-9.93028466).add(-10.22020433)
      .add(-10.5130492).add(-10.80910586).add(-11.10851018).add(-11.41104722)
      .add(-11.71692014).add(-12.02636966).add(-12.33902348)
      .add(-12.65473506).add(-12.97294451).add(-13.29380191)
      .add(-13.61703784).add(-13.94247208).add(-14.27018253)
      .add(-14.59977232).add(-14.9307436).add(-15.26312474).add(-15.59702365)
      .add(-15.93276644).add(-16.27071117).add(-16.60982472)
      .add(-16.94998699).add(-17.2916297).add(-17.63491322).add(-17.97991449)
      .add(-18.32645169).add(-18.67428696).add(-19.02353021)
      .add(-19.37391956).add(-19.72491759).add(-20.07592538)
      .add(-20.42680728).add(-20.77729674).add(-21.12598015).add(-21.4711649)
      .add(-21.81323602).add(-22.15210855).add(-22.48567062)
      .add(-22.81311327).add(-23.1348399).add(-23.45088989).add(-23.76129105)
      .add(-24.06580179).add(-24.36560437).add(-24.66174728)
      .add(-24.95391693).add(-25.24300053).add(-25.53051865)
      .add(-25.81940347).add(-26.11228302).add(-26.40719452)
      .add(-26.70823772).add(-27.0159737).add(-27.33182066).add(-27.65687457)
      .add(-27.99170862).add(-28.33432997).add(-28.68752857)
      .add(-29.05201028).add(-29.42709125).add(-29.81320782)
      .add(-30.20396563).add(-30.61228408).add(-31.02648368)
      .add(-31.44906697).add(-31.87745987).add(-32.30603497).add(-32.4976778)
      .array()).add(stan::math::array_builder<double>().add(-1.94847635)
      .add(-2.03749466).add(-2.24701656).add(-2.46938459).add(-2.70157896)
      .add(-2.94297058).add(-3.19202408).add(-3.44219668).add(-3.69549096)
      .add(-3.9513282).add(-4.2090679).add(-4.46890424).add(-4.73058657)
      .add(-4.99356944).add(-5.25741383).add(-5.52201584).add(-5.78745695)
      .add(-6.05418944).add(-6.32257955).add(-6.59337145).add(-6.86839332)
      .add(-7.14514043).add(-7.42134696).add(-7.69784962).add(-7.97538845)
      .add(-8.2537196).add(-8.53308393).add(-8.81374888).add(-9.09585526)
      .add(-9.37937709).add(-9.66519867).add(-9.95353846).add(-10.24472482)
      .add(-10.53894818).add(-10.83645431).add(-11.13733152).add(-11.4413226)
      .add(-11.74859345).add(-12.0593575).add(-12.37321583).add(-12.6900047)
      .add(-13.0091578).add(-13.33081838).add(-13.65472118).add(-13.98068662)
      .add(-14.30879053).add(-14.63864757).add(-14.96976299)
      .add(-15.30215867).add(-15.63595696).add(-15.97146943).add(-16.3090553)
      .add(-16.64767315).add(-16.98720074).add(-17.32806453)
      .add(-17.67041326).add(-18.01432772).add(-18.35961256)
      .add(-18.70603813).add(-19.05376939).add(-19.40252217)
      .add(-19.75172938).add(-20.1008007).add(-20.44966942).add(-20.79810942)
      .add(-21.14470864).add(-21.4878265).add(-21.82797578).add(-22.16512911)
      .add(-22.49715228).add(-22.82329904).add(-23.14405256)
      .add(-23.45940562).add(-23.76936675).add(-24.0737152).add(-24.37364079)
      .add(-24.67018318).add(-24.96299287).add(-25.25292345).add(-25.5414476)
      .add(-25.83149852).add(-26.12570914).add(-26.42197908)
      .add(-26.72443233).add(-27.03357755).add(-27.35080646)
      .add(-27.67716288).add(-28.01320776).add(-28.35679866)
      .add(-28.71076353).add(-29.07574131).add(-29.45096069)
      .add(-29.83683719).add(-30.22662931).add(-30.6340134).add(-31.0467274)
      .add(-31.46746657).add(-31.89351283).add(-32.3192049).add(-32.50942186)
      .array()).add(stan::math::array_builder<double>().add(-1.95692411)
      .add(-2.04618716).add(-2.25624968).add(-2.47911022).add(-2.71175352)
      .add(-2.95370544).add(-3.20343624).add(-3.45380317).add(-3.70717853)
      .add(-3.96306525).add(-4.22083138).add(-4.48073221).add(-4.74253594)
      .add(-5.00569308).add(-5.26975229).add(-5.5346126).add(-5.80036762)
      .add(-6.06747283).add(-6.33629336).add(-6.60759268).add(-6.88337435)
      .add(-7.16085714).add(-7.43752539).add(-7.71435339).add(-7.99222573)
      .add(-8.27090438).add(-8.55068).add(-8.83185747).add(-9.11460487)
      .add(-9.39891439).add(-9.68567587).add(-9.97509846).add(-10.26748409)
      .add(-10.56299317).add(-10.86183252).add(-11.16404727)
      .add(-11.46934317).add(-11.77785446).add(-12.0897726).add(-12.40467725)
      .add(-12.72239225).add(-13.04234828).add(-13.36468381)
      .add(-13.68913883).add(-14.01553491).add(-14.34394548)
      .add(-14.67399589).add(-15.00519383).add(-15.33755375)
      .add(-15.67121139).add(-16.00646315).add(-16.34366877)
      .add(-16.68177864).add(-17.02066854).add(-17.36076025)
      .add(-17.70219206).add(-18.04504973).add(-18.38912672)
      .add(-18.73420329).add(-19.08049893).add(-19.42771017)
      .add(-19.77524465).add(-20.1225234).add(-20.46954642).add(-20.81612716)
      .add(-21.1608582).add(-21.50214943).add(-21.84062916).add(-22.1763164)
      .add(-22.50704922).add(-22.83213529).add(-23.15212844)
      .add(-23.46696959).add(-23.77664399).add(-24.08095182)
      .add(-24.38109019).add(-24.67809003).add(-24.97156763)
      .add(-25.26234476).add(-25.55184817).add(-25.84301314).add(-26.138479)
      .add(-26.4360127).add(-26.73976328).add(-27.05018946).add(-27.368659)
      .add(-27.69616608).add(-28.03326139).add(-28.37766055)
      .add(-28.73223172).add(-29.0975529).add(-29.47277196).add(-29.85829406)
      .add(-30.24705435).add(-30.65346005).add(-31.06470606)
      .add(-31.48367742).add(-31.90753598).add(-32.33060278)
      .add(-32.51954268).array()).add(stan::math::array_builder<double>()
      .add(-1.96501455).add(-2.0544769).add(-2.26497637).add(-2.48822829)
      .add(-2.7212279).add(-2.96365947).add(-3.21400079).add(-3.46450424)
      .add(-3.71792143).add(-3.97383778).add(-4.23162588).add(-4.49159674)
      .add(-4.75353201).add(-5.01687381).add(-5.2811545).add(-5.54627201)
      .add(-5.81232759).add(-6.07977683).add(-6.34898504).add(-6.62073745)
      .add(-6.89722136).add(-7.17538348).add(-7.45245999).add(-7.7295693)
      .add(-8.00774557).add(-8.28675515).add(-8.56693519).add(-8.8486226)
      .add(-9.13200646).add(-9.41709044).add(-9.70476381).add(-9.99522233)
      .add(-10.28873978).add(-10.58544644).add(-10.88551252)
      .add(-11.18894416).add(-11.49541474).add(-11.80503161)
      .add(-12.11796859).add(-12.43378805).add(-12.75230491)
      .add(-13.07294929).add(-13.39585632).add(-13.72077171)
      .add(-14.04751845).add(-14.3761671).add(-14.7063529).add(-15.0375854)
      .add(-15.3698709).add(-15.70335764).add(-16.03832646).add(-16.37513726)
      .add(-16.71273241).add(-17.05098604).add(-17.39031583).add(-17.7308509)
      .add(-18.07268296).add(-18.41559642).add(-18.75938281)
      .add(-19.10431539).add(-19.45007385).add(-19.7960442).add(-20.14166071)
      .add(-20.48698742).add(-20.83187603).add(-21.17492578)
      .add(-21.51459496).add(-21.85161665).add(-22.18604679)
      .add(-22.51569169).add(-22.83990605).add(-23.15930731)
      .add(-23.47378095).add(-23.78328609).add(-24.08764425)
      .add(-24.38805977).add(-24.68555503).add(-24.9797137).add(-25.2713273)
      .add(-25.56177838).add(-25.85400519).add(-26.15065468)
      .add(-26.44936547).add(-26.75431225).add(-27.06590606)
      .add(-27.38549284).add(-27.71401958).add(-28.05202843)
      .add(-28.39710011).add(-28.75214496).add(-29.11768549)
      .add(-29.49279479).add(-29.87787673).add(-30.26556451)
      .add(-30.67097017).add(-31.08078066).add(-31.49806617)
      .add(-31.91988734).add(-32.3405584).add(-32.52834976).array())
      .add(stan::math::array_builder<double>().add(-1.97273715)
      .add(-2.06235936).add(-2.27320675).add(-2.49676477).add(-2.73004429)
      .add(-2.97289037).add(-3.22378955).add(-3.47438636).add(-3.72781913)
      .add(-3.98375561).add(-4.24156869).add(-4.50161981).add(-4.76369906)
      .add(-5.02723645).add(-5.29174488).add(-5.55711812).add(-5.82346161)
      .add(-6.09122897).add(-6.36078763).add(-6.63294714).add(-6.91008602)
      .add(-7.18888292).add(-7.46632699).add(-7.74368553).add(-8.02214581)
      .add(-8.30147634).add(-8.58205724).add(-8.8642524).add(-9.14826642)
      .add(-9.43410896).add(-9.72266415).add(-10.01411147).add(-10.30869586)
      .add(-10.60651819).add(-10.90771454).add(-11.212256).add(-11.51978774)
      .add(-11.83039428).add(-12.14423534).add(-12.46085922)
      .add(-12.78007464).add(-13.10131291).add(-13.4247067).add(-13.75000772)
      .add(-14.07704035).add(-14.40587188).add(-14.73614668)
      .add(-15.06737567).add(-15.39955639).add(-15.73284893)
      .add(-16.06751833).add(-16.40392445).add(-16.74100192)
      .add(-17.07862358).add(-17.41720368).add(-17.75686334)
      .add(-18.09770117).add(-18.4394944).add(-18.78204698).add(-19.12568494)
      .add(-19.47007312).add(-19.81457894).add(-20.15865112).add(-20.5024149)
      .add(-20.84575856).add(-21.1872893).add(-21.5255116).add(-21.86125377)
      .add(-22.19460086).add(-22.52332435).add(-22.84682051)
      .add(-23.16576492).add(-23.47998512).add(-23.78941212)
      .add(-24.09388923).add(-24.39462806).add(-24.69264279)
      .add(-24.98748577).add(-25.27991974).add(-25.57128461)
      .add(-25.86452233).add(-26.16228847).add(-26.46209723)
      .add(-26.76814944).add(-27.08081043).add(-27.40140624).add(-27.730839)
      .add(-28.06964383).add(-28.41527312).add(-28.77068099)
      .add(-29.13633958).add(-29.51125252).add(-29.89583027)
      .add(-30.28242345).add(-30.68682315).add(-31.09523969).add(-31.5109227)
      .add(-31.93084653).add(-32.34932578).add(-32.53607986).array())
      .add(stan::math::array_builder<double>().add(-1.98015639)
      .add(-2.06990581).add(-2.28102841).add(-2.5048243).add(-2.73832406)
      .add(-2.98153484).add(-3.23295258).add(-3.4836111).add(-3.73704168)
      .add(-3.9929935).add(-4.25083558).add(-4.51097506).add(-4.77320619)
      .add(-5.03694404).add(-5.3016799).add(-5.56730132).add(-5.83391547)
      .add(-6.10197286).add(-6.37184525).add(-6.64436918).add(-6.92212103)
      .add(-7.20151475).add(-7.47929293).add(-7.75687533).add(-8.03560464)
      .add(-8.31524896).add(-8.59622776).add(-8.87892723).add(-9.16356273)
      .add(-9.45014546).add(-9.73955079).add(-10.03194011).add(-10.32752948)
      .add(-10.62639137).add(-10.92863038).add(-11.23418615)
      .add(-11.54267921).add(-11.85417477).add(-12.16882135)
      .add(-12.48615571).add(-12.80598245).add(-13.12773531)
      .add(-13.45154511).add(-13.77716961).add(-14.10443447)
      .add(-14.43340331).add(-14.76372896).add(-15.09492324)
      .add(-15.42697458).add(-15.76005429).add(-16.09441157)
      .add(-16.43040613).add(-16.7669652).add(-17.10396077).add(-17.44180432)
      .add(-17.78061009).add(-18.12048441).add(-18.46119902)
      .add(-18.80257118).add(-19.14497854).add(-19.48807276)
      .add(-19.83120512).add(-20.17383955).add(-20.51615953)
      .add(-20.85808813).add(-21.19824132).add(-21.53516751)
      .add(-21.86978185).add(-22.202192).add(-22.53013232).add(-22.85303624)
      .add(-23.17163324).add(-23.48569116).add(-23.79511144)
      .add(-24.09975962).add(-24.40085482).add(-24.69940318)
      .add(-24.99492706).add(-25.28816168).add(-25.58040571)
      .add(-25.87460545).add(-26.17342592).add(-26.47426044)
      .add(-26.78133635).add(-27.09497504).add(-27.41648448)
      .add(-27.74672402).add(-28.0862232).add(-28.43231211).add(-28.78799004)
      .add(-29.15368342).add(-29.52833128).add(-29.91235745).add(-30.2978475)
      .add(-30.70124633).add(-31.10831576).add(-31.52247839)
      .add(-31.94063427).add(-32.35710298).add(-32.54291653).array())
      .array(), "assigning variable AtmosphericFluxPolyCoeffs");
    std::vector<local_scalar_t__> cos_theta_grid;
    cos_theta_grid = std::vector<local_scalar_t__>(30, DUMMY_VAR__);
    
    current_statement__ = 105;
    assign(cos_theta_grid, nil_index_list(),
      stan::math::array_builder<double>().add(-1.).add(-0.93103448)
      .add(-0.86206897).add(-0.79310345).add(-0.72413793).add(-0.65517241)
      .add(-0.5862069).add(-0.51724138).add(-0.44827586).add(-0.37931034)
      .add(-0.31034483).add(-0.24137931).add(-0.17241379).add(-0.10344828)
      .add(-0.03448276).add(0.03448276).add(0.10344828).add(0.17241379)
      .add(0.24137931).add(0.31034483).add(0.37931034).add(0.44827586)
      .add(0.51724138).add(0.5862069).add(0.65517241).add(0.72413793)
      .add(0.79310345).add(0.86206897).add(0.93103448).add(1.).array(),
      "assigning variable cos_theta_grid");
    std::vector<local_scalar_t__> log_energy_grid;
    log_energy_grid = std::vector<local_scalar_t__>(100, DUMMY_VAR__);
    
    current_statement__ = 106;
    assign(log_energy_grid, nil_index_list(),
      stan::math::array_builder<double>().add(0.).add(0.09090909)
      .add(0.18181818).add(0.27272727).add(0.36363636).add(0.45454545)
      .add(0.54545455).add(0.63636364).add(0.72727273).add(0.81818182)
      .add(0.90909091).add(1.).add(1.09090909).add(1.18181818)
      .add(1.27272727).add(1.36363636).add(1.45454545).add(1.54545455)
      .add(1.63636364).add(1.72727273).add(1.81818182).add(1.90909091)
      .add(2.).add(2.09090909).add(2.18181818).add(2.27272727)
      .add(2.36363636).add(2.45454545).add(2.54545455).add(2.63636364)
      .add(2.72727273).add(2.81818182).add(2.90909091).add(3.)
      .add(3.09090909).add(3.18181818).add(3.27272727).add(3.36363636)
      .add(3.45454545).add(3.54545455).add(3.63636364).add(3.72727273)
      .add(3.81818182).add(3.90909091).add(4.).add(4.09090909)
      .add(4.18181818).add(4.27272727).add(4.36363636).add(4.45454545)
      .add(4.54545455).add(4.63636364).add(4.72727273).add(4.81818182)
      .add(4.90909091).add(5.).add(5.09090909).add(5.18181818)
      .add(5.27272727).add(5.36363636).add(5.45454545).add(5.54545455)
      .add(5.63636364).add(5.72727273).add(5.81818182).add(5.90909091)
      .add(6.).add(6.09090909).add(6.18181818).add(6.27272727)
      .add(6.36363636).add(6.45454545).add(6.54545455).add(6.63636364)
      .add(6.72727273).add(6.81818182).add(6.90909091).add(7.)
      .add(7.09090909).add(7.18181818).add(7.27272727).add(7.36363636)
      .add(7.45454545).add(7.54545455).add(7.63636364).add(7.72727273)
      .add(7.81818182).add(7.90909091).add(8.).add(8.09090909)
      .add(8.18181818).add(8.27272727).add(8.36363636).add(8.45454545)
      .add(8.54545455).add(8.63636364).add(8.72727273).add(8.81818182)
      .add(8.90909091).add(9.).array(), "assigning variable log_energy_grid");
    Eigen::Matrix<local_scalar_t__, -1, 1> vector_interp_energies;
    vector_interp_energies = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(vector_interp_energies, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> vector_coz_grid_points;
    vector_coz_grid_points = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(vector_coz_grid_points, DUMMY_VAR__);
    
    current_statement__ = 109;
    assign(vector_interp_energies, cons_list(index_uni(1), nil_index_list()),
      interpolate(to_vector(log_energy_grid),
        to_vector(
          AtmosphericFluxPolyCoeffs[(binary_search(
                                       stan::math::abs(
                                         stan::math::cos(
                                           (stan::math::pi() -
                                             stan::math::acos(
                                               true_dir[(3 - 1)])))),
                                       cos_theta_grid, pstream__) - 1)]),
        stan::math::log10(
          truncate_value(true_energy, 1.0, 1000000000.0, pstream__)), pstream__),
      "assigning variable vector_interp_energies");
    current_statement__ = 110;
    assign(vector_interp_energies, cons_list(index_uni(2), nil_index_list()),
      interpolate(to_vector(log_energy_grid),
        to_vector(
          AtmosphericFluxPolyCoeffs[((binary_search(
                                        stan::math::abs(
                                          stan::math::cos(
                                            (stan::math::pi() -
                                              stan::math::acos(
                                                true_dir[(3 - 1)])))),
                                        cos_theta_grid, pstream__) + 1) - 1)]),
        stan::math::log10(
          truncate_value(true_energy, 1.0, 1000000000.0, pstream__)), pstream__),
      "assigning variable vector_interp_energies");
    current_statement__ = 111;
    assign(vector_coz_grid_points, cons_list(index_uni(1), nil_index_list()),
      cos_theta_grid[(binary_search(
                        stan::math::abs(
                          stan::math::cos(
                            (stan::math::pi() -
                              stan::math::acos(true_dir[(3 - 1)])))),
                        cos_theta_grid, pstream__) - 1)],
      "assigning variable vector_coz_grid_points");
    current_statement__ = 112;
    assign(vector_coz_grid_points, cons_list(index_uni(2), nil_index_list()),
      cos_theta_grid[((binary_search(
                         stan::math::abs(
                           stan::math::cos(
                             (stan::math::pi() -
                               stan::math::acos(true_dir[(3 - 1)])))),
                         cos_theta_grid, pstream__) + 1) - 1)],
      "assigning variable vector_coz_grid_points");
    current_statement__ = 113;
    return (pow(10,
              interpolate(vector_coz_grid_points, vector_interp_energies,
                stan::math::abs(
                  stan::math::cos(
                    (stan::math::pi() - stan::math::acos(true_dir[(3 - 1)])))), pstream__))
             * 10000.0);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct AtmopshericNumuFlux_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& true_energy,
           const Eigen::Matrix<T1__, -1, 1>& true_dir,
           std::ostream* pstream__)  const 
{
return AtmopshericNumuFlux(true_energy, true_dir, pstream__);
}
};

class atmo_gen_model final : public model_base_crtp<atmo_gen_model> {

 private:
  double Esrc_min;
  double Esrc_max;
  double cosz_min;
  double cosz_max;
 
 public:
  ~atmo_gen_model() final { }
  
  std::string model_name() const final { return "atmo_gen_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 v2.24.1");
    stanc_info.push_back("stancflags = --include_paths=/Users/fran/projects/astroparticle/hierarchical_nu/software/stan_files");
    return stanc_info;
  }
  
  
  atmo_gen_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "atmo_gen_model_namespace::atmo_gen_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization","Esrc_min","double",
          context__.to_vec());
      Esrc_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      Esrc_min = context__.vals_r("Esrc_min")[(1 - 1)];
      current_statement__ = 14;
      context__.validate_dims("data initialization","Esrc_max","double",
          context__.to_vec());
      Esrc_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      Esrc_max = context__.vals_r("Esrc_max")[(1 - 1)];
      current_statement__ = 15;
      context__.validate_dims("data initialization","cosz_min","double",
          context__.to_vec());
      cosz_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      cosz_min = context__.vals_r("cosz_min")[(1 - 1)];
      current_statement__ = 16;
      context__.validate_dims("data initialization","cosz_max","double",
          context__.to_vec());
      cosz_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      cosz_max = context__.vals_r("cosz_max")[(1 - 1)];
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "atmo_gen_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ energy;
      energy = DUMMY_VAR__;
      
      current_statement__ = 1;
      energy = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        energy = stan::math::lub_constrain(energy, Esrc_min, Esrc_max, lp__);
      } else {
        current_statement__ = 1;
        energy = stan::math::lub_constrain(energy, Esrc_min, Esrc_max);
      }
      local_scalar_t__ coszen;
      coszen = DUMMY_VAR__;
      
      current_statement__ = 2;
      coszen = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        coszen = stan::math::lub_constrain(coszen, cosz_min, cosz_max, lp__);
      } else {
        current_statement__ = 2;
        coszen = stan::math::lub_constrain(coszen, cosz_min, cosz_max);
      }
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      current_statement__ = 3;
      phi = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        phi = stan::math::lub_constrain(phi, 0, 6.283185307179586, lp__);
      } else {
        current_statement__ = 3;
        phi = stan::math::lub_constrain(phi, 0, 6.283185307179586);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> omega;
      omega = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
      stan::math::fill(omega, DUMMY_VAR__);
      
      local_scalar_t__ zen;
      zen = DUMMY_VAR__;
      
      local_scalar_t__ theta;
      theta = DUMMY_VAR__;
      
      current_statement__ = 7;
      zen = stan::math::acos(coszen);
      current_statement__ = 8;
      theta = (stan::math::pi() - zen);
      current_statement__ = 9;
      assign(omega, cons_list(index_uni(1), nil_index_list()),
        (stan::math::sin(theta) * stan::math::cos(phi)),
        "assigning variable omega");
      current_statement__ = 10;
      assign(omega, cons_list(index_uni(2), nil_index_list()),
        (stan::math::sin(theta) * stan::math::sin(phi)),
        "assigning variable omega");
      current_statement__ = 11;
      assign(omega, cons_list(index_uni(3), nil_index_list()),
        stan::math::cos(theta), "assigning variable omega");
      current_statement__ = 4;
      current_statement__ = 4;
      check_unit_vector(function__, "omega", omega);
      {
        current_statement__ = 12;
        lp_accum__.add(
          stan::math::log(AtmopshericNumuFlux(energy, omega, pstream__)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "atmo_gen_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double energy;
      energy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      energy = in__.scalar();
      current_statement__ = 1;
      energy = stan::math::lub_constrain(energy, Esrc_min, Esrc_max);
      double coszen;
      coszen = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      coszen = in__.scalar();
      current_statement__ = 2;
      coszen = stan::math::lub_constrain(coszen, cosz_min, cosz_max);
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      phi = in__.scalar();
      current_statement__ = 3;
      phi = stan::math::lub_constrain(phi, 0, 6.283185307179586);
      Eigen::Matrix<double, -1, 1> omega;
      omega = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(omega, std::numeric_limits<double>::quiet_NaN());
      
      double zen;
      zen = std::numeric_limits<double>::quiet_NaN();
      
      double theta;
      theta = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(energy);
      vars__.emplace_back(coszen);
      vars__.emplace_back(phi);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      zen = stan::math::acos(coszen);
      current_statement__ = 8;
      theta = (stan::math::pi() - zen);
      current_statement__ = 9;
      assign(omega, cons_list(index_uni(1), nil_index_list()),
        (stan::math::sin(theta) * stan::math::cos(phi)),
        "assigning variable omega");
      current_statement__ = 10;
      assign(omega, cons_list(index_uni(2), nil_index_list()),
        (stan::math::sin(theta) * stan::math::sin(phi)),
        "assigning variable omega");
      current_statement__ = 11;
      assign(omega, cons_list(index_uni(3), nil_index_list()),
        stan::math::cos(theta), "assigning variable omega");
      current_statement__ = 4;
      current_statement__ = 4;
      check_unit_vector(function__, "omega", omega);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          vars__.emplace_back(omega[(sym1__ - 1)]);}
        vars__.emplace_back(zen);
        vars__.emplace_back(theta);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double energy;
      energy = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      energy = context__.vals_r("energy")[(1 - 1)];
      current_statement__ = 1;
      energy = stan::math::lub_free(energy, Esrc_min, Esrc_max);
      double coszen;
      coszen = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      coszen = context__.vals_r("coszen")[(1 - 1)];
      current_statement__ = 2;
      coszen = stan::math::lub_free(coszen, cosz_min, cosz_max);
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      phi = context__.vals_r("phi")[(1 - 1)];
      current_statement__ = 3;
      phi = stan::math::lub_free(phi, 0, 6.283185307179586);
      vars__.emplace_back(energy);
      vars__.emplace_back(coszen);
      vars__.emplace_back(phi);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("energy");
    names__.emplace_back("coszen");
    names__.emplace_back("phi");
    names__.emplace_back("omega");
    names__.emplace_back("zen");
    names__.emplace_back("theta");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "energy");
    param_names__.emplace_back(std::string() + "coszen");
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "zen");
      param_names__.emplace_back(std::string() + "theta");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "energy");
    param_names__.emplace_back(std::string() + "coszen");
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "zen");
      param_names__.emplace_back(std::string() + "theta");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"energy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"coszen\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"zen\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"energy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"coszen\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"transformed_parameters\"},{\"name\":\"zen\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = atmo_gen_model_namespace::atmo_gen_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


