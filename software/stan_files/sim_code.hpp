
// Code generated by stanc v2.25.0
#include <stan/model/model_header.hpp>
namespace sim_code_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 290, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 291, column 0 to column 21)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 292, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 293, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 294, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 295, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 296, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 297, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 298, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 299, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 300, column 0 to column 16)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 301, column 0 to column 24)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 302, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 303, column 0 to column 21)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 304, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 307, column 0 to column 40)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 308, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 309, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 310, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 319, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 318, column 0 to line 320, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 317, column 5 to line 320, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 315, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 314, column 0 to line 316, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 313, column 0 to line 320, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 321, column 0 to column 38)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 324, column 0 to column 50)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 325, column 0 to column 34)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 323, column 0 to line 326, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 322, column 0 to line 326, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 327, column 0 to column 56)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 328, column 0 to column 49)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 329, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 330, column 0 to column 22)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 331, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 342, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 343, column 0 to column 40)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 344, column 0 to column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 341, column 0 to line 345, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 334, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 337, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 336, column 0 to line 338, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 335, column 0 to line 338, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 333, column 0 to line 339, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 332, column 0 to line 345, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 312, column 0 to line 346, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 311, column 0 to line 346, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 347, column 0 to column 54)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 348, column 0 to column 29)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 306, column 0 to line 349, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 305, column 0 to line 349, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 237, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 238, column 21 to column 23)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 238, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 239, column 7 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 239, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 240, column 7 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 240, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 241, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 242, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 243, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 244, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 245, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 246, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 247, column 0 to column 10)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 248, column 7 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 248, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 249, column 28 to column 32)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 249, column 7 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 249, column 0 to column 34)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 250, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 251, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 252, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 256, column 7 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 256, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 257, column 8 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 257, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 258, column 7 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 258, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 259, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 260, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 261, column 0 to column 10)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 262, column 0 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 263, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 264, column 0 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 265, column 0 to column 6)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 266, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 267, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 268, column 0 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 271, column 0 to column 48)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 272, column 0 to column 43)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 273, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 270, column 0 to line 274, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 269, column 0 to line 274, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 275, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 276, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 277, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 278, column 0 to column 16)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 279, column 0 to column 67)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 280, column 0 to column 22)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 281, column 0 to column 42)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 282, column 0 to column 21)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 283, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 284, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 285, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 286, column 0 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 290, column 11 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 292, column 7 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 293, column 7 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 294, column 7 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 295, column 10 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 296, column 10 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 301, column 21 to column 22)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 303, column 7 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 13, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 18, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 16, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 22, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 11, column 45, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 31, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 31, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 32, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 35, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 34, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 34, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 38, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 29, column 39, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 46, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 47, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 49, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 48, column 15, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 48, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 51, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 45, column 39, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 59, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 58, column 25, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 58, column 10, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 56, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 55, column 20, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 55, column 5, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 61, column 5, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 54, column 55, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 68, column 18, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 68, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 69, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 72, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 71, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 70, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 74, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 66, column 0, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 79, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 80, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 81, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 89, column 12, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 95, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 93, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 92, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 91, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 90, column 12, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 88, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 87, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 86, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 85, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 84, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 83, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 82, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 98, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 78, column 0, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 13, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 18, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 17, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 17, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 20, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 21, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 11, column 34, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 30, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 31, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 31, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 32, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 32, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 33, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 33, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 36, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 35, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 35, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 39, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 40, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 42, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 28, column 44, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 52, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 53, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 54, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 55, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 57, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 58, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 59, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 60, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 62, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 63, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 64, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 66, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 65, column 57, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 65, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 61, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 61, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 70, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 50, column 44, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 79, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 80, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 80, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 82, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 83, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 83, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 85, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 86, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 77, column 38, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 96, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 97, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 98, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 99, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 100, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 102, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 103, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 104, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 106, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 94, column 31, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 117, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 118, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 119, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 121, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 122, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 124, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 125, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 126, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 128, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 115, column 47, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 140, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 145, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 144, column 7, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 142, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 141, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 141, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 147, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 138, column 47, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 15, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 17, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 18, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 20, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 21, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 22, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 23, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 38, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 23, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 35, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 28, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 35, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 33, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 45, column 7, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 43, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 30, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 49, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 50, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 51, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 52, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 54, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 56, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 12, column 59, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 7, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 8, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 8, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 12, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 10, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 10, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 15, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 17, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 5, column 124, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 26, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 27, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 27, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 31, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 29, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 29, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 35, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 24, column 98, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 44, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 46, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 48, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 42, column 81, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 57, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 58, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 58, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 60, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 63, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 62, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 62, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 67, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 66, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 66, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 70, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 55, column 50, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 80, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 82, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 85, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 84, column 14, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 84, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 88, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 90, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 78, column 35, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 98, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 99, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 102, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 101, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 101, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 105, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 96, column 35, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 9, column 0 to line 108, column 52)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 109, column 0 to line 121, column 47)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 122, column 0 to column 80)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 123, column 0 to column 92)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 8, column 0 to line 124, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 127, column 0 to column 16)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 128, column 0 to column 10)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 129, column 0 to column 56)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 130, column 0 to column 31)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 131, column 0 to column 73)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 126, column 0 to line 132, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 135, column 0 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 136, column 0 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 143, column 0 to column 58)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 142, column 0 to line 144, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 139, column 0 to column 28)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 138, column 0 to line 140, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 137, column 0 to line 144, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 151, column 0 to column 58)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 150, column 0 to line 152, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 147, column 0 to column 28)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 146, column 0 to line 148, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 145, column 0 to line 152, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 153, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 134, column 0 to line 154, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 157, column 0 to line 158, column 35)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 159, column 0 to column 130)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 156, column 0 to line 160, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 163, column 0 to column 10)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 164, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 165, column 0 to column 50)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 162, column 0 to line 166, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 169, column 0 to line 172, column 68)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 173, column 0 to line 176, column 68)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 177, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 178, column 0 to column 20)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 179, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 182, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 181, column 0 to line 183, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 180, column 0 to line 183, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 186, column 0 to column 145)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 187, column 0 to column 148)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 185, column 0 to line 188, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 184, column 0 to line 188, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 189, column 0 to column 87)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 168, column 0 to line 190, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 193, column 0 to line 194, column 35)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 195, column 0 to column 142)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 192, column 0 to line 196, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 199, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 202, column 0 to column 70)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 201, column 0 to line 203, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 200, column 0 to line 203, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 204, column 0 to column 27)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 198, column 0 to line 205, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 208, column 0 to line 211, column 68)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 212, column 0 to line 215, column 68)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 216, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 217, column 0 to column 20)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 218, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 221, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 220, column 0 to line 222, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 219, column 0 to line 222, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 225, column 0 to column 145)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 226, column 0 to column 148)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 224, column 0 to line 227, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 223, column 0 to line 227, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 228, column 0 to column 103)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 207, column 0 to line 229, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 232, column 0 to column 71)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 231, column 0 to line 233, column 1)"};


template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
trapz(const Eigen::Matrix<T0__, -1, 1>& x_values,
      const Eigen::Matrix<T1__, -1, 1>& y_values, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 115;
    N = num_elements(x_values);
    local_scalar_t__ I;
    I = DUMMY_VAR__;
    
    current_statement__ = 116;
    I = 0;
    current_statement__ = 119;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 117;
      I = (I +
            ((0.5 * (x_values[((i + 1) - 1)] - x_values[(i - 1)])) *
              (y_values[(i - 1)] + y_values[((i + 1) - 1)])));}
    current_statement__ = 120;
    return I;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct trapz_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const Eigen::Matrix<T0__, -1, 1>& x_values,
           const Eigen::Matrix<T1__, -1, 1>& y_values,
           std::ostream* pstream__)  const 
{
return trapz(x_values, y_values, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
linspace(const T0__& A, const T1__& B, const int& N, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 122;
    validate_non_negative_index("output", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> output;
    output = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(output, DUMMY_VAR__);
    
    local_scalar_t__ dx;
    dx = DUMMY_VAR__;
    
    current_statement__ = 124;
    dx = ((B - A) / (N - 1));
    current_statement__ = 127;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 125;
      assign(output, cons_list(index_uni(i), nil_index_list()),
        (A + ((i - 1) * dx)), "assigning variable output");}
    current_statement__ = 128;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct linspace_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& A, const T1__& B, const int& N,
           std::ostream* pstream__)  const 
{
return linspace(A, B, N, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
eval_poly1d(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& coeffs,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 130;
    N = num_elements(coeffs);
    local_scalar_t__ res;
    res = DUMMY_VAR__;
    
    current_statement__ = 131;
    res = 0;
    current_statement__ = 134;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 132;
      res = (res + (coeffs[(i - 1)] * pow(x, (N - i))));}
    current_statement__ = 135;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eval_poly1d_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& coeffs,
           std::ostream* pstream__)  const 
{
return eval_poly1d(x, coeffs, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
truncate_value(const T0__& x, const T1__& min_val, const T2__& max_val,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 142;
    if (logical_lt(x, min_val)) {
      current_statement__ = 140;
      return min_val;
    } else {
      current_statement__ = 139;
      if (logical_gt(x, max_val)) {
        current_statement__ = 137;
        return max_val;
      } 
    }
    current_statement__ = 143;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct truncate_value_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& x, const T1__& min_val, const T2__& max_val,
           std::ostream* pstream__)  const 
{
return truncate_value(x, min_val, max_val, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
generate_bin_edges(const T0__& lower_edge, const T1__& upper_edge,
                   const int& nbins, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 145;
    validate_non_negative_index("binedges", "nbins + 1", (nbins + 1));
    std::vector<local_scalar_t__> binedges;
    binedges = std::vector<local_scalar_t__>((nbins + 1), DUMMY_VAR__);
    
    local_scalar_t__ binwidth;
    binwidth = DUMMY_VAR__;
    
    current_statement__ = 147;
    binwidth = ((upper_edge - lower_edge) / nbins);
    current_statement__ = 150;
    for (int i = 1; i <= (nbins + 1); ++i) {
      current_statement__ = 148;
      assign(binedges, cons_list(index_uni(i), nil_index_list()),
        (lower_edge + ((i - 1) * binwidth)), "assigning variable binedges");}
    current_statement__ = 151;
    return binedges;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct generate_bin_edges_functor__ {
template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
operator()(const T0__& lower_edge, const T1__& upper_edge, const int& nbins,
           std::ostream* pstream__)  const 
{
return generate_bin_edges(lower_edge, upper_edge, nbins, pstream__);
}
};

template <typename T0__, typename T1__>
int
binary_search(const T0__& value, const std::vector<T1__>& binedges,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int L;
    L = std::numeric_limits<int>::min();
    
    current_statement__ = 153;
    L = 1;
    int R;
    R = std::numeric_limits<int>::min();
    
    current_statement__ = 154;
    R = size(binedges);
    int m;
    m = std::numeric_limits<int>::min();
    
    current_statement__ = 168;
    if (logical_lt(value, binedges[(1 - 1)])) {
      current_statement__ = 167;
      return 0;
    } else {
      current_statement__ = 166;
      if (logical_gt(value, binedges[(R - 1)])) {
        current_statement__ = 165;
        return (R + 1);
      } else {
        current_statement__ = 163;
        while (logical_lt(L, (R - 1))) {
          current_statement__ = 156;
          m = ((L + R) / 2);
          current_statement__ = 161;
          if (logical_lt(binedges[(m - 1)], value)) {
            current_statement__ = 160;
            L = m;
          } else {
            current_statement__ = 159;
            if (logical_gt(binedges[(m - 1)], value)) {
              current_statement__ = 158;
              R = m;
            } else {
              current_statement__ = 157;
              return m;
            }
          }
        }
      }
    }
    current_statement__ = 169;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct binary_search_functor__ {
template <typename T0__, typename T1__>
int
operator()(const T0__& value, const std::vector<T1__>& binedges,
           std::ostream* pstream__)  const 
{
return binary_search(value, binedges, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
abs_val(const Eigen::Matrix<T0__, -1, 1>& input_vector,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ av;
    av = DUMMY_VAR__;
    
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 172;
    n = num_elements(input_vector);
    local_scalar_t__ sum_squares;
    sum_squares = DUMMY_VAR__;
    
    current_statement__ = 173;
    sum_squares = 0;
    current_statement__ = 176;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 174;
      sum_squares = (sum_squares +
                      (input_vector[(i - 1)] * input_vector[(i - 1)]));}
    current_statement__ = 177;
    av = stan::math::sqrt(sum_squares);
    current_statement__ = 178;
    return av;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct abs_val_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const Eigen::Matrix<T0__, -1, 1>& input_vector,
           std::ostream* pstream__)  const 
{
return abs_val(input_vector, pstream__);
}
};

template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
sample_orthonormal_to_rng(const Eigen::Matrix<T0__, -1, 1>& mu,
                          RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int dim;
    dim = std::numeric_limits<int>::min();
    
    current_statement__ = 180;
    dim = num_elements(mu);
    current_statement__ = 181;
    validate_non_negative_index("v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> v;
    v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 183;
    validate_non_negative_index("proj_mu_v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> proj_mu_v;
    proj_mu_v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(proj_mu_v, DUMMY_VAR__);
    
    current_statement__ = 185;
    validate_non_negative_index("orthto", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> orthto;
    orthto = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(orthto, DUMMY_VAR__);
    
    current_statement__ = 189;
    for (int i = 1; i <= dim; ++i) {
      current_statement__ = 187;
      assign(v, cons_list(index_uni(i), nil_index_list()),
        normal_rng(0, 1, base_rng__), "assigning variable v");}
    current_statement__ = 190;
    assign(proj_mu_v, nil_index_list(),
      divide(multiply(mu, dot_product(mu, v)), abs_val(mu, pstream__)),
      "assigning variable proj_mu_v");
    current_statement__ = 191;
    assign(orthto, nil_index_list(), subtract(v, proj_mu_v),
      "assigning variable orthto");
    current_statement__ = 192;
    return divide(orthto, abs_val(orthto, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sample_orthonormal_to_rng_functor__ {
template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& mu, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return sample_orthonormal_to_rng(mu, base_rng__, pstream__);
}
};

template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
sample_weight_rng(const T0__& kappa, const int& dim, RNG& base_rng__,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ sdim;
    sdim = DUMMY_VAR__;
    
    current_statement__ = 194;
    sdim = (dim - 1);
    local_scalar_t__ b;
    b = DUMMY_VAR__;
    
    current_statement__ = 195;
    b = (sdim /
          (stan::math::sqrt(((4. * pow(kappa, 2)) + pow(sdim, 2))) +
            (2 * kappa)));
    local_scalar_t__ x;
    x = DUMMY_VAR__;
    
    current_statement__ = 196;
    x = ((1 - b) / (1 + b));
    local_scalar_t__ c;
    c = DUMMY_VAR__;
    
    current_statement__ = 197;
    c = ((kappa * x) + (sdim * stan::math::log((1 - pow(x, 2)))));
    int i;
    i = std::numeric_limits<int>::min();
    
    current_statement__ = 198;
    i = 0;
    local_scalar_t__ z;
    z = DUMMY_VAR__;
    
    local_scalar_t__ w;
    w = DUMMY_VAR__;
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 209;
    while (logical_eq(i, 0)) {
      current_statement__ = 202;
      z = beta_rng((sdim / 2), (sdim / 2), base_rng__);
      current_statement__ = 203;
      w = ((1 - ((1 + b) * z)) / (1 - ((1 - b) * z)));
      current_statement__ = 204;
      u = uniform_rng(0, 1, base_rng__);
      current_statement__ = 207;
      if (logical_gte(
            (((kappa * w) + (sdim * stan::math::log((1 - (x * w))))) - c),
            stan::math::log(u))) {
        current_statement__ = 205;
        i = 1;
      } 
    }
    current_statement__ = 210;
    return w;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sample_weight_rng_functor__ {
template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
operator()(const T0__& kappa, const int& dim, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return sample_weight_rng(kappa, dim, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
vMF_rng(const Eigen::Matrix<T0__, -1, 1>& mu, const T1__& kappa,
        RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int dim;
    dim = std::numeric_limits<int>::min();
    
    current_statement__ = 212;
    dim = num_elements(mu);
    current_statement__ = 213;
    validate_non_negative_index("result", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ w;
    w = DUMMY_VAR__;
    
    current_statement__ = 215;
    w = sample_weight_rng(kappa, dim, base_rng__, pstream__);
    current_statement__ = 216;
    validate_non_negative_index("v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> v;
    v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 217;
    assign(v, nil_index_list(),
      sample_orthonormal_to_rng(mu, base_rng__, pstream__),
      "assigning variable v");
    current_statement__ = 218;
    assign(result, nil_index_list(),
      add(multiply(v, stan::math::sqrt((1 - pow(w, 2)))), multiply(w, mu)),
      "assigning variable result");
    current_statement__ = 219;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vMF_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& mu, const T1__& kappa,
           RNG& base_rng__, std::ostream* pstream__)  const 
{
return vMF_rng(mu, kappa, base_rng__, pstream__);
}
};

template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
sphere_rng(const T0__& radius, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 222;
    u = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ v;
    v = DUMMY_VAR__;
    
    current_statement__ = 223;
    v = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 224;
    phi = ((2 * stan::math::pi()) * u);
    local_scalar_t__ theta;
    theta = DUMMY_VAR__;
    
    current_statement__ = 225;
    theta = stan::math::acos(((2 * v) - 1));
    current_statement__ = 226;
    assign(result, cons_list(index_uni(1), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::cos(phi)),
      "assigning variable result");
    current_statement__ = 227;
    assign(result, cons_list(index_uni(2), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::sin(phi)),
      "assigning variable result");
    current_statement__ = 228;
    assign(result, cons_list(index_uni(3), nil_index_list()),
      (radius * stan::math::cos(theta)), "assigning variable result");
    current_statement__ = 229;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sphere_rng_functor__ {
template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const T0__& radius, RNG& base_rng__, std::ostream* pstream__)  const 
{
return sphere_rng(radius, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
sphere_lim_rng(const T0__& radius, const T1__& v_lim, RNG& base_rng__,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 232;
    u = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ v;
    v = DUMMY_VAR__;
    
    current_statement__ = 233;
    v = uniform_rng(v_lim, 1, base_rng__);
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 234;
    phi = ((2 * stan::math::pi()) * u);
    local_scalar_t__ theta;
    theta = DUMMY_VAR__;
    
    current_statement__ = 235;
    theta = stan::math::acos(((2 * v) - 1));
    current_statement__ = 236;
    assign(result, cons_list(index_uni(1), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::cos(phi)),
      "assigning variable result");
    current_statement__ = 237;
    assign(result, cons_list(index_uni(2), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::sin(phi)),
      "assigning variable result");
    current_statement__ = 238;
    assign(result, cons_list(index_uni(3), nil_index_list()),
      (radius * stan::math::cos(theta)), "assigning variable result");
    current_statement__ = 239;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sphere_lim_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& radius, const T1__& v_lim, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return sphere_lim_rng(radius, v_lim, base_rng__, pstream__);
}
};

template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
vMF_lpdf(const Eigen::Matrix<T0__, -1, 1>& v,
         const Eigen::Matrix<T1__, -1, 1>& mu, const T2__& kappa,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ lprob;
    lprob = DUMMY_VAR__;
    
    current_statement__ = 246;
    if (logical_gt(kappa, 100)) {
      current_statement__ = 244;
      lprob = (((((kappa * dot_product(v, mu)) + stan::math::log(kappa)) -
                  stan::math::log((4 * stan::math::pi()))) - kappa) +
                stan::math::log(2));
    } else {
      current_statement__ = 242;
      lprob = (((kappa * dot_product(v, mu)) + stan::math::log(kappa)) -
                stan::math::log(
                  ((4 * stan::math::pi()) * stan::math::sinh(kappa))));
    }
    current_statement__ = 247;
    return lprob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vMF_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const Eigen::Matrix<T0__, -1, 1>& v,
           const Eigen::Matrix<T1__, -1, 1>& mu, const T2__& kappa,
           std::ostream* pstream__)  const 
{
return vMF_lpdf<propto__>(v, mu, kappa, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
interpolate(const Eigen::Matrix<T0__, -1, 1>& x_values,
            const Eigen::Matrix<T1__, -1, 1>& y_values, const T2__& x,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x_left;
    x_left = DUMMY_VAR__;
    
    local_scalar_t__ y_left;
    y_left = DUMMY_VAR__;
    
    local_scalar_t__ x_right;
    x_right = DUMMY_VAR__;
    
    local_scalar_t__ y_right;
    y_right = DUMMY_VAR__;
    
    local_scalar_t__ dydx;
    dydx = DUMMY_VAR__;
    
    int Nx;
    Nx = std::numeric_limits<int>::min();
    
    current_statement__ = 254;
    Nx = num_elements(x_values);
    local_scalar_t__ xmin;
    xmin = DUMMY_VAR__;
    
    current_statement__ = 255;
    xmin = x_values[(1 - 1)];
    local_scalar_t__ xmax;
    xmax = DUMMY_VAR__;
    
    current_statement__ = 256;
    xmax = x_values[(Nx - 1)];
    int i;
    i = std::numeric_limits<int>::min();
    
    current_statement__ = 257;
    i = 1;
    current_statement__ = 265;
    if ((primitive_value(logical_gt(x, xmax)) || primitive_value(
        logical_lt(x, xmin)))) {
      current_statement__ = 263;
      if (logical_gt(x, xmax)) {
        current_statement__ = 261;
        return y_values[(Nx - 1)];
      } else {
        current_statement__ = 260;
        if (logical_lt(x, xmin)) {
          current_statement__ = 258;
          return y_values[(1 - 1)];
        } 
      }
    } 
    current_statement__ = 272;
    if (logical_gte(x, x_values[((Nx - 1) - 1)])) {
      current_statement__ = 270;
      i = (Nx - 1);
    } else {
      current_statement__ = 268;
      while (logical_gt(x, x_values[((i + 1) - 1)])) {
        current_statement__ = 266;
        i = (i + 1);
      }
    }
    current_statement__ = 273;
    x_left = x_values[(i - 1)];
    current_statement__ = 274;
    y_left = y_values[(i - 1)];
    current_statement__ = 275;
    x_right = x_values[((i + 1) - 1)];
    current_statement__ = 276;
    y_right = y_values[((i + 1) - 1)];
    current_statement__ = 277;
    dydx = ((y_right - y_left) / (x_right - x_left));
    current_statement__ = 278;
    return (y_left + (dydx * (x - x_left)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct interpolate_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const Eigen::Matrix<T0__, -1, 1>& x_values,
           const Eigen::Matrix<T1__, -1, 1>& y_values, const T2__& x,
           std::ostream* pstream__)  const 
{
return interpolate(x_values, y_values, x, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>, -1, 1>
get_exposure_factor_atmo(const T0__& alpha,
                         const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
                         const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
                         const T3__& atmo_integ_val, const T4__& T,
                         const int& Ns, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 280;
    K = (Ns + 2);
    current_statement__ = 281;
    validate_non_negative_index("eps", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> eps;
    eps = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(eps, DUMMY_VAR__);
    
    current_statement__ = 285;
    for (int k = 1; k <= (K - 1); ++k) {
      current_statement__ = 283;
      assign(eps, cons_list(index_uni(k), nil_index_list()),
        interpolate(alpha_grid, integral_grid[(k - 1)], alpha, pstream__),
        "assigning variable eps");}
    current_statement__ = 286;
    assign(eps, cons_list(index_uni(K), nil_index_list()), atmo_integ_val,
      "assigning variable eps");
    current_statement__ = 287;
    return multiply(eps, T);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_exposure_factor_atmo_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>, -1, 1>
operator()(const T0__& alpha, const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
           const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
           const T3__& atmo_integ_val, const T4__& T, const int& Ns,
           std::ostream* pstream__)  const 
{
return get_exposure_factor_atmo(alpha, alpha_grid, integral_grid,
         atmo_integ_val, T, Ns, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__,
T3__>, -1, 1>
get_exposure_factor(const T0__& alpha,
                    const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
                    const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
                    const T3__& T, const int& Ns, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 289;
    K = (Ns + 1);
    current_statement__ = 290;
    validate_non_negative_index("eps", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> eps;
    eps = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(eps, DUMMY_VAR__);
    
    current_statement__ = 294;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 292;
      assign(eps, cons_list(index_uni(k), nil_index_list()),
        (interpolate(alpha_grid, integral_grid[(k - 1)], alpha, pstream__) *
          T), "assigning variable eps");}
    current_statement__ = 295;
    return eps;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_exposure_factor_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__,
T3__>, -1, 1>
operator()(const T0__& alpha, const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
           const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
           const T3__& T, const int& Ns, std::ostream* pstream__)  const 
{
return get_exposure_factor(alpha, alpha_grid, integral_grid, T, Ns,
         pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
get_eps_simple(const T0__& alpha,
               const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
               const Eigen::Matrix<T2__, -1, 1>& integral_grid,
               const T3__& T, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ eps;
    eps = DUMMY_VAR__;
    
    current_statement__ = 298;
    eps = (interpolate(alpha_grid, integral_grid, alpha, pstream__) * T);
    current_statement__ = 299;
    return eps;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_eps_simple_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& alpha, const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
           const Eigen::Matrix<T2__, -1, 1>& integral_grid, const T3__& T,
           std::ostream* pstream__)  const 
{
return get_eps_simple(alpha, alpha_grid, integral_grid, T, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
get_exposure_weights(const Eigen::Matrix<T0__, -1, 1>& F,
                     const Eigen::Matrix<T1__, -1, 1>& eps,
                     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 301;
    K = num_elements(F);
    current_statement__ = 302;
    validate_non_negative_index("weights", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> weights;
    weights = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(weights, DUMMY_VAR__);
    
    local_scalar_t__ normalisation;
    normalisation = DUMMY_VAR__;
    
    current_statement__ = 304;
    normalisation = 0;
    current_statement__ = 307;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 305;
      normalisation = (normalisation + (F[(k - 1)] * eps[(k - 1)]));}
    current_statement__ = 310;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 308;
      assign(weights, cons_list(index_uni(k), nil_index_list()),
        ((F[(k - 1)] * eps[(k - 1)]) / normalisation),
        "assigning variable weights");}
    current_statement__ = 311;
    return weights;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_exposure_weights_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& F,
           const Eigen::Matrix<T1__, -1, 1>& eps, std::ostream* pstream__)  const 
{
return get_exposure_weights(F, eps, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
omega_to_zenith(const Eigen::Matrix<T0__, -1, 1>& omega,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ zenith;
    zenith = DUMMY_VAR__;
    
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 314;
    N = num_elements(omega);
    current_statement__ = 317;
    if (logical_neq(N, 3)) {
      current_statement__ = 315;
      if (pstream__) {
        stan_print(pstream__, "Error: input vector omega must be of 3 dimensions");
        stan_print(pstream__, "\n");
      }
    } 
    current_statement__ = 318;
    zenith = (stan::math::pi() - stan::math::acos(omega[(3 - 1)]));
    current_statement__ = 319;
    return zenith;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct omega_to_zenith_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const Eigen::Matrix<T0__, -1, 1>& omega, std::ostream* pstream__)  const 
{
return omega_to_zenith(omega, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
get_Nex(const Eigen::Matrix<T0__, -1, 1>& F,
        const Eigen::Matrix<T1__, -1, 1>& eps, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 321;
    K = num_elements(F);
    local_scalar_t__ Nex;
    Nex = DUMMY_VAR__;
    
    current_statement__ = 322;
    Nex = 0;
    current_statement__ = 325;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 323;
      Nex = (Nex + (F[(k - 1)] * eps[(k - 1)]));}
    current_statement__ = 326;
    return Nex;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Nex_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const Eigen::Matrix<T0__, -1, 1>& F,
           const Eigen::Matrix<T1__, -1, 1>& eps, std::ostream* pstream__)  const 
{
return get_Nex(F, eps, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
CascadesEffAreaHist(const T0__& value_0, const T1__& value_1,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> hist_array;
    hist_array = std::vector<std::vector<local_scalar_t__>>(50, std::vector<local_scalar_t__>(10, DUMMY_VAR__));
    
    current_statement__ = 328;
    assign(hist_array, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(0.63933587)
      .add(0.74699076).add(0.84415315).add(0.91115512).add(0.9434195)
      .add(0.9526226).add(0.94245776).add(0.92420666).add(0.91262234)
      .add(0.90292905).array()).add(stan::math::array_builder<double>()
      .add(0.75312694).add(0.89986591).add(1.03903315).add(1.13992773)
      .add(1.18523385).add(1.19512779).add(1.18558944).add(1.16613617)
      .add(1.14683526).add(1.13521031).array())
      .add(stan::math::array_builder<double>().add(0.86668994)
      .add(1.07171631).add(1.2735945).add(1.40310027).add(1.47384048)
      .add(1.48576319).add(1.46620855).add(1.44214093).add(1.41817148)
      .add(1.41988222).array()).add(stan::math::array_builder<double>()
      .add(0.98820933).add(1.25923488).add(1.52123705).add(1.70465396)
      .add(1.79688734).add(1.8127543).add(1.79585598).add(1.75837364)
      .add(1.73733324).add(1.74783073).array())
      .add(stan::math::array_builder<double>().add(1.09429869)
      .add(1.44056537).add(1.79056968).add(2.03835659).add(2.16482787)
      .add(2.19305007).add(2.16087646).add(2.11401468).add(2.08067401)
      .add(2.11080854).array()).add(stan::math::array_builder<double>()
      .add(1.19647092).add(1.6385902).add(2.09031435).add(2.41759943)
      .add(2.59559062).add(2.61650251).add(2.57308843).add(2.51067956)
      .add(2.47742148).add(2.51605643).array())
      .add(stan::math::array_builder<double>().add(1.28818452)
      .add(1.82647011).add(2.39515069).add(2.81357161).add(3.0379943)
      .add(3.08294166).add(3.01685881).add(2.94909065).add(2.91483817)
      .add(2.98306113).array()).add(stan::math::array_builder<double>()
      .add(1.36308365).add(2.00150268).add(2.71182579).add(3.25100182)
      .add(3.54864924).add(3.59615912).add(3.53032646).add(3.42431571)
      .add(3.40514701).add(3.47563081).array())
      .add(stan::math::array_builder<double>().add(1.42434438)
      .add(2.16944097).add(3.01875345).add(3.6913052).add(4.06835016)
      .add(4.1516009).add(4.08754622).add(3.96778443).add(3.91636003)
      .add(4.04749926).array()).add(stan::math::array_builder<double>()
      .add(1.46501711).add(2.31878336).add(3.31918235).add(4.15257896)
      .add(4.63066475).add(4.75837482).add(4.70553388).add(4.55143041)
      .add(4.50651146).add(4.64500107).array())
      .add(stan::math::array_builder<double>().add(1.48570103)
      .add(2.44800509).add(3.60953808).add(4.61057054).add(5.20071081)
      .add(5.39452534).add(5.30402955).add(5.16075833).add(5.1101743)
      .add(5.28554261).array()).add(stan::math::array_builder<double>()
      .add(1.4924773).add(2.52906496).add(3.89618125).add(5.0656722)
      .add(5.7863571).add(6.05304606).add(5.97780527).add(5.81623624)
      .add(5.75598427).add(5.97406881).array())
      .add(stan::math::array_builder<double>().add(1.4807675).add(2.59340023)
      .add(4.12604982).add(5.48506006).add(6.3907092).add(6.73131402)
      .add(6.68355493).add(6.52482022).add(6.48148587).add(6.69992242)
      .array()).add(stan::math::array_builder<double>().add(1.45973425)
      .add(2.64374766).add(4.31722793).add(5.87204838).add(6.95289258)
      .add(7.42156215).add(7.42791468).add(7.25978499).add(7.17707707)
      .add(7.42223696).array()).add(stan::math::array_builder<double>()
      .add(1.41995373).add(2.65391585).add(4.43347491).add(6.21345543)
      .add(7.49716037).add(8.11406254).add(8.1797899).add(8.00457225)
      .add(7.91195588).add(8.21121341).array())
      .add(stan::math::array_builder<double>().add(1.36877211)
      .add(2.63523327).add(4.55009145).add(6.55900729).add(8.05323634)
      .add(8.81563625).add(8.93728358).add(8.77860548).add(8.71242469)
      .add(9.03219747).array()).add(stan::math::array_builder<double>()
      .add(1.31928717).add(2.5908894).add(4.58991594).add(6.78727526)
      .add(8.53581672).add(9.45310066).add(9.71765285).add(9.61139485)
      .add(9.51436578).add(9.89765037).array())
      .add(stan::math::array_builder<double>().add(1.26328218)
      .add(2.51827032).add(4.58601699).add(6.98431335).add(8.94300039)
      .add(10.11174716).add(10.42085247).add(10.33693256).add(10.30607634)
      .add(10.69869428).array()).add(stan::math::array_builder<double>()
      .add(1.21228083).add(2.44792011).add(4.54371981).add(7.09316662)
      .add(9.29614525).add(10.6802837).add(11.21932132).add(11.17439373)
      .add(11.16694532).add(11.54508155).array())
      .add(stan::math::array_builder<double>().add(1.16351122)
      .add(2.35402482).add(4.47955415).add(7.13889074).add(9.64854924)
      .add(11.30671618).add(12.01818996).add(12.02007764).add(11.99092452)
      .add(12.41127302).array()).add(stan::math::array_builder<double>()
      .add(1.12318372).add(2.25769788).add(4.36952198).add(7.13019295)
      .add(9.89018746).add(11.86036594).add(12.77026956).add(12.91759393)
      .add(12.91532639).add(13.37284986).array())
      .add(stan::math::array_builder<double>().add(1.08462693)
      .add(2.16207993).add(4.21923882).add(7.0526861).add(10.03775776)
      .add(12.35846345).add(13.49874654).add(13.81220965).add(13.82612997)
      .add(14.22496605).array()).add(stan::math::array_builder<double>()
      .add(1.05158219).add(2.06445884).add(4.05685351).add(6.93969285)
      .add(10.19431461).add(12.86189222).add(14.39488329).add(14.75876209)
      .add(14.80611133).add(15.1229516).array())
      .add(stan::math::array_builder<double>().add(1.04038193)
      .add(1.96763407).add(3.86702487).add(6.78289188).add(10.28525027)
      .add(13.3487905).add(15.21131168).add(15.8822746).add(15.79212598)
      .add(16.03052558).array()).add(stan::math::array_builder<double>()
      .add(1.03411561).add(1.89216214).add(3.67457179).add(6.63130032)
      .add(10.28894141).add(13.86858935).add(16.12638944).add(17.05741609)
      .add(16.99217049).add(16.91292328).array())
      .add(stan::math::array_builder<double>().add(1.04452452).add(1.8144775)
      .add(3.46682629).add(6.37184973).add(10.35581405).add(14.37225355)
      .add(17.25455995).add(18.34809773).add(18.2527227).add(17.92464898)
      .array()).add(stan::math::array_builder<double>().add(1.07607433)
      .add(1.74667345).add(3.26914609).add(6.14688837).add(10.34999682)
      .add(14.90247159).add(18.35974573).add(19.91647616).add(19.56958117)
      .add(18.96266118).array()).add(stan::math::array_builder<double>()
      .add(1.13098901).add(1.70274093).add(3.10354625).add(5.89321637)
      .add(10.35730956).add(15.45701403).add(19.65364479).add(21.64562864)
      .add(21.26012857).add(20.06535467).array())
      .add(stan::math::array_builder<double>().add(1.2070938).add(1.65809431)
      .add(2.92266618).add(5.6775237).add(10.30375921).add(16.07126467)
      .add(21.03936989).add(23.73097227).add(23.19429886).add(21.16503933)
      .array()).add(stan::math::array_builder<double>().add(1.31670727)
      .add(1.64549403).add(2.75928324).add(5.45349351).add(10.2680503)
      .add(16.62876047).add(22.78455798).add(26.27179056).add(25.51733177)
      .add(22.60677157).array()).add(stan::math::array_builder<double>()
      .add(1.48301192).add(1.63914536).add(2.61834626).add(5.27933923)
      .add(10.25672602).add(17.28163126).add(24.60271648).add(29.23541931)
      .add(28.23802368).add(24.19707741).array())
      .add(stan::math::array_builder<double>().add(0.5270135).add(0.55368765)
      .add(0.85987952).add(1.73218165).add(3.44363392).add(5.89115051)
      .add(8.64887516).add(10.36626977).add(9.93317012).add(8.37561911)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).add(stan::math::array_builder<double>().add(0.).add(0.)
      .add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.).add(0.)
      .array()).array(), "assigning variable hist_array");
    std::vector<local_scalar_t__> hist_edge_0;
    hist_edge_0 = std::vector<local_scalar_t__>(51, DUMMY_VAR__);
    
    current_statement__ = 329;
    assign(hist_edge_0, nil_index_list(), stan::math::array_builder<double>()
      .add(3.00000000e+04).add(3.61059544e+04).add(4.34546648e+04)
      .add(5.22990716e+04).add(6.29435965e+04).add(7.57546209e+04)
      .add(9.11730963e+04).add(1.09729722e+05).add(1.32063211e+05)
      .add(1.58942276e+05).add(1.91292086e+05).add(2.30226112e+05)
      .add(2.77084450e+05).add(3.33479951e+05).add(4.01353730e+05)
      .add(4.83041983e+05).add(5.81356394e+05).add(6.99680915e+05)
      .add(8.42088241e+05).add(1.01347999e+06).add(1.21975541e+06)
      .add(1.46801444e+06).add(1.76680208e+06).add(2.12640252e+06)
      .add(2.55919308e+06).add(3.08007029e+06).add(3.70696258e+06)
      .add(4.46144740e+06).add(5.36949388e+06).add(6.46235672e+06)
      .add(7.77765190e+06).add(9.36065150e+06).add(1.12658419e+07)
      .add(1.35587991e+07).add(1.63184461e+07).add(1.96397690e+07)
      .add(2.36370869e+07).add(2.84479860e+07).add(3.42380563e+07)
      .add(4.12065900e+07).add(4.95934420e+07).add(5.96872852e+07)
      .add(7.18355466e+07).add(8.64563657e+07).add(1.04052987e+08)
      .add(1.25231080e+08).add(1.50719589e+08).add(1.81395820e+08)
      .add(2.18315640e+08).add(2.62749819e+08).add(3.16227766e+08).array(),
      "assigning variable hist_edge_0");
    std::vector<local_scalar_t__> hist_edge_1;
    hist_edge_1 = std::vector<local_scalar_t__>(11, DUMMY_VAR__);
    
    current_statement__ = 330;
    assign(hist_edge_1, nil_index_list(), stan::math::array_builder<double>()
      .add(-1.).add(-0.8).add(-0.6).add(-0.4).add(-0.2).add(0.).add(0.2)
      .add(0.4).add(0.6).add(0.8).add(1.).array(),
      "assigning variable hist_edge_1");
    current_statement__ = 331;
    return hist_array[(binary_search(value_0, hist_edge_0, pstream__) - 1)][
        (binary_search(value_1, hist_edge_1, pstream__) - 1)];
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadesEffAreaHist_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& value_0, const T1__& value_1, std::ostream* pstream__)  const 
{
return CascadesEffAreaHist(value_0, value_1, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename RNG>
stan::promote_args_t<T0__, T1__,
T2__>
spectrum_rng(const T0__& alpha, const T1__& e_low, const T2__& e_up,
             RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ uni_sample;
    uni_sample = DUMMY_VAR__;
    
    local_scalar_t__ norm;
    norm = DUMMY_VAR__;
    
    current_statement__ = 335;
    norm = ((1 - alpha) / (pow(e_up, (1 - alpha)) - pow(e_low, (1 - alpha))));
    current_statement__ = 336;
    uni_sample = uniform_rng(0, 1, base_rng__);
    current_statement__ = 337;
    return pow(
             (((uni_sample * (1 - alpha)) / norm) + pow(e_low, (1 - alpha))),
             (1 / (1 - alpha)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct spectrum_rng_functor__ {
template <typename T0__, typename T1__, typename T2__, typename RNG>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& alpha, const T1__& e_low, const T2__& e_up,
           RNG& base_rng__, std::ostream* pstream__)  const 
{
return spectrum_rng(alpha, e_low, e_up, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
flux_conv(const T0__& alpha, const T1__& e_low, const T2__& e_up,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ f1;
    f1 = DUMMY_VAR__;
    
    local_scalar_t__ f2;
    f2 = DUMMY_VAR__;
    
    current_statement__ = 345;
    if (logical_eq(alpha, 1.0)) {
      current_statement__ = 343;
      f1 = (stan::math::log(e_up) - stan::math::log(e_low));
    } else {
      current_statement__ = 341;
      f1 = ((1 / (1 - alpha)) *
             (pow(e_up, (1 - alpha)) - pow(e_low, (1 - alpha))));
    }
    current_statement__ = 350;
    if (logical_eq(alpha, 2.0)) {
      current_statement__ = 348;
      f2 = (stan::math::log(e_up) - stan::math::log(e_low));
    } else {
      current_statement__ = 346;
      f2 = ((1 / (2 - alpha)) *
             (pow(e_up, (2 - alpha)) - pow(e_low, (2 - alpha))));
    }
    current_statement__ = 351;
    return (f1 / f2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct flux_conv_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& alpha, const T1__& e_low, const T2__& e_up,
           std::ostream* pstream__)  const 
{
return flux_conv(alpha, e_low, e_up, pstream__);
}
};

template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
CascadesAngularResolution_rng(const T0__& true_energy,
                              const Eigen::Matrix<T1__, -1, 1>& true_dir,
                              RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> CascadesAngularResolutionPolyCoeffs;
    CascadesAngularResolutionPolyCoeffs = Eigen::Matrix<local_scalar_t__, -1, 1>(6);
    stan::math::fill(CascadesAngularResolutionPolyCoeffs, DUMMY_VAR__);
    
    current_statement__ = 353;
    assign(CascadesAngularResolutionPolyCoeffs, nil_index_list(),
      transpose(stan::math::to_row_vector(stan::math::array_builder<double>()
        .add(-4.84839608e-01).add(3.59082699e+00).add(4.39765349e+01)
        .add(-4.86964043e+02).add(1.50499694e+03).add(-1.48474342e+03)
        .array())), "assigning variable CascadesAngularResolutionPolyCoeffs");
    current_statement__ = 354;
    return vMF_rng(true_dir,
             eval_poly1d(
               stan::math::log10(
                 truncate_value(true_energy, 100.0, 100000000.0, pstream__)),
               CascadesAngularResolutionPolyCoeffs, pstream__), base_rng__, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadesAngularResolution_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& true_energy,
           const Eigen::Matrix<T1__, -1, 1>& true_dir, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return CascadesAngularResolution_rng(true_energy, true_dir, base_rng__,
         pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename RNG>
stan::promote_args_t<T0__, T1__,
T2__>
c_energy_res_mix_rng(const Eigen::Matrix<T0__, -1, 1>& means,
                     const Eigen::Matrix<T1__, -1, 1>& sigmas,
                     const Eigen::Matrix<T2__, -1, 1>& weights,
                     RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int index;
    index = std::numeric_limits<int>::min();
    
    current_statement__ = 357;
    index = categorical_rng(weights, base_rng__);
    current_statement__ = 358;
    return lognormal_rng(means[(index - 1)], sigmas[(index - 1)], base_rng__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct c_energy_res_mix_rng_functor__ {
template <typename T0__, typename T1__, typename T2__, typename RNG>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const Eigen::Matrix<T0__, -1, 1>& means,
           const Eigen::Matrix<T1__, -1, 1>& sigmas,
           const Eigen::Matrix<T2__, -1, 1>& weights, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return c_energy_res_mix_rng(means, sigmas, weights, base_rng__, pstream__);
}
};

template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
CascadeEnergyResolution_rng(const T0__& true_energy, RNG& base_rng__,
                            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> CascadesEnergyResolutionMuPolyCoeffs;
    CascadesEnergyResolutionMuPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(4, std::vector<local_scalar_t__>(4, DUMMY_VAR__));
    
    current_statement__ = 360;
    assign(CascadesEnergyResolutionMuPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(6.76407765e-02)
      .add(-1.12716962e+00).add(6.89131295e+00).add(-1.02474116e+01).array())
      .add(stan::math::array_builder<double>().add(8.54785344e-03)
      .add(-1.34538541e-01).add(1.64205931e+00).add(-1.11928361e+00).array())
      .add(stan::math::array_builder<double>().add(7.55433894e-03)
      .add(-1.41657645e-01).add(1.88698773e+00).add(-1.87465399e+00).array())
      .add(stan::math::array_builder<double>().add(1.07971639e-04)
      .add(8.61965387e-04).add(9.79372612e-01).add(4.84957277e-02).array())
      .array(), "assigning variable CascadesEnergyResolutionMuPolyCoeffs");
    std::vector<std::vector<local_scalar_t__>> CascadesEnergyResolutionSdPolyCoeffs;
    CascadesEnergyResolutionSdPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(4, std::vector<local_scalar_t__>(4, DUMMY_VAR__));
    
    current_statement__ = 361;
    assign(CascadesEnergyResolutionSdPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(-6.26109056e-03)
      .add(1.12494521e-01).add(-6.46590841e-01).add(1.25275718e+00).array())
      .add(stan::math::array_builder<double>().add(-1.21679598e-03)
      .add(2.06090980e-02).add(-1.09975316e-01).add(2.10508185e-01).array())
      .add(stan::math::array_builder<double>().add(-1.14642242e-03)
      .add(2.09050768e-02).add(-1.26574688e-01).add(2.64473098e-01).array())
      .add(stan::math::array_builder<double>().add(8.20302891e-11)
      .add(-1.40009717e-09).add(7.85263331e-09).add(9.99998556e-03).array())
      .array(), "assigning variable CascadesEnergyResolutionSdPolyCoeffs");
    std::vector<local_scalar_t__> mu_e_res;
    mu_e_res = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> sigma_e_res;
    sigma_e_res = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> weights;
    weights = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
    stan::math::fill(weights, DUMMY_VAR__);
    
    current_statement__ = 367;
    for (int i = 1; i <= 4; ++i) {
      current_statement__ = 365;
      assign(weights, cons_list(index_uni(i), nil_index_list()), (1.0 / 4),
        "assigning variable weights");}
    current_statement__ = 371;
    for (int i = 1; i <= 4; ++i) {
      current_statement__ = 368;
      assign(mu_e_res, cons_list(index_uni(i), nil_index_list()),
        eval_poly1d(
          stan::math::log10(
            truncate_value(true_energy, 30000.00000000001,
              10000000.0, pstream__)),
          to_vector(CascadesEnergyResolutionMuPolyCoeffs[(i - 1)]), pstream__),
        "assigning variable mu_e_res");
      current_statement__ = 369;
      assign(sigma_e_res, cons_list(index_uni(i), nil_index_list()),
        eval_poly1d(
          stan::math::log10(
            truncate_value(true_energy, 30000.00000000001,
              10000000.0, pstream__)),
          to_vector(CascadesEnergyResolutionSdPolyCoeffs[(i - 1)]), pstream__),
        "assigning variable sigma_e_res");}
    current_statement__ = 372;
    return c_energy_res_mix_rng(to_vector(stan::math::log(mu_e_res)),
             to_vector(sigma_e_res), weights, base_rng__, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadeEnergyResolution_rng_functor__ {
template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
operator()(const T0__& true_energy, RNG& base_rng__, std::ostream* pstream__)  const 
{
return CascadeEnergyResolution_rng(true_energy, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
CascadesAngularResolution(const T0__& true_energy,
                          const Eigen::Matrix<T1__, -1, 1>& true_dir,
                          const Eigen::Matrix<T2__, -1, 1>& reco_dir,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> CascadesAngularResolutionPolyCoeffs;
    CascadesAngularResolutionPolyCoeffs = Eigen::Matrix<local_scalar_t__, -1, 1>(6);
    stan::math::fill(CascadesAngularResolutionPolyCoeffs, DUMMY_VAR__);
    
    current_statement__ = 374;
    assign(CascadesAngularResolutionPolyCoeffs, nil_index_list(),
      transpose(stan::math::to_row_vector(stan::math::array_builder<double>()
        .add(-4.84839608e-01).add(3.59082699e+00).add(4.39765349e+01)
        .add(-4.86964043e+02).add(1.50499694e+03).add(-1.48474342e+03)
        .array())), "assigning variable CascadesAngularResolutionPolyCoeffs");
    current_statement__ = 375;
    return vMF_lpdf<false>(reco_dir, true_dir,
             eval_poly1d(
               stan::math::log10(
                 truncate_value(true_energy, 100.0, 100000000.0, pstream__)),
               CascadesAngularResolutionPolyCoeffs, pstream__), pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadesAngularResolution_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& true_energy,
           const Eigen::Matrix<T1__, -1, 1>& true_dir,
           const Eigen::Matrix<T2__, -1, 1>& reco_dir,
           std::ostream* pstream__)  const 
{
return CascadesAngularResolution(true_energy, true_dir, reco_dir, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
c_energy_res_mix(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& means,
                 const Eigen::Matrix<T2__, -1, 1>& sigmas,
                 const Eigen::Matrix<T3__, -1, 1>& weights,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
    stan::math::fill(result, DUMMY_VAR__);
    
    current_statement__ = 380;
    for (int i = 1; i <= 4; ++i) {
      current_statement__ = 378;
      assign(result, cons_list(index_uni(i), nil_index_list()),
        (stan::math::log(weights)[(i - 1)] +
          lognormal_lpdf<false>(x, means[(i - 1)], sigmas[(i - 1)])),
        "assigning variable result");}
    current_statement__ = 381;
    return log_sum_exp(result);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct c_energy_res_mix_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& means,
           const Eigen::Matrix<T2__, -1, 1>& sigmas,
           const Eigen::Matrix<T3__, -1, 1>& weights, std::ostream* pstream__)  const 
{
return c_energy_res_mix(x, means, sigmas, weights, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
CascadeEnergyResolution(const T0__& true_energy, const T1__& reco_energy,
                        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> CascadesEnergyResolutionMuPolyCoeffs;
    CascadesEnergyResolutionMuPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(4, std::vector<local_scalar_t__>(4, DUMMY_VAR__));
    
    current_statement__ = 383;
    assign(CascadesEnergyResolutionMuPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(6.76407765e-02)
      .add(-1.12716962e+00).add(6.89131295e+00).add(-1.02474116e+01).array())
      .add(stan::math::array_builder<double>().add(8.54785344e-03)
      .add(-1.34538541e-01).add(1.64205931e+00).add(-1.11928361e+00).array())
      .add(stan::math::array_builder<double>().add(7.55433894e-03)
      .add(-1.41657645e-01).add(1.88698773e+00).add(-1.87465399e+00).array())
      .add(stan::math::array_builder<double>().add(1.07971639e-04)
      .add(8.61965387e-04).add(9.79372612e-01).add(4.84957277e-02).array())
      .array(), "assigning variable CascadesEnergyResolutionMuPolyCoeffs");
    std::vector<std::vector<local_scalar_t__>> CascadesEnergyResolutionSdPolyCoeffs;
    CascadesEnergyResolutionSdPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(4, std::vector<local_scalar_t__>(4, DUMMY_VAR__));
    
    current_statement__ = 384;
    assign(CascadesEnergyResolutionSdPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(-6.26109056e-03)
      .add(1.12494521e-01).add(-6.46590841e-01).add(1.25275718e+00).array())
      .add(stan::math::array_builder<double>().add(-1.21679598e-03)
      .add(2.06090980e-02).add(-1.09975316e-01).add(2.10508185e-01).array())
      .add(stan::math::array_builder<double>().add(-1.14642242e-03)
      .add(2.09050768e-02).add(-1.26574688e-01).add(2.64473098e-01).array())
      .add(stan::math::array_builder<double>().add(8.20302891e-11)
      .add(-1.40009717e-09).add(7.85263331e-09).add(9.99998556e-03).array())
      .array(), "assigning variable CascadesEnergyResolutionSdPolyCoeffs");
    std::vector<local_scalar_t__> mu_e_res;
    mu_e_res = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> sigma_e_res;
    sigma_e_res = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> weights;
    weights = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
    stan::math::fill(weights, DUMMY_VAR__);
    
    current_statement__ = 390;
    for (int i = 1; i <= 4; ++i) {
      current_statement__ = 388;
      assign(weights, cons_list(index_uni(i), nil_index_list()), (1.0 / 4),
        "assigning variable weights");}
    current_statement__ = 394;
    for (int i = 1; i <= 4; ++i) {
      current_statement__ = 391;
      assign(mu_e_res, cons_list(index_uni(i), nil_index_list()),
        eval_poly1d(
          stan::math::log10(
            truncate_value(true_energy, 30000.00000000001,
              10000000.0, pstream__)),
          to_vector(CascadesEnergyResolutionMuPolyCoeffs[(i - 1)]), pstream__),
        "assigning variable mu_e_res");
      current_statement__ = 392;
      assign(sigma_e_res, cons_list(index_uni(i), nil_index_list()),
        eval_poly1d(
          stan::math::log10(
            truncate_value(true_energy, 30000.00000000001,
              10000000.0, pstream__)),
          to_vector(CascadesEnergyResolutionSdPolyCoeffs[(i - 1)]), pstream__),
        "assigning variable sigma_e_res");}
    current_statement__ = 395;
    return c_energy_res_mix(stan::math::log10(reco_energy),
             to_vector(stan::math::log(mu_e_res)), to_vector(sigma_e_res),
             weights, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadeEnergyResolution_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& true_energy, const T1__& reco_energy,
           std::ostream* pstream__)  const 
{
return CascadeEnergyResolution(true_energy, reco_energy, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
CascadesEffectiveArea(const T0__& true_energy,
                      const Eigen::Matrix<T1__, -1, 1>& true_dir,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 397;
    return CascadesEffAreaHist(true_energy,
             stan::math::cos(
               (stan::math::pi() - stan::math::acos(true_dir[(3 - 1)]))), pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadesEffectiveArea_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& true_energy,
           const Eigen::Matrix<T1__, -1, 1>& true_dir,
           std::ostream* pstream__)  const 
{
return CascadesEffectiveArea(true_energy, true_dir, pstream__);
}
};

class sim_code_model final : public model_base_crtp<sim_code_model> {

 private:
  int Ns;
  std::vector<Eigen::Matrix<double, -1, 1>> varpi;
  Eigen::Matrix<double, -1, 1> D;
  Eigen::Matrix<double, -1, 1> z;
  double alpha;
  double Edet_min;
  double Esrc_min;
  double Esrc_max;
  double L;
  double F_diff;
  int Ngrid;
  Eigen::Matrix<double, -1, 1> alpha_grid;
  std::vector<Eigen::Matrix<double, -1, 1>> integral_grid;
  double aeff_max;
  double v_lim;
  double T;
  Eigen::Matrix<double, -1, 1> F;
  Eigen::Matrix<double, -1, 1> w_exposure;
  Eigen::Matrix<double, -1, 1> eps;
  int track_type;
  int cascade_type;
  double Ftot;
  double Fs;
  double f;
  double Nex;
  int N;
 
 public:
  ~sim_code_model() final { }
  
  std::string model_name() const final { return "sim_code_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 v2.25.0");
    stanc_info.push_back("stancflags = --include_paths=/Users/fran/projects/hierarchical_nu/software/stan_files");
    return stanc_info;
  }
  
  
  sim_code_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "sim_code_model_namespace::sim_code_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 52;
      context__.validate_dims("data initialization","Ns","int",
          context__.to_vec());
      Ns = std::numeric_limits<int>::min();
      
      current_statement__ = 52;
      Ns = context__.vals_i("Ns")[(1 - 1)];
      current_statement__ = 53;
      validate_non_negative_index("varpi", "Ns", Ns);
      current_statement__ = 54;
      context__.validate_dims("data initialization","varpi","double",
          context__.to_vec(Ns, 3));
      varpi = std::vector<Eigen::Matrix<double, -1, 1>>(Ns, Eigen::Matrix<double, -1, 1>(3));
      stan::math::fill(varpi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> varpi_flat__;
        current_statement__ = 54;
        assign(varpi_flat__, nil_index_list(), context__.vals_r("varpi"),
          "assigning variable varpi_flat__");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 54;
          for (int sym2__ = 1; sym2__ <= Ns; ++sym2__) {
            current_statement__ = 54;
            assign(varpi,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              varpi_flat__[(pos__ - 1)], "assigning variable varpi");
            current_statement__ = 54;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 54;
      for (int sym1__ = 1; sym1__ <= Ns; ++sym1__) {
        current_statement__ = 54;
        current_statement__ = 54;
        check_unit_vector(function__, "varpi[sym1__]", varpi[(sym1__ - 1)]);}
      current_statement__ = 55;
      validate_non_negative_index("D", "Ns", Ns);
      current_statement__ = 56;
      context__.validate_dims("data initialization","D","double",
          context__.to_vec(Ns));
      D = Eigen::Matrix<double, -1, 1>(Ns);
      stan::math::fill(D, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> D_flat__;
        current_statement__ = 56;
        assign(D_flat__, nil_index_list(), context__.vals_r("D"),
          "assigning variable D_flat__");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= Ns; ++sym1__) {
          current_statement__ = 56;
          assign(D, cons_list(index_uni(sym1__), nil_index_list()),
            D_flat__[(pos__ - 1)], "assigning variable D");
          current_statement__ = 56;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 57;
      validate_non_negative_index("z", "Ns + 1", (Ns + 1));
      current_statement__ = 58;
      context__.validate_dims("data initialization","z","double",
          context__.to_vec((Ns + 1)));
      z = Eigen::Matrix<double, -1, 1>((Ns + 1));
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 58;
        assign(z_flat__, nil_index_list(), context__.vals_r("z"),
          "assigning variable z_flat__");
        current_statement__ = 58;
        pos__ = 1;
        current_statement__ = 58;
        for (int sym1__ = 1; sym1__ <= (Ns + 1); ++sym1__) {
          current_statement__ = 58;
          assign(z, cons_list(index_uni(sym1__), nil_index_list()),
            z_flat__[(pos__ - 1)], "assigning variable z");
          current_statement__ = 58;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 59;
      context__.validate_dims("data initialization","alpha","double",
          context__.to_vec());
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 59;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      current_statement__ = 60;
      context__.validate_dims("data initialization","Edet_min","double",
          context__.to_vec());
      Edet_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 60;
      Edet_min = context__.vals_r("Edet_min")[(1 - 1)];
      current_statement__ = 61;
      context__.validate_dims("data initialization","Esrc_min","double",
          context__.to_vec());
      Esrc_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 61;
      Esrc_min = context__.vals_r("Esrc_min")[(1 - 1)];
      current_statement__ = 62;
      context__.validate_dims("data initialization","Esrc_max","double",
          context__.to_vec());
      Esrc_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 62;
      Esrc_max = context__.vals_r("Esrc_max")[(1 - 1)];
      current_statement__ = 63;
      context__.validate_dims("data initialization","L","double",
          context__.to_vec());
      L = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 63;
      L = context__.vals_r("L")[(1 - 1)];
      current_statement__ = 64;
      context__.validate_dims("data initialization","F_diff","double",
          context__.to_vec());
      F_diff = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 64;
      F_diff = context__.vals_r("F_diff")[(1 - 1)];
      current_statement__ = 65;
      context__.validate_dims("data initialization","Ngrid","int",
          context__.to_vec());
      Ngrid = std::numeric_limits<int>::min();
      
      current_statement__ = 65;
      Ngrid = context__.vals_i("Ngrid")[(1 - 1)];
      current_statement__ = 66;
      validate_non_negative_index("alpha_grid", "Ngrid", Ngrid);
      current_statement__ = 67;
      context__.validate_dims("data initialization","alpha_grid","double",
          context__.to_vec(Ngrid));
      alpha_grid = Eigen::Matrix<double, -1, 1>(Ngrid);
      stan::math::fill(alpha_grid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_grid_flat__;
        current_statement__ = 67;
        assign(alpha_grid_flat__, nil_index_list(),
          context__.vals_r("alpha_grid"),
          "assigning variable alpha_grid_flat__");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
          current_statement__ = 67;
          assign(alpha_grid, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_grid_flat__[(pos__ - 1)], "assigning variable alpha_grid");
          current_statement__ = 67;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 68;
      validate_non_negative_index("integral_grid", "Ns + 1", (Ns + 1));
      current_statement__ = 69;
      validate_non_negative_index("integral_grid", "Ngrid", Ngrid);
      current_statement__ = 70;
      context__.validate_dims("data initialization","integral_grid","double",
          context__.to_vec((Ns + 1), Ngrid));
      integral_grid = std::vector<Eigen::Matrix<double, -1, 1>>((Ns + 1), Eigen::Matrix<double, -1, 1>(Ngrid));
      stan::math::fill(integral_grid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> integral_grid_flat__;
        current_statement__ = 70;
        assign(integral_grid_flat__, nil_index_list(),
          context__.vals_r("integral_grid"),
          "assigning variable integral_grid_flat__");
        current_statement__ = 70;
        pos__ = 1;
        current_statement__ = 70;
        for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
          current_statement__ = 70;
          for (int sym2__ = 1; sym2__ <= (Ns + 1); ++sym2__) {
            current_statement__ = 70;
            assign(integral_grid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              integral_grid_flat__[(pos__ - 1)],
              "assigning variable integral_grid");
            current_statement__ = 70;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 71;
      context__.validate_dims("data initialization","aeff_max","double",
          context__.to_vec());
      aeff_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 71;
      aeff_max = context__.vals_r("aeff_max")[(1 - 1)];
      current_statement__ = 72;
      context__.validate_dims("data initialization","v_lim","double",
          context__.to_vec());
      v_lim = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 72;
      v_lim = context__.vals_r("v_lim")[(1 - 1)];
      current_statement__ = 73;
      context__.validate_dims("data initialization","T","double",
          context__.to_vec());
      T = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 73;
      T = context__.vals_r("T")[(1 - 1)];
      current_statement__ = 74;
      validate_non_negative_index("F", "Ns + 1", (Ns + 1));
      current_statement__ = 75;
      F = Eigen::Matrix<double, -1, 1>((Ns + 1));
      stan::math::fill(F, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 76;
      validate_non_negative_index("w_exposure", "Ns + 1", (Ns + 1));
      current_statement__ = 77;
      w_exposure = Eigen::Matrix<double, -1, 1>((Ns + 1));
      stan::math::fill(w_exposure, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 78;
      validate_non_negative_index("eps", "Ns + 1", (Ns + 1));
      current_statement__ = 79;
      eps = Eigen::Matrix<double, -1, 1>((Ns + 1));
      stan::math::fill(eps, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 80;
      track_type = std::numeric_limits<int>::min();
      
      current_statement__ = 81;
      cascade_type = std::numeric_limits<int>::min();
      
      current_statement__ = 82;
      Ftot = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 83;
      Fs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 84;
      f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 85;
      Nex = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 86;
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 87;
      track_type = 0;
      current_statement__ = 88;
      cascade_type = 1;
      current_statement__ = 89;
      Fs = 0.0;
      current_statement__ = 94;
      for (int k = 1; k <= Ns; ++k) {
        current_statement__ = 90;
        assign(F, cons_list(index_uni(k), nil_index_list()),
          (L / ((4 * stan::math::pi()) * pow((D[(k - 1)] * 3.086e+22), 2))),
          "assigning variable F");
        current_statement__ = 91;
        assign(F, cons_list(index_uni(k), nil_index_list()),
          (F[(k - 1)] * flux_conv(alpha, Esrc_min, Esrc_max, pstream__)),
          "assigning variable F");
        current_statement__ = 92;
        Fs = (Fs + F[(k - 1)]);}
      current_statement__ = 95;
      assign(F, cons_list(index_uni((Ns + 1)), nil_index_list()), F_diff,
        "assigning variable F");
      current_statement__ = 96;
      Ftot = (Fs + F_diff);
      current_statement__ = 97;
      f = (Fs / Ftot);
      current_statement__ = 98;
      if (pstream__) {
        stan_print(pstream__, "f: ");
        stan_print(pstream__, f);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 99;
      assign(eps, nil_index_list(),
        get_exposure_factor(alpha, alpha_grid, integral_grid, T,
          Ns, pstream__), "assigning variable eps");
      current_statement__ = 100;
      Nex = get_Nex(F, eps, pstream__);
      current_statement__ = 101;
      assign(w_exposure, nil_index_list(),
        get_exposure_weights(F, eps, pstream__),
        "assigning variable w_exposure");
      current_statement__ = 102;
      N = poisson_rng(Nex, base_rng__);
      current_statement__ = 103;
      if (pstream__) {
        stan_print(pstream__, w_exposure);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 104;
      if (pstream__) {
        stan_print(pstream__, Ngrid);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 105;
      if (pstream__) {
        stan_print(pstream__, Nex);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 106;
      if (pstream__) {
        stan_print(pstream__, N);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 77;
      current_statement__ = 77;
      check_simplex(function__, "w_exposure", w_exposure);
      current_statement__ = 107;
      validate_non_negative_index("Lambda", "N", N);
      current_statement__ = 108;
      validate_non_negative_index("Esrc", "N", N);
      current_statement__ = 109;
      validate_non_negative_index("E", "N", N);
      current_statement__ = 110;
      validate_non_negative_index("Edet", "N", N);
      current_statement__ = 111;
      validate_non_negative_index("cosz", "N", N);
      current_statement__ = 112;
      validate_non_negative_index("Pdet", "N", N);
      current_statement__ = 113;
      validate_non_negative_index("event", "N", N);
      current_statement__ = 114;
      validate_non_negative_index("event_type", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "sim_code_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "sim_code_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<int> Lambda;
      Lambda = std::vector<int>(N, std::numeric_limits<int>::min());
      
      Eigen::Matrix<double, -1, 1> omega;
      omega = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(omega, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Esrc;
      Esrc = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Esrc, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> E;
      E = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(E, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Edet;
      Edet = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Edet, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> cosz;
      cosz = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Pdet;
      Pdet = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      int accept;
      accept = std::numeric_limits<int>::min();
      
      int detected;
      detected = std::numeric_limits<int>::min();
      
      int ntrials;
      ntrials = std::numeric_limits<int>::min();
      
      Eigen::Matrix<double, -1, 1> prob;
      prob = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(prob, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> event;
      event = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(3));
      stan::math::fill(event, std::numeric_limits<double>::quiet_NaN());
      
      double Nex_sim;
      Nex_sim = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> event_type;
      event_type = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(event_type, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      Nex_sim = Nex;
      current_statement__ = 51;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 16;
        assign(Lambda, cons_list(index_uni(i), nil_index_list()),
          categorical_rng(w_exposure, base_rng__),
          "assigning variable Lambda");
        current_statement__ = 17;
        accept = 0;
        current_statement__ = 18;
        detected = 0;
        current_statement__ = 19;
        ntrials = 0;
        current_statement__ = 47;
        while (logical_neq(accept, 1)) {
          current_statement__ = 25;
          if (logical_lte(Lambda[(i - 1)], Ns)) {
            current_statement__ = 23;
            assign(omega, nil_index_list(), varpi[(Lambda[(i - 1)] - 1)],
              "assigning variable omega");
          } else {
            current_statement__ = 22;
            if (logical_eq(Lambda[(i - 1)], (Ns + 1))) {
              current_statement__ = 20;
              assign(omega, nil_index_list(),
                sphere_lim_rng(1, v_lim, base_rng__, pstream__),
                "assigning variable omega");
            } 
          }
          current_statement__ = 26;
          assign(cosz, cons_list(index_uni(i), nil_index_list()),
            stan::math::cos(omega_to_zenith(omega, pstream__)),
            "assigning variable cosz");
          current_statement__ = 30;
          if (logical_lte(Lambda[(i - 1)], (Ns + 1))) {
            current_statement__ = 27;
            assign(Esrc, cons_list(index_uni(i), nil_index_list()),
              spectrum_rng(alpha, Esrc_min, Esrc_max, base_rng__, pstream__),
              "assigning variable Esrc");
            current_statement__ = 28;
            assign(E, cons_list(index_uni(i), nil_index_list()),
              (Esrc[(i - 1)] / (1 + z[(Lambda[(i - 1)] - 1)])),
              "assigning variable E");
          } 
          current_statement__ = 31;
          assign(Pdet, cons_list(index_uni(i), nil_index_list()),
            (CascadesEffectiveArea(E[(i - 1)], omega, pstream__) / aeff_max),
            "assigning variable Pdet");
          current_statement__ = 32;
          assign(Edet, cons_list(index_uni(i), nil_index_list()),
            pow(10,
              CascadeEnergyResolution_rng(E[(i - 1)], base_rng__, pstream__)),
            "assigning variable Edet");
          current_statement__ = 33;
          assign(prob, cons_list(index_uni(1), nil_index_list()),
            Pdet[(i - 1)], "assigning variable prob");
          current_statement__ = 34;
          assign(prob, cons_list(index_uni(2), nil_index_list()),
            (1 - Pdet[(i - 1)]), "assigning variable prob");
          current_statement__ = 35;
          ntrials = (ntrials + 1);
          current_statement__ = 45;
          if (logical_lt(ntrials, 1000000)) {
            current_statement__ = 40;
            detected = categorical_rng(prob, base_rng__);
            current_statement__ = 43;
            if ((primitive_value(logical_gte(Edet[(i - 1)], Edet_min)) &&
                primitive_value(logical_eq(detected, 1)))) {
              current_statement__ = 41;
              accept = 1;
            } 
          } else {
            current_statement__ = 36;
            accept = 1;
            current_statement__ = 37;
            if (pstream__) {
              stan_print(pstream__, "problem component: ");
              stan_print(pstream__, Lambda[(i - 1)]);
              stan_print(pstream__, "\n");
            }
            ;
          }
        }
        current_statement__ = 48;
        assign(event, cons_list(index_uni(i), nil_index_list()),
          CascadesAngularResolution_rng(E[(i - 1)],
            omega, base_rng__, pstream__), "assigning variable event");
        current_statement__ = 49;
        assign(event_type, cons_list(index_uni(i), nil_index_list()),
          cascade_type, "assigning variable event_type");}
      current_statement__ = 2;
      current_statement__ = 2;
      check_unit_vector(function__, "omega", omega);
      current_statement__ = 11;
      current_statement__ = 11;
      check_simplex(function__, "prob", prob);
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 12;
        current_statement__ = 12;
        check_unit_vector(function__, "event[sym1__]", event[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Lambda[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(omega[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Esrc[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(E[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Edet[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(cosz[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Pdet[(sym1__ - 1)]);}
      vars__.emplace_back(accept);
      vars__.emplace_back(detected);
      vars__.emplace_back(ntrials);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(prob[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(event[(sym2__ - 1)][(sym1__ - 1)]);}}
      vars__.emplace_back(Nex_sim);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(event_type[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("Lambda");
    names__.emplace_back("omega");
    names__.emplace_back("Esrc");
    names__.emplace_back("E");
    names__.emplace_back("Edet");
    names__.emplace_back("cosz");
    names__.emplace_back("Pdet");
    names__.emplace_back("accept");
    names__.emplace_back("detected");
    names__.emplace_back("ntrials");
    names__.emplace_back("prob");
    names__.emplace_back("event");
    names__.emplace_back("Nex_sim");
    names__.emplace_back("event_type");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Lambda" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Esrc" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "E" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Edet" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cosz" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Pdet" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "accept");
      param_names__.emplace_back(std::string() + "detected");
      param_names__.emplace_back(std::string() + "ntrials");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prob" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "event" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      param_names__.emplace_back(std::string() + "Nex_sim");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "event_type" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Lambda" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Esrc" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "E" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Edet" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cosz" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Pdet" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "accept");
      param_names__.emplace_back(std::string() + "detected");
      param_names__.emplace_back(std::string() + "ntrials");
      for (int sym1__ = 1; sym1__ <= (2 - 1); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prob" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "event" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      param_names__.emplace_back(std::string() + "Nex_sim");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "event_type" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"Lambda\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"generated_quantities\"},{\"name\":\"Esrc\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"E\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Edet\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"cosz\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Pdet\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"accept\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"detected\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"ntrials\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"prob\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"generated_quantities\"},{\"name\":\"event\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 3 << "}},\"block\":\"generated_quantities\"},{\"name\":\"Nex_sim\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"event_type\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"Lambda\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"generated_quantities\"},{\"name\":\"Esrc\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"E\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Edet\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"cosz\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Pdet\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"accept\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"detected\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"ntrials\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"prob\",\"type\":{\"name\":\"vector\",\"length\":" << (2 - 1) << "},\"block\":\"generated_quantities\"},{\"name\":\"event\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 3 << "}},\"block\":\"generated_quantities\"},{\"name\":\"Nex_sim\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"event_type\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = sim_code_model_namespace::sim_code_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


