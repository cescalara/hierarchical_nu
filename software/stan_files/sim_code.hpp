
// Code generated by stanc v2.25.0
#include <stan/model/model_header.hpp>
namespace sim_code_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 343, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 344, column 0 to column 21)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 345, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 346, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 347, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 348, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 349, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 350, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 351, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 352, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 353, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 354, column 0 to column 16)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 355, column 0 to column 24)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 356, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 357, column 0 to column 21)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 358, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 361, column 0 to column 40)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 362, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 363, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 364, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 377, column 0 to column 43)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 378, column 0 to column 36)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 376, column 0 to line 379, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 375, column 5 to line 379, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 373, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 372, column 0 to line 374, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 371, column 5 to line 379, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 369, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 368, column 0 to line 370, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 367, column 0 to line 379, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 380, column 0 to column 38)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 388, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 387, column 0 to line 389, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 386, column 5 to line 389, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 383, column 0 to column 50)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 384, column 0 to column 34)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 382, column 0 to line 385, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 381, column 0 to line 389, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 390, column 0 to column 56)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 391, column 0 to column 49)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 392, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 393, column 0 to column 22)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 394, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 405, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 406, column 0 to column 40)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 407, column 0 to column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 404, column 0 to line 408, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 397, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 400, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 399, column 0 to line 401, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 398, column 0 to line 401, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 396, column 0 to line 402, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 395, column 0 to line 408, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 366, column 0 to line 409, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 365, column 0 to line 409, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 410, column 0 to column 54)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 411, column 0 to column 29)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 360, column 0 to line 412, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 359, column 0 to line 412, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 283, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 284, column 21 to column 23)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 284, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 285, column 7 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 285, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 286, column 7 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 286, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 287, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 288, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 289, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 290, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 291, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 292, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 293, column 0 to column 10)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 294, column 7 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 294, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 295, column 28 to column 32)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 295, column 7 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 295, column 0 to column 34)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 296, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 297, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 298, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 299, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 300, column 0 to column 20)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 301, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 302, column 31 to column 37)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 302, column 0 to column 39)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 303, column 7 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 303, column 0 to column 29)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 304, column 8 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 304, column 0 to column 29)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 308, column 7 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 308, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 309, column 8 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 309, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 310, column 7 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 310, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 311, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 312, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 313, column 0 to column 10)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 314, column 0 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 315, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 316, column 0 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 317, column 0 to column 6)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 318, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 319, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 320, column 0 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 323, column 0 to column 48)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 324, column 0 to column 43)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 325, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 322, column 0 to line 326, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 321, column 0 to line 326, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 327, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 328, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 329, column 0 to column 28)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 330, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 331, column 0 to column 16)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 332, column 0 to column 88)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 333, column 0 to column 22)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 334, column 0 to column 42)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 335, column 0 to column 21)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 336, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 337, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 338, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 339, column 0 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 343, column 11 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 345, column 7 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 346, column 7 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 347, column 7 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 349, column 10 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 350, column 10 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 355, column 21 to column 22)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 357, column 7 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 13, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 18, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 16, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 22, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 11, column 45, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 31, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 31, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 32, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 35, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 34, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 34, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 38, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 29, column 39, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 46, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 47, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 49, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 48, column 15, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 48, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 51, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 45, column 39, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 59, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 58, column 25, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 58, column 10, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 56, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 55, column 20, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 55, column 5, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 61, column 5, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 54, column 55, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 68, column 18, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 68, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 69, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 72, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 71, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 70, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 74, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 66, column 0, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 79, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 80, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 81, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 89, column 12, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 95, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 93, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 92, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 91, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 90, column 12, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 88, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 87, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 86, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 85, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 84, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 83, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 82, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 98, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 78, column 0, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 13, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 18, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 17, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 17, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 20, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 21, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 11, column 34, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 30, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 31, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 31, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 32, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 32, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 33, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 33, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 36, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 35, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 35, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 39, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 40, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 42, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 28, column 44, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 52, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 53, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 54, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 55, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 57, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 58, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 59, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 60, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 62, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 63, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 64, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 66, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 65, column 57, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 65, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 61, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 61, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 70, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 50, column 44, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 79, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 80, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 80, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 82, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 83, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 83, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 85, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 86, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 77, column 38, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 96, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 97, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 98, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 99, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 100, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 102, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 103, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 104, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 106, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 94, column 31, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 117, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 118, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 119, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 121, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 122, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 124, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 125, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 126, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 128, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 115, column 47, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 140, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 145, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 144, column 7, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 142, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 141, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 141, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 147, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 138, column 47, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 15, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 17, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 18, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 20, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 21, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 22, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 23, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 38, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 23, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 35, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 28, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 35, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 33, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 45, column 7, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 43, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 30, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 49, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 50, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 51, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 52, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 54, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 56, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 12, column 59, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 7, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 8, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 8, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 12, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 10, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 10, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 15, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 17, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 5, column 124, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 26, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 27, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 27, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 31, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 29, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 29, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 35, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 24, column 98, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 44, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 46, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 48, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 42, column 81, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 57, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 58, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 58, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 60, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 63, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 62, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 62, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 67, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 66, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 66, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 70, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 55, column 50, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 80, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 82, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 85, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 84, column 14, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 84, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 88, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 90, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 78, column 35, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 98, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 99, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 102, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 101, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 101, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 105, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 96, column 35, included from\n'/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 9, column 0 to line 158, column 34)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 159, column 0 to line 171, column 47)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 172, column 0 to column 80)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 173, column 0 to column 92)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 8, column 0 to line 174, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 177, column 0 to column 16)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 178, column 0 to column 10)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 179, column 0 to column 56)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 180, column 0 to column 31)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 181, column 0 to column 73)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 176, column 0 to line 182, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 185, column 0 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 186, column 0 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 193, column 0 to column 58)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 192, column 0 to line 194, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 189, column 0 to column 28)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 188, column 0 to line 190, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 187, column 0 to line 194, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 201, column 0 to column 58)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 200, column 0 to line 202, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 197, column 0 to column 28)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 196, column 0 to line 198, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 195, column 0 to line 202, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 203, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 184, column 0 to line 204, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 207, column 0 to line 208, column 35)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 209, column 0 to column 130)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 206, column 0 to line 210, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 213, column 0 to column 10)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 214, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 215, column 0 to column 50)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 212, column 0 to line 216, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 219, column 0 to line 221, column 68)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 222, column 0 to line 224, column 68)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 225, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 226, column 0 to column 20)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 227, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 230, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 229, column 0 to line 231, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 228, column 0 to line 231, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 234, column 0 to column 145)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 235, column 0 to column 148)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 233, column 0 to line 236, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 232, column 0 to line 236, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 237, column 0 to column 87)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 218, column 0 to line 238, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 241, column 0 to line 242, column 35)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 243, column 0 to column 142)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 240, column 0 to line 244, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 247, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 250, column 0 to column 70)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 249, column 0 to line 251, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 248, column 0 to line 251, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 252, column 0 to column 27)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 246, column 0 to line 253, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 256, column 0 to line 258, column 68)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 259, column 0 to line 261, column 68)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 262, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 263, column 0 to column 20)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 264, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 267, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 266, column 0 to line 268, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 265, column 0 to line 268, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 271, column 0 to column 145)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 272, column 0 to column 148)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 270, column 0 to line 273, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 269, column 0 to line 273, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 274, column 0 to column 103)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 255, column 0 to line 275, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 278, column 0 to column 71)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_code.stan', line 277, column 0 to line 279, column 1)"};


template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
trapz(const Eigen::Matrix<T0__, -1, 1>& x_values,
      const Eigen::Matrix<T1__, -1, 1>& y_values, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 133;
    N = num_elements(x_values);
    local_scalar_t__ I;
    I = DUMMY_VAR__;
    
    current_statement__ = 134;
    I = 0;
    current_statement__ = 137;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 135;
      I = (I +
            ((0.5 * (x_values[((i + 1) - 1)] - x_values[(i - 1)])) *
              (y_values[(i - 1)] + y_values[((i + 1) - 1)])));}
    current_statement__ = 138;
    return I;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct trapz_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const Eigen::Matrix<T0__, -1, 1>& x_values,
           const Eigen::Matrix<T1__, -1, 1>& y_values,
           std::ostream* pstream__)  const 
{
return trapz(x_values, y_values, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
linspace(const T0__& A, const T1__& B, const int& N, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 140;
    validate_non_negative_index("output", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> output;
    output = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(output, DUMMY_VAR__);
    
    local_scalar_t__ dx;
    dx = DUMMY_VAR__;
    
    current_statement__ = 142;
    dx = ((B - A) / (N - 1));
    current_statement__ = 145;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 143;
      assign(output, cons_list(index_uni(i), nil_index_list()),
        (A + ((i - 1) * dx)), "assigning variable output");}
    current_statement__ = 146;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct linspace_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& A, const T1__& B, const int& N,
           std::ostream* pstream__)  const 
{
return linspace(A, B, N, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
eval_poly1d(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& coeffs,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 148;
    N = num_elements(coeffs);
    local_scalar_t__ res;
    res = DUMMY_VAR__;
    
    current_statement__ = 149;
    res = 0;
    current_statement__ = 152;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 150;
      res = (res + (coeffs[(i - 1)] * pow(x, (N - i))));}
    current_statement__ = 153;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eval_poly1d_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& coeffs,
           std::ostream* pstream__)  const 
{
return eval_poly1d(x, coeffs, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
truncate_value(const T0__& x, const T1__& min_val, const T2__& max_val,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 160;
    if (logical_lt(x, min_val)) {
      current_statement__ = 158;
      return min_val;
    } else {
      current_statement__ = 157;
      if (logical_gt(x, max_val)) {
        current_statement__ = 155;
        return max_val;
      } 
    }
    current_statement__ = 161;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct truncate_value_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& x, const T1__& min_val, const T2__& max_val,
           std::ostream* pstream__)  const 
{
return truncate_value(x, min_val, max_val, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
generate_bin_edges(const T0__& lower_edge, const T1__& upper_edge,
                   const int& nbins, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 163;
    validate_non_negative_index("binedges", "nbins + 1", (nbins + 1));
    std::vector<local_scalar_t__> binedges;
    binedges = std::vector<local_scalar_t__>((nbins + 1), DUMMY_VAR__);
    
    local_scalar_t__ binwidth;
    binwidth = DUMMY_VAR__;
    
    current_statement__ = 165;
    binwidth = ((upper_edge - lower_edge) / nbins);
    current_statement__ = 168;
    for (int i = 1; i <= (nbins + 1); ++i) {
      current_statement__ = 166;
      assign(binedges, cons_list(index_uni(i), nil_index_list()),
        (lower_edge + ((i - 1) * binwidth)), "assigning variable binedges");}
    current_statement__ = 169;
    return binedges;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct generate_bin_edges_functor__ {
template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
operator()(const T0__& lower_edge, const T1__& upper_edge, const int& nbins,
           std::ostream* pstream__)  const 
{
return generate_bin_edges(lower_edge, upper_edge, nbins, pstream__);
}
};

template <typename T0__, typename T1__>
int
binary_search(const T0__& value, const std::vector<T1__>& binedges,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int L;
    L = std::numeric_limits<int>::min();
    
    current_statement__ = 171;
    L = 1;
    int R;
    R = std::numeric_limits<int>::min();
    
    current_statement__ = 172;
    R = size(binedges);
    int m;
    m = std::numeric_limits<int>::min();
    
    current_statement__ = 186;
    if (logical_lt(value, binedges[(1 - 1)])) {
      current_statement__ = 185;
      return 0;
    } else {
      current_statement__ = 184;
      if (logical_gt(value, binedges[(R - 1)])) {
        current_statement__ = 183;
        return (R + 1);
      } else {
        current_statement__ = 181;
        while (logical_lt(L, (R - 1))) {
          current_statement__ = 174;
          m = ((L + R) / 2);
          current_statement__ = 179;
          if (logical_lt(binedges[(m - 1)], value)) {
            current_statement__ = 178;
            L = m;
          } else {
            current_statement__ = 177;
            if (logical_gt(binedges[(m - 1)], value)) {
              current_statement__ = 176;
              R = m;
            } else {
              current_statement__ = 175;
              return m;
            }
          }
        }
      }
    }
    current_statement__ = 187;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct binary_search_functor__ {
template <typename T0__, typename T1__>
int
operator()(const T0__& value, const std::vector<T1__>& binedges,
           std::ostream* pstream__)  const 
{
return binary_search(value, binedges, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
abs_val(const Eigen::Matrix<T0__, -1, 1>& input_vector,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ av;
    av = DUMMY_VAR__;
    
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 190;
    n = num_elements(input_vector);
    local_scalar_t__ sum_squares;
    sum_squares = DUMMY_VAR__;
    
    current_statement__ = 191;
    sum_squares = 0;
    current_statement__ = 194;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 192;
      sum_squares = (sum_squares +
                      (input_vector[(i - 1)] * input_vector[(i - 1)]));}
    current_statement__ = 195;
    av = stan::math::sqrt(sum_squares);
    current_statement__ = 196;
    return av;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct abs_val_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const Eigen::Matrix<T0__, -1, 1>& input_vector,
           std::ostream* pstream__)  const 
{
return abs_val(input_vector, pstream__);
}
};

template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
sample_orthonormal_to_rng(const Eigen::Matrix<T0__, -1, 1>& mu,
                          RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int dim;
    dim = std::numeric_limits<int>::min();
    
    current_statement__ = 198;
    dim = num_elements(mu);
    current_statement__ = 199;
    validate_non_negative_index("v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> v;
    v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 201;
    validate_non_negative_index("proj_mu_v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> proj_mu_v;
    proj_mu_v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(proj_mu_v, DUMMY_VAR__);
    
    current_statement__ = 203;
    validate_non_negative_index("orthto", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> orthto;
    orthto = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(orthto, DUMMY_VAR__);
    
    current_statement__ = 207;
    for (int i = 1; i <= dim; ++i) {
      current_statement__ = 205;
      assign(v, cons_list(index_uni(i), nil_index_list()),
        normal_rng(0, 1, base_rng__), "assigning variable v");}
    current_statement__ = 208;
    assign(proj_mu_v, nil_index_list(),
      divide(multiply(mu, dot_product(mu, v)), abs_val(mu, pstream__)),
      "assigning variable proj_mu_v");
    current_statement__ = 209;
    assign(orthto, nil_index_list(), subtract(v, proj_mu_v),
      "assigning variable orthto");
    current_statement__ = 210;
    return divide(orthto, abs_val(orthto, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sample_orthonormal_to_rng_functor__ {
template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& mu, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return sample_orthonormal_to_rng(mu, base_rng__, pstream__);
}
};

template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
sample_weight_rng(const T0__& kappa, const int& dim, RNG& base_rng__,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ sdim;
    sdim = DUMMY_VAR__;
    
    current_statement__ = 212;
    sdim = (dim - 1);
    local_scalar_t__ b;
    b = DUMMY_VAR__;
    
    current_statement__ = 213;
    b = (sdim /
          (stan::math::sqrt(((4. * pow(kappa, 2)) + pow(sdim, 2))) +
            (2 * kappa)));
    local_scalar_t__ x;
    x = DUMMY_VAR__;
    
    current_statement__ = 214;
    x = ((1 - b) / (1 + b));
    local_scalar_t__ c;
    c = DUMMY_VAR__;
    
    current_statement__ = 215;
    c = ((kappa * x) + (sdim * stan::math::log((1 - pow(x, 2)))));
    int i;
    i = std::numeric_limits<int>::min();
    
    current_statement__ = 216;
    i = 0;
    local_scalar_t__ z;
    z = DUMMY_VAR__;
    
    local_scalar_t__ w;
    w = DUMMY_VAR__;
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 227;
    while (logical_eq(i, 0)) {
      current_statement__ = 220;
      z = beta_rng((sdim / 2), (sdim / 2), base_rng__);
      current_statement__ = 221;
      w = ((1 - ((1 + b) * z)) / (1 - ((1 - b) * z)));
      current_statement__ = 222;
      u = uniform_rng(0, 1, base_rng__);
      current_statement__ = 225;
      if (logical_gte(
            (((kappa * w) + (sdim * stan::math::log((1 - (x * w))))) - c),
            stan::math::log(u))) {
        current_statement__ = 223;
        i = 1;
      } 
    }
    current_statement__ = 228;
    return w;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sample_weight_rng_functor__ {
template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
operator()(const T0__& kappa, const int& dim, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return sample_weight_rng(kappa, dim, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
vMF_rng(const Eigen::Matrix<T0__, -1, 1>& mu, const T1__& kappa,
        RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int dim;
    dim = std::numeric_limits<int>::min();
    
    current_statement__ = 230;
    dim = num_elements(mu);
    current_statement__ = 231;
    validate_non_negative_index("result", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ w;
    w = DUMMY_VAR__;
    
    current_statement__ = 233;
    w = sample_weight_rng(kappa, dim, base_rng__, pstream__);
    current_statement__ = 234;
    validate_non_negative_index("v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> v;
    v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 235;
    assign(v, nil_index_list(),
      sample_orthonormal_to_rng(mu, base_rng__, pstream__),
      "assigning variable v");
    current_statement__ = 236;
    assign(result, nil_index_list(),
      add(multiply(v, stan::math::sqrt((1 - pow(w, 2)))), multiply(w, mu)),
      "assigning variable result");
    current_statement__ = 237;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vMF_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& mu, const T1__& kappa,
           RNG& base_rng__, std::ostream* pstream__)  const 
{
return vMF_rng(mu, kappa, base_rng__, pstream__);
}
};

template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
sphere_rng(const T0__& radius, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 240;
    u = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ v;
    v = DUMMY_VAR__;
    
    current_statement__ = 241;
    v = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 242;
    phi = ((2 * stan::math::pi()) * u);
    local_scalar_t__ theta;
    theta = DUMMY_VAR__;
    
    current_statement__ = 243;
    theta = stan::math::acos(((2 * v) - 1));
    current_statement__ = 244;
    assign(result, cons_list(index_uni(1), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::cos(phi)),
      "assigning variable result");
    current_statement__ = 245;
    assign(result, cons_list(index_uni(2), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::sin(phi)),
      "assigning variable result");
    current_statement__ = 246;
    assign(result, cons_list(index_uni(3), nil_index_list()),
      (radius * stan::math::cos(theta)), "assigning variable result");
    current_statement__ = 247;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sphere_rng_functor__ {
template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const T0__& radius, RNG& base_rng__, std::ostream* pstream__)  const 
{
return sphere_rng(radius, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
sphere_lim_rng(const T0__& radius, const T1__& v_lim, RNG& base_rng__,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 250;
    u = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ v;
    v = DUMMY_VAR__;
    
    current_statement__ = 251;
    v = uniform_rng(v_lim, 1, base_rng__);
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 252;
    phi = ((2 * stan::math::pi()) * u);
    local_scalar_t__ theta;
    theta = DUMMY_VAR__;
    
    current_statement__ = 253;
    theta = stan::math::acos(((2 * v) - 1));
    current_statement__ = 254;
    assign(result, cons_list(index_uni(1), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::cos(phi)),
      "assigning variable result");
    current_statement__ = 255;
    assign(result, cons_list(index_uni(2), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::sin(phi)),
      "assigning variable result");
    current_statement__ = 256;
    assign(result, cons_list(index_uni(3), nil_index_list()),
      (radius * stan::math::cos(theta)), "assigning variable result");
    current_statement__ = 257;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sphere_lim_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& radius, const T1__& v_lim, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return sphere_lim_rng(radius, v_lim, base_rng__, pstream__);
}
};

template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
vMF_lpdf(const Eigen::Matrix<T0__, -1, 1>& v,
         const Eigen::Matrix<T1__, -1, 1>& mu, const T2__& kappa,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ lprob;
    lprob = DUMMY_VAR__;
    
    current_statement__ = 264;
    if (logical_gt(kappa, 100)) {
      current_statement__ = 262;
      lprob = (((((kappa * dot_product(v, mu)) + stan::math::log(kappa)) -
                  stan::math::log((4 * stan::math::pi()))) - kappa) +
                stan::math::log(2));
    } else {
      current_statement__ = 260;
      lprob = (((kappa * dot_product(v, mu)) + stan::math::log(kappa)) -
                stan::math::log(
                  ((4 * stan::math::pi()) * stan::math::sinh(kappa))));
    }
    current_statement__ = 265;
    return lprob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vMF_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const Eigen::Matrix<T0__, -1, 1>& v,
           const Eigen::Matrix<T1__, -1, 1>& mu, const T2__& kappa,
           std::ostream* pstream__)  const 
{
return vMF_lpdf<propto__>(v, mu, kappa, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
interpolate(const Eigen::Matrix<T0__, -1, 1>& x_values,
            const Eigen::Matrix<T1__, -1, 1>& y_values, const T2__& x,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x_left;
    x_left = DUMMY_VAR__;
    
    local_scalar_t__ y_left;
    y_left = DUMMY_VAR__;
    
    local_scalar_t__ x_right;
    x_right = DUMMY_VAR__;
    
    local_scalar_t__ y_right;
    y_right = DUMMY_VAR__;
    
    local_scalar_t__ dydx;
    dydx = DUMMY_VAR__;
    
    int Nx;
    Nx = std::numeric_limits<int>::min();
    
    current_statement__ = 272;
    Nx = num_elements(x_values);
    local_scalar_t__ xmin;
    xmin = DUMMY_VAR__;
    
    current_statement__ = 273;
    xmin = x_values[(1 - 1)];
    local_scalar_t__ xmax;
    xmax = DUMMY_VAR__;
    
    current_statement__ = 274;
    xmax = x_values[(Nx - 1)];
    int i;
    i = std::numeric_limits<int>::min();
    
    current_statement__ = 275;
    i = 1;
    current_statement__ = 283;
    if ((primitive_value(logical_gt(x, xmax)) || primitive_value(
        logical_lt(x, xmin)))) {
      current_statement__ = 281;
      if (logical_gt(x, xmax)) {
        current_statement__ = 279;
        return y_values[(Nx - 1)];
      } else {
        current_statement__ = 278;
        if (logical_lt(x, xmin)) {
          current_statement__ = 276;
          return y_values[(1 - 1)];
        } 
      }
    } 
    current_statement__ = 290;
    if (logical_gte(x, x_values[((Nx - 1) - 1)])) {
      current_statement__ = 288;
      i = (Nx - 1);
    } else {
      current_statement__ = 286;
      while (logical_gt(x, x_values[((i + 1) - 1)])) {
        current_statement__ = 284;
        i = (i + 1);
      }
    }
    current_statement__ = 291;
    x_left = x_values[(i - 1)];
    current_statement__ = 292;
    y_left = y_values[(i - 1)];
    current_statement__ = 293;
    x_right = x_values[((i + 1) - 1)];
    current_statement__ = 294;
    y_right = y_values[((i + 1) - 1)];
    current_statement__ = 295;
    dydx = ((y_right - y_left) / (x_right - x_left));
    current_statement__ = 296;
    return (y_left + (dydx * (x - x_left)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct interpolate_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const Eigen::Matrix<T0__, -1, 1>& x_values,
           const Eigen::Matrix<T1__, -1, 1>& y_values, const T2__& x,
           std::ostream* pstream__)  const 
{
return interpolate(x_values, y_values, x, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>, -1, 1>
get_exposure_factor_atmo(const T0__& alpha,
                         const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
                         const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
                         const T3__& atmo_integ_val, const T4__& T,
                         const int& Ns, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 298;
    K = (Ns + 2);
    current_statement__ = 299;
    validate_non_negative_index("eps", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> eps;
    eps = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(eps, DUMMY_VAR__);
    
    current_statement__ = 303;
    for (int k = 1; k <= (K - 1); ++k) {
      current_statement__ = 301;
      assign(eps, cons_list(index_uni(k), nil_index_list()),
        interpolate(alpha_grid, integral_grid[(k - 1)], alpha, pstream__),
        "assigning variable eps");}
    current_statement__ = 304;
    assign(eps, cons_list(index_uni(K), nil_index_list()), atmo_integ_val,
      "assigning variable eps");
    current_statement__ = 305;
    return multiply(eps, T);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_exposure_factor_atmo_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>, -1, 1>
operator()(const T0__& alpha, const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
           const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
           const T3__& atmo_integ_val, const T4__& T, const int& Ns,
           std::ostream* pstream__)  const 
{
return get_exposure_factor_atmo(alpha, alpha_grid, integral_grid,
         atmo_integ_val, T, Ns, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__,
T3__>, -1, 1>
get_exposure_factor(const T0__& alpha,
                    const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
                    const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
                    const T3__& T, const int& Ns, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 307;
    K = (Ns + 1);
    current_statement__ = 308;
    validate_non_negative_index("eps", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> eps;
    eps = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(eps, DUMMY_VAR__);
    
    current_statement__ = 312;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 310;
      assign(eps, cons_list(index_uni(k), nil_index_list()),
        (interpolate(alpha_grid, integral_grid[(k - 1)], alpha, pstream__) *
          T), "assigning variable eps");}
    current_statement__ = 313;
    return eps;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_exposure_factor_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__,
T3__>, -1, 1>
operator()(const T0__& alpha, const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
           const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
           const T3__& T, const int& Ns, std::ostream* pstream__)  const 
{
return get_exposure_factor(alpha, alpha_grid, integral_grid, T, Ns,
         pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
get_eps_simple(const T0__& alpha,
               const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
               const Eigen::Matrix<T2__, -1, 1>& integral_grid,
               const T3__& T, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ eps;
    eps = DUMMY_VAR__;
    
    current_statement__ = 316;
    eps = (interpolate(alpha_grid, integral_grid, alpha, pstream__) * T);
    current_statement__ = 317;
    return eps;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_eps_simple_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& alpha, const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
           const Eigen::Matrix<T2__, -1, 1>& integral_grid, const T3__& T,
           std::ostream* pstream__)  const 
{
return get_eps_simple(alpha, alpha_grid, integral_grid, T, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
get_exposure_weights(const Eigen::Matrix<T0__, -1, 1>& F,
                     const Eigen::Matrix<T1__, -1, 1>& eps,
                     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 319;
    K = num_elements(F);
    current_statement__ = 320;
    validate_non_negative_index("weights", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> weights;
    weights = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(weights, DUMMY_VAR__);
    
    local_scalar_t__ normalisation;
    normalisation = DUMMY_VAR__;
    
    current_statement__ = 322;
    normalisation = 0;
    current_statement__ = 325;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 323;
      normalisation = (normalisation + (F[(k - 1)] * eps[(k - 1)]));}
    current_statement__ = 328;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 326;
      assign(weights, cons_list(index_uni(k), nil_index_list()),
        ((F[(k - 1)] * eps[(k - 1)]) / normalisation),
        "assigning variable weights");}
    current_statement__ = 329;
    return weights;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_exposure_weights_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& F,
           const Eigen::Matrix<T1__, -1, 1>& eps, std::ostream* pstream__)  const 
{
return get_exposure_weights(F, eps, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
omega_to_zenith(const Eigen::Matrix<T0__, -1, 1>& omega,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ zenith;
    zenith = DUMMY_VAR__;
    
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 332;
    N = num_elements(omega);
    current_statement__ = 335;
    if (logical_neq(N, 3)) {
      current_statement__ = 333;
      if (pstream__) {
        stan_print(pstream__, "Error: input vector omega must be of 3 dimensions");
        stan_print(pstream__, "\n");
      }
    } 
    current_statement__ = 336;
    zenith = (stan::math::pi() - stan::math::acos(omega[(3 - 1)]));
    current_statement__ = 337;
    return zenith;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct omega_to_zenith_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const Eigen::Matrix<T0__, -1, 1>& omega, std::ostream* pstream__)  const 
{
return omega_to_zenith(omega, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
get_Nex(const Eigen::Matrix<T0__, -1, 1>& F,
        const Eigen::Matrix<T1__, -1, 1>& eps, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 339;
    K = num_elements(F);
    local_scalar_t__ Nex;
    Nex = DUMMY_VAR__;
    
    current_statement__ = 340;
    Nex = 0;
    current_statement__ = 343;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 341;
      Nex = (Nex + (F[(k - 1)] * eps[(k - 1)]));}
    current_statement__ = 344;
    return Nex;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Nex_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const Eigen::Matrix<T0__, -1, 1>& F,
           const Eigen::Matrix<T1__, -1, 1>& eps, std::ostream* pstream__)  const 
{
return get_Nex(F, eps, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
CascadesEffAreaHist(const T0__& value_0, const T1__& value_1,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> hist_array;
    hist_array = std::vector<std::vector<local_scalar_t__>>(50, std::vector<local_scalar_t__>(10, DUMMY_VAR__));
    
    current_statement__ = 346;
    assign(hist_array, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(1.21783064e-01)
      .add(1.30803876e-01).add(1.41297518e-01).add(1.47216096e-01)
      .add(1.53686750e-01).add(1.58328682e-01).add(1.58538160e-01)
      .add(1.58400223e-01).add(1.58719513e-01).add(1.58691271e-01).array())
      .add(stan::math::array_builder<double>().add(1.46061845e-01)
      .add(1.64805048e-01).add(1.82990526e-01).add(1.96466501e-01)
      .add(2.04176068e-01).add(2.06786767e-01).add(2.10500993e-01)
      .add(2.10898261e-01).add(2.11533896e-01).add(2.11070306e-01).array())
      .add(stan::math::array_builder<double>().add(1.70312092e-01)
      .add(2.02094475e-01).add(2.31641254e-01).add(2.55219264e-01)
      .add(2.66359356e-01).add(2.75160532e-01).add(2.72726669e-01)
      .add(2.73172460e-01).add(2.75822454e-01).add(2.75783102e-01).array())
      .add(stan::math::array_builder<double>().add(1.94033792e-01)
      .add(2.43651396e-01).add(2.91139773e-01).add(3.22605246e-01)
      .add(3.42596205e-01).add(3.50755850e-01).add(3.49645174e-01)
      .add(3.47530774e-01).add(3.48983010e-01).add(3.55993779e-01).array())
      .add(stan::math::array_builder<double>().add(2.14775027e-01)
      .add(2.84200472e-01).add(3.57881373e-01).add(4.05277539e-01)
      .add(4.37102200e-01).add(4.44150776e-01).add(4.43163133e-01)
      .add(4.38889669e-01).add(4.40475453e-01).add(4.52414086e-01).array())
      .add(stan::math::array_builder<double>().add(2.34352539e-01)
      .add(3.27975347e-01).add(4.29751065e-01).add(4.99142994e-01)
      .add(5.45552636e-01).add(5.54904801e-01).add(5.52110198e-01)
      .add(5.45896599e-01).add(5.44398398e-01).add(5.62549299e-01).array())
      .add(stan::math::array_builder<double>().add(2.46005096e-01)
      .add(3.70671287e-01).add(5.07513864e-01).add(6.06049766e-01)
      .add(6.73213000e-01).add(6.86185839e-01).add(6.75301540e-01)
      .add(6.66250107e-01).add(6.72421331e-01).add(6.99691173e-01).array())
      .add(stan::math::array_builder<double>().add(2.54041763e-01)
      .add(4.07746886e-01).add(5.93695622e-01).add(7.32992823e-01)
      .add(8.14103111e-01).add(8.38353696e-01).add(8.27393090e-01)
      .add(8.02998220e-01).add(8.05065027e-01).add(8.50286624e-01).array())
      .add(stan::math::array_builder<double>().add(2.55618588e-01)
      .add(4.46845164e-01).add(6.77322555e-01).add(8.69050659e-01)
      .add(9.79512855e-01).add(1.00532610e+00).add(9.90549913e-01)
      .add(9.65180741e-01).add(9.71864528e-01).add(1.03141146e+00).array())
      .add(stan::math::array_builder<double>().add(2.50486478e-01)
      .add(4.67628906e-01).add(7.60365886e-01).add(1.02163318e+00)
      .add(1.17654451e+00).add(1.20459710e+00).add(1.18102907e+00)
      .add(1.13525014e+00).add(1.14345700e+00).add(1.22518314e+00).array())
      .add(stan::math::array_builder<double>().add(2.38365635e-01)
      .add(4.90862639e-01).add(8.50589905e-01).add(1.18199512e+00)
      .add(1.36777564e+00).add(1.42879717e+00).add(1.38296906e+00)
      .add(1.32524624e+00).add(1.32539462e+00).add(1.43835400e+00).array())
      .add(stan::math::array_builder<double>().add(2.24640423e-01)
      .add(4.99150733e-01).add(9.24707592e-01).add(1.34436664e+00)
      .add(1.57384234e+00).add(1.65493523e+00).add(1.61765146e+00)
      .add(1.53692123e+00).add(1.53415729e+00).add(1.68222830e+00).array())
      .add(stan::math::array_builder<double>().add(2.03797771e-01)
      .add(5.02932732e-01).add(9.91739599e-01).add(1.50254932e+00)
      .add(1.83371928e+00).add(1.91576978e+00).add(1.86398350e+00)
      .add(1.77601604e+00).add(1.77802440e+00).add(1.95223313e+00).array())
      .add(stan::math::array_builder<double>().add(1.82018586e-01)
      .add(4.91486113e-01).add(1.05313776e+00).add(1.64563180e+00)
      .add(2.07822002e+00).add(2.20715450e+00).add(2.12447206e+00)
      .add(2.04619007e+00).add(2.02860360e+00).add(2.22140006e+00).array())
      .add(stan::math::array_builder<double>().add(1.59356664e-01)
      .add(4.75435509e-01).add(1.08421545e+00).add(1.81444416e+00)
      .add(2.31579214e+00).add(2.48379113e+00).add(2.44499509e+00)
      .add(2.30765985e+00).add(2.29551987e+00).add(2.51433091e+00).array())
      .add(stan::math::array_builder<double>().add(1.36495254e-01)
      .add(4.46759899e-01).add(1.10613377e+00).add(1.95546702e+00)
      .add(2.57847544e+00).add(2.85029516e+00).add(2.74769278e+00)
      .add(2.59302699e+00).add(2.60517865e+00).add(2.87361883e+00).array())
      .add(stan::math::array_builder<double>().add(1.14817891e-01)
      .add(4.11370025e-01).add(1.10793126e+00).add(2.06280601e+00)
      .add(2.84507272e+00).add(3.16272345e+00).add(3.11179334e+00)
      .add(2.92303173e+00).add(2.91541796e+00).add(3.20677796e+00).array())
      .add(stan::math::array_builder<double>().add(9.34284493e-02)
      .add(3.76186926e-01).add(1.09565077e+00).add(2.18715972e+00)
      .add(3.10968505e+00).add(3.51238844e+00).add(3.44863235e+00)
      .add(3.24983362e+00).add(3.26305261e+00).add(3.60721236e+00).array())
      .add(stan::math::array_builder<double>().add(7.61056575e-02)
      .add(3.35995109e-01).add(1.07624339e+00).add(2.25891560e+00)
      .add(3.36177835e+00).add(3.87347772e+00).add(3.88666607e+00)
      .add(3.66638293e+00).add(3.61405788e+00).add(3.99494321e+00).array())
      .add(stan::math::array_builder<double>().add(6.03284489e-02)
      .add(2.98373673e-01).add(1.04188143e+00).add(2.32108341e+00)
      .add(3.60199943e+00).add(4.24586700e+00).add(4.28964345e+00)
      .add(4.07554522e+00).add(3.98161623e+00).add(4.39299206e+00).array())
      .add(stan::math::array_builder<double>().add(4.70037763e-02)
      .add(2.56652380e-01).add(9.80933312e-01).add(2.35495340e+00)
      .add(3.80492625e+00).add(4.64044226e+00).add(4.77525296e+00)
      .add(4.50099942e+00).add(4.43908151e+00).add(4.89879641e+00).array())
      .add(stan::math::array_builder<double>().add(3.63016968e-02)
      .add(2.20282154e-01).add(9.19488737e-01).add(2.35092642e+00)
      .add(4.00798096e+00).add(5.06646369e+00).add(5.21602850e+00)
      .add(5.01534459e+00).add(4.89104364e+00).add(5.35409574e+00).array())
      .add(stan::math::array_builder<double>().add(2.68721094e-02)
      .add(1.84634635e-01).add(8.42817916e-01).add(2.32789868e+00)
      .add(4.16757841e+00).add(5.46561870e+00).add(5.80577519e+00)
      .add(5.54245508e+00).add(5.37765835e+00).add(5.87756705e+00).array())
      .add(stan::math::array_builder<double>().add(2.02990558e-02)
      .add(1.54799203e-01).add(7.70565399e-01).add(2.27577710e+00)
      .add(4.37900036e+00).add(5.90316087e+00).add(6.38022687e+00)
      .add(6.21809355e+00).add(6.04662483e+00).add(6.47793458e+00).array())
      .add(stan::math::array_builder<double>().add(1.50418695e-02)
      .add(1.26934420e-01).add(6.96274478e-01).add(2.22737344e+00)
      .add(4.48836477e+00).add(6.32647503e+00).add(7.01757782e+00)
      .add(6.89899870e+00).add(6.69816661e+00).add(7.10456060e+00).array())
      .add(stan::math::array_builder<double>().add(1.10226221e-02)
      .add(1.02902928e-01).add(6.16980450e-01).add(2.14649089e+00)
      .add(4.57770078e+00).add(6.82972921e+00).add(7.73242338e+00)
      .add(7.63627698e+00).add(7.41110521e+00).add(7.80390419e+00).array())
      .add(stan::math::array_builder<double>().add(8.01123596e-03)
      .add(8.29523138e-02).add(5.48044508e-01).add(2.04592050e+00)
      .add(4.71114692e+00).add(7.29499230e+00).add(8.61745884e+00)
      .add(8.53307811e+00).add(8.27028523e+00).add(8.54293886e+00).array())
      .add(stan::math::array_builder<double>().add(5.73113837e-03)
      .add(6.61328734e-02).add(4.80819697e-01).add(1.93029258e+00)
      .add(4.80123540e+00).add(7.86571963e+00).add(9.48607468e+00)
      .add(9.61617531e+00).add(9.30700218e+00).add(9.44944173e+00).array())
      .add(stan::math::array_builder<double>().add(4.10805510e-03)
      .add(5.33182632e-02).add(4.17407143e-01).add(1.83689954e+00)
      .add(4.86669952e+00).add(8.43465262e+00).add(1.05510815e+01)
      .add(1.08901202e+01).add(1.04360569e+01).add(1.03539911e+01).array())
      .add(stan::math::array_builder<double>().add(2.91791428e-03)
      .add(4.25488763e-02).add(3.66054210e-01).add(1.75422505e+00)
      .add(4.96233835e+00).add(9.02378769e+00).add(1.18558342e+01)
      .add(1.23305498e+01).add(1.18497110e+01).add(1.15939100e+01).array())
      .add(stan::math::array_builder<double>().add(2.04644033e-03)
      .add(3.28357675e-02).add(3.19469837e-01).add(1.64657529e+00)
      .add(4.99129111e+00).add(9.67810147e+00).add(1.32694120e+01)
      .add(1.41897680e+01).add(1.35799591e+01).add(1.30155084e+01).array())
      .add(stan::math::array_builder<double>().add(5.82114603e-04)
      .add(1.03430530e-02).add(9.94486941e-02).add(5.38336142e-01)
      .add(1.69829485e+00).add(3.38199532e+00).add(4.68802331e+00)
      .add(5.06824192e+00).add(4.87102496e+00).add(4.53572486e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00).array())
      .array(), "assigning variable hist_array");
    std::vector<local_scalar_t__> hist_edge_0;
    hist_edge_0 = std::vector<local_scalar_t__>(51, DUMMY_VAR__);
    
    current_statement__ = 347;
    assign(hist_edge_0, nil_index_list(), stan::math::array_builder<double>()
      .add(3.00000000e+04).add(3.61059544e+04).add(4.34546648e+04)
      .add(5.22990716e+04).add(6.29435965e+04).add(7.57546209e+04)
      .add(9.11730963e+04).add(1.09729722e+05).add(1.32063211e+05)
      .add(1.58942276e+05).add(1.91292086e+05).add(2.30226112e+05)
      .add(2.77084450e+05).add(3.33479951e+05).add(4.01353730e+05)
      .add(4.83041983e+05).add(5.81356394e+05).add(6.99680915e+05)
      .add(8.42088241e+05).add(1.01347999e+06).add(1.21975541e+06)
      .add(1.46801444e+06).add(1.76680208e+06).add(2.12640252e+06)
      .add(2.55919308e+06).add(3.08007029e+06).add(3.70696258e+06)
      .add(4.46144740e+06).add(5.36949388e+06).add(6.46235672e+06)
      .add(7.77765190e+06).add(9.36065150e+06).add(1.12658419e+07)
      .add(1.35587991e+07).add(1.63184461e+07).add(1.96397690e+07)
      .add(2.36370869e+07).add(2.84479860e+07).add(3.42380563e+07)
      .add(4.12065900e+07).add(4.95934420e+07).add(5.96872852e+07)
      .add(7.18355466e+07).add(8.64563657e+07).add(1.04052987e+08)
      .add(1.25231080e+08).add(1.50719589e+08).add(1.81395820e+08)
      .add(2.18315640e+08).add(2.62749819e+08).add(3.16227766e+08).array(),
      "assigning variable hist_edge_0");
    std::vector<local_scalar_t__> hist_edge_1;
    hist_edge_1 = std::vector<local_scalar_t__>(11, DUMMY_VAR__);
    
    current_statement__ = 348;
    assign(hist_edge_1, nil_index_list(), stan::math::array_builder<double>()
      .add(-1.).add(-0.8).add(-0.6).add(-0.4).add(-0.2).add(0.).add(0.2)
      .add(0.4).add(0.6).add(0.8).add(1.).array(),
      "assigning variable hist_edge_1");
    current_statement__ = 349;
    return hist_array[(binary_search(value_0, hist_edge_0, pstream__) - 1)][
        (binary_search(value_1, hist_edge_1, pstream__) - 1)];
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadesEffAreaHist_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& value_0, const T1__& value_1, std::ostream* pstream__)  const 
{
return CascadesEffAreaHist(value_0, value_1, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename RNG>
stan::promote_args_t<T0__, T1__,
T2__>
spectrum_rng(const T0__& alpha, const T1__& e_low, const T2__& e_up,
             RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ uni_sample;
    uni_sample = DUMMY_VAR__;
    
    local_scalar_t__ norm;
    norm = DUMMY_VAR__;
    
    current_statement__ = 353;
    norm = ((1 - alpha) / (pow(e_up, (1 - alpha)) - pow(e_low, (1 - alpha))));
    current_statement__ = 354;
    uni_sample = uniform_rng(0, 1, base_rng__);
    current_statement__ = 355;
    return pow(
             (((uni_sample * (1 - alpha)) / norm) + pow(e_low, (1 - alpha))),
             (1 / (1 - alpha)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct spectrum_rng_functor__ {
template <typename T0__, typename T1__, typename T2__, typename RNG>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& alpha, const T1__& e_low, const T2__& e_up,
           RNG& base_rng__, std::ostream* pstream__)  const 
{
return spectrum_rng(alpha, e_low, e_up, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
flux_conv(const T0__& alpha, const T1__& e_low, const T2__& e_up,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ f1;
    f1 = DUMMY_VAR__;
    
    local_scalar_t__ f2;
    f2 = DUMMY_VAR__;
    
    current_statement__ = 363;
    if (logical_eq(alpha, 1.0)) {
      current_statement__ = 361;
      f1 = (stan::math::log(e_up) - stan::math::log(e_low));
    } else {
      current_statement__ = 359;
      f1 = ((1 / (1 - alpha)) *
             (pow(e_up, (1 - alpha)) - pow(e_low, (1 - alpha))));
    }
    current_statement__ = 368;
    if (logical_eq(alpha, 2.0)) {
      current_statement__ = 366;
      f2 = (stan::math::log(e_up) - stan::math::log(e_low));
    } else {
      current_statement__ = 364;
      f2 = ((1 / (2 - alpha)) *
             (pow(e_up, (2 - alpha)) - pow(e_low, (2 - alpha))));
    }
    current_statement__ = 369;
    return (f1 / f2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct flux_conv_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& alpha, const T1__& e_low, const T2__& e_up,
           std::ostream* pstream__)  const 
{
return flux_conv(alpha, e_low, e_up, pstream__);
}
};

template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
CascadesAngularResolution_rng(const T0__& true_energy,
                              const Eigen::Matrix<T1__, -1, 1>& true_dir,
                              RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> CascadesAngularResolutionPolyCoeffs;
    CascadesAngularResolutionPolyCoeffs = Eigen::Matrix<local_scalar_t__, -1, 1>(6);
    stan::math::fill(CascadesAngularResolutionPolyCoeffs, DUMMY_VAR__);
    
    current_statement__ = 371;
    assign(CascadesAngularResolutionPolyCoeffs, nil_index_list(),
      transpose(stan::math::to_row_vector(stan::math::array_builder<double>()
        .add(-4.84839608e-01).add(3.59082699e+00).add(4.39765349e+01)
        .add(-4.86964043e+02).add(1.50499694e+03).add(-1.48474342e+03)
        .array())), "assigning variable CascadesAngularResolutionPolyCoeffs");
    current_statement__ = 372;
    return vMF_rng(true_dir,
             eval_poly1d(
               stan::math::log10(
                 truncate_value(true_energy, 100.0, 100000000.0, pstream__)),
               CascadesAngularResolutionPolyCoeffs, pstream__), base_rng__, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadesAngularResolution_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& true_energy,
           const Eigen::Matrix<T1__, -1, 1>& true_dir, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return CascadesAngularResolution_rng(true_energy, true_dir, base_rng__,
         pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename RNG>
stan::promote_args_t<T0__, T1__,
T2__>
c_energy_res_mix_rng(const Eigen::Matrix<T0__, -1, 1>& means,
                     const Eigen::Matrix<T1__, -1, 1>& sigmas,
                     const Eigen::Matrix<T2__, -1, 1>& weights,
                     RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int index;
    index = std::numeric_limits<int>::min();
    
    current_statement__ = 375;
    index = categorical_rng(weights, base_rng__);
    current_statement__ = 376;
    return lognormal_rng(means[(index - 1)], sigmas[(index - 1)], base_rng__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct c_energy_res_mix_rng_functor__ {
template <typename T0__, typename T1__, typename T2__, typename RNG>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const Eigen::Matrix<T0__, -1, 1>& means,
           const Eigen::Matrix<T1__, -1, 1>& sigmas,
           const Eigen::Matrix<T2__, -1, 1>& weights, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return c_energy_res_mix_rng(means, sigmas, weights, base_rng__, pstream__);
}
};

template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
CascadeEnergyResolution_rng(const T0__& true_energy, RNG& base_rng__,
                            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> CascadesEnergyResolutionMuPolyCoeffs;
    CascadesEnergyResolutionMuPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(3, std::vector<local_scalar_t__>(4, DUMMY_VAR__));
    
    current_statement__ = 378;
    assign(CascadesEnergyResolutionMuPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(6.53313494e-02)
      .add(-1.12000300e+00).add(6.87898447e+00).add(-1.02551114e+01).array())
      .add(stan::math::array_builder<double>().add(3.38232247e-02)
      .add(-5.53146905e-01).add(3.73111309e+00).add(-4.46089856e+00).array())
      .add(stan::math::array_builder<double>().add(1.85995099e-03)
      .add(-3.46620393e-02).add(1.13092146e+00).add(-1.83372203e-01).array())
      .array(), "assigning variable CascadesEnergyResolutionMuPolyCoeffs");
    std::vector<std::vector<local_scalar_t__>> CascadesEnergyResolutionSdPolyCoeffs;
    CascadesEnergyResolutionSdPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(3, std::vector<local_scalar_t__>(4, DUMMY_VAR__));
    
    current_statement__ = 379;
    assign(CascadesEnergyResolutionSdPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(-2.01420133e-03)
      .add(4.02070407e-02).add(-2.42477818e-01).add(5.12506734e-01).array())
      .add(stan::math::array_builder<double>().add(-6.68041324e-04)
      .add(1.23887853e-02).add(-6.38367085e-02).add(1.22855310e-01).array())
      .add(stan::math::array_builder<double>().add(2.77487585e-05)
      .add(-1.91839601e-03).add(2.75232763e-02).add(-7.22611701e-02).array())
      .array(), "assigning variable CascadesEnergyResolutionSdPolyCoeffs");
    std::vector<local_scalar_t__> mu_e_res;
    mu_e_res = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> sigma_e_res;
    sigma_e_res = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> weights;
    weights = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(weights, DUMMY_VAR__);
    
    current_statement__ = 385;
    for (int i = 1; i <= 3; ++i) {
      current_statement__ = 383;
      assign(weights, cons_list(index_uni(i), nil_index_list()), (1.0 / 3),
        "assigning variable weights");}
    current_statement__ = 389;
    for (int i = 1; i <= 3; ++i) {
      current_statement__ = 386;
      assign(mu_e_res, cons_list(index_uni(i), nil_index_list()),
        eval_poly1d(
          stan::math::log10(
            truncate_value(true_energy, 30000.00000000001,
              10000000.0, pstream__)),
          to_vector(CascadesEnergyResolutionMuPolyCoeffs[(i - 1)]), pstream__),
        "assigning variable mu_e_res");
      current_statement__ = 387;
      assign(sigma_e_res, cons_list(index_uni(i), nil_index_list()),
        eval_poly1d(
          stan::math::log10(
            truncate_value(true_energy, 30000.00000000001,
              10000000.0, pstream__)),
          to_vector(CascadesEnergyResolutionSdPolyCoeffs[(i - 1)]), pstream__),
        "assigning variable sigma_e_res");}
    current_statement__ = 390;
    return c_energy_res_mix_rng(to_vector(stan::math::log(mu_e_res)),
             to_vector(sigma_e_res), weights, base_rng__, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadeEnergyResolution_rng_functor__ {
template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
operator()(const T0__& true_energy, RNG& base_rng__, std::ostream* pstream__)  const 
{
return CascadeEnergyResolution_rng(true_energy, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
CascadesAngularResolution(const T0__& true_energy,
                          const Eigen::Matrix<T1__, -1, 1>& true_dir,
                          const Eigen::Matrix<T2__, -1, 1>& reco_dir,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> CascadesAngularResolutionPolyCoeffs;
    CascadesAngularResolutionPolyCoeffs = Eigen::Matrix<local_scalar_t__, -1, 1>(6);
    stan::math::fill(CascadesAngularResolutionPolyCoeffs, DUMMY_VAR__);
    
    current_statement__ = 392;
    assign(CascadesAngularResolutionPolyCoeffs, nil_index_list(),
      transpose(stan::math::to_row_vector(stan::math::array_builder<double>()
        .add(-4.84839608e-01).add(3.59082699e+00).add(4.39765349e+01)
        .add(-4.86964043e+02).add(1.50499694e+03).add(-1.48474342e+03)
        .array())), "assigning variable CascadesAngularResolutionPolyCoeffs");
    current_statement__ = 393;
    return vMF_lpdf<false>(reco_dir, true_dir,
             eval_poly1d(
               stan::math::log10(
                 truncate_value(true_energy, 100.0, 100000000.0, pstream__)),
               CascadesAngularResolutionPolyCoeffs, pstream__), pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadesAngularResolution_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& true_energy,
           const Eigen::Matrix<T1__, -1, 1>& true_dir,
           const Eigen::Matrix<T2__, -1, 1>& reco_dir,
           std::ostream* pstream__)  const 
{
return CascadesAngularResolution(true_energy, true_dir, reco_dir, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
c_energy_res_mix(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& means,
                 const Eigen::Matrix<T2__, -1, 1>& sigmas,
                 const Eigen::Matrix<T3__, -1, 1>& weights,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(result, DUMMY_VAR__);
    
    current_statement__ = 398;
    for (int i = 1; i <= 3; ++i) {
      current_statement__ = 396;
      assign(result, cons_list(index_uni(i), nil_index_list()),
        (stan::math::log(weights)[(i - 1)] +
          lognormal_lpdf<false>(x, means[(i - 1)], sigmas[(i - 1)])),
        "assigning variable result");}
    current_statement__ = 399;
    return log_sum_exp(result);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct c_energy_res_mix_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& means,
           const Eigen::Matrix<T2__, -1, 1>& sigmas,
           const Eigen::Matrix<T3__, -1, 1>& weights, std::ostream* pstream__)  const 
{
return c_energy_res_mix(x, means, sigmas, weights, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
CascadeEnergyResolution(const T0__& true_energy, const T1__& reco_energy,
                        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> CascadesEnergyResolutionMuPolyCoeffs;
    CascadesEnergyResolutionMuPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(3, std::vector<local_scalar_t__>(4, DUMMY_VAR__));
    
    current_statement__ = 401;
    assign(CascadesEnergyResolutionMuPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(6.53313494e-02)
      .add(-1.12000300e+00).add(6.87898447e+00).add(-1.02551114e+01).array())
      .add(stan::math::array_builder<double>().add(3.38232247e-02)
      .add(-5.53146905e-01).add(3.73111309e+00).add(-4.46089856e+00).array())
      .add(stan::math::array_builder<double>().add(1.85995099e-03)
      .add(-3.46620393e-02).add(1.13092146e+00).add(-1.83372203e-01).array())
      .array(), "assigning variable CascadesEnergyResolutionMuPolyCoeffs");
    std::vector<std::vector<local_scalar_t__>> CascadesEnergyResolutionSdPolyCoeffs;
    CascadesEnergyResolutionSdPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(3, std::vector<local_scalar_t__>(4, DUMMY_VAR__));
    
    current_statement__ = 402;
    assign(CascadesEnergyResolutionSdPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(-2.01420133e-03)
      .add(4.02070407e-02).add(-2.42477818e-01).add(5.12506734e-01).array())
      .add(stan::math::array_builder<double>().add(-6.68041324e-04)
      .add(1.23887853e-02).add(-6.38367085e-02).add(1.22855310e-01).array())
      .add(stan::math::array_builder<double>().add(2.77487585e-05)
      .add(-1.91839601e-03).add(2.75232763e-02).add(-7.22611701e-02).array())
      .array(), "assigning variable CascadesEnergyResolutionSdPolyCoeffs");
    std::vector<local_scalar_t__> mu_e_res;
    mu_e_res = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> sigma_e_res;
    sigma_e_res = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> weights;
    weights = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(weights, DUMMY_VAR__);
    
    current_statement__ = 408;
    for (int i = 1; i <= 3; ++i) {
      current_statement__ = 406;
      assign(weights, cons_list(index_uni(i), nil_index_list()), (1.0 / 3),
        "assigning variable weights");}
    current_statement__ = 412;
    for (int i = 1; i <= 3; ++i) {
      current_statement__ = 409;
      assign(mu_e_res, cons_list(index_uni(i), nil_index_list()),
        eval_poly1d(
          stan::math::log10(
            truncate_value(true_energy, 30000.00000000001,
              10000000.0, pstream__)),
          to_vector(CascadesEnergyResolutionMuPolyCoeffs[(i - 1)]), pstream__),
        "assigning variable mu_e_res");
      current_statement__ = 410;
      assign(sigma_e_res, cons_list(index_uni(i), nil_index_list()),
        eval_poly1d(
          stan::math::log10(
            truncate_value(true_energy, 30000.00000000001,
              10000000.0, pstream__)),
          to_vector(CascadesEnergyResolutionSdPolyCoeffs[(i - 1)]), pstream__),
        "assigning variable sigma_e_res");}
    current_statement__ = 413;
    return c_energy_res_mix(stan::math::log10(reco_energy),
             to_vector(stan::math::log(mu_e_res)), to_vector(sigma_e_res),
             weights, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadeEnergyResolution_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& true_energy, const T1__& reco_energy,
           std::ostream* pstream__)  const 
{
return CascadeEnergyResolution(true_energy, reco_energy, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
CascadesEffectiveArea(const T0__& true_energy,
                      const Eigen::Matrix<T1__, -1, 1>& true_dir,
                      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 415;
    return CascadesEffAreaHist(true_energy,
             stan::math::cos(
               (stan::math::pi() - stan::math::acos(true_dir[(3 - 1)]))), pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct CascadesEffectiveArea_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& true_energy,
           const Eigen::Matrix<T1__, -1, 1>& true_dir,
           std::ostream* pstream__)  const 
{
return CascadesEffectiveArea(true_energy, true_dir, pstream__);
}
};

class sim_code_model final : public model_base_crtp<sim_code_model> {

 private:
  int Ns;
  std::vector<Eigen::Matrix<double, -1, 1>> varpi;
  Eigen::Matrix<double, -1, 1> D;
  Eigen::Matrix<double, -1, 1> z;
  double alpha;
  double Edet_min;
  double Esrc_min;
  double Esrc_max;
  double L;
  double F_diff;
  int Ngrid;
  Eigen::Matrix<double, -1, 1> alpha_grid;
  std::vector<Eigen::Matrix<double, -1, 1>> integral_grid;
  double aeff_max;
  double v_lim;
  double T;
  double F_atmo;
  double atmo_integ_val;
  int N_atmo;
  std::vector<Eigen::Matrix<double, -1, 1>> atmo_directions;
  Eigen::Matrix<double, -1, 1> atmo_energies;
  Eigen::Matrix<double, -1, 1> atmo_weights;
  Eigen::Matrix<double, -1, 1> F;
  Eigen::Matrix<double, -1, 1> w_exposure;
  Eigen::Matrix<double, -1, 1> eps;
  int track_type;
  int cascade_type;
  double Ftot;
  double Fs;
  double f;
  double Nex;
  int N;
 
 public:
  ~sim_code_model() final { }
  
  std::string model_name() const final { return "sim_code_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 v2.25.0");
    stanc_info.push_back("stancflags = --include_paths=/Users/fran/projects/hierarchical_nu/software/stan_files");
    return stanc_info;
  }
  
  
  sim_code_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "sim_code_model_namespace::sim_code_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 60;
      context__.validate_dims("data initialization","Ns","int",
          context__.to_vec());
      Ns = std::numeric_limits<int>::min();
      
      current_statement__ = 60;
      Ns = context__.vals_i("Ns")[(1 - 1)];
      current_statement__ = 61;
      validate_non_negative_index("varpi", "Ns", Ns);
      current_statement__ = 62;
      context__.validate_dims("data initialization","varpi","double",
          context__.to_vec(Ns, 3));
      varpi = std::vector<Eigen::Matrix<double, -1, 1>>(Ns, Eigen::Matrix<double, -1, 1>(3));
      stan::math::fill(varpi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> varpi_flat__;
        current_statement__ = 62;
        assign(varpi_flat__, nil_index_list(), context__.vals_r("varpi"),
          "assigning variable varpi_flat__");
        current_statement__ = 62;
        pos__ = 1;
        current_statement__ = 62;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 62;
          for (int sym2__ = 1; sym2__ <= Ns; ++sym2__) {
            current_statement__ = 62;
            assign(varpi,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              varpi_flat__[(pos__ - 1)], "assigning variable varpi");
            current_statement__ = 62;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 62;
      for (int sym1__ = 1; sym1__ <= Ns; ++sym1__) {
        current_statement__ = 62;
        current_statement__ = 62;
        check_unit_vector(function__, "varpi[sym1__]", varpi[(sym1__ - 1)]);}
      current_statement__ = 63;
      validate_non_negative_index("D", "Ns", Ns);
      current_statement__ = 64;
      context__.validate_dims("data initialization","D","double",
          context__.to_vec(Ns));
      D = Eigen::Matrix<double, -1, 1>(Ns);
      stan::math::fill(D, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> D_flat__;
        current_statement__ = 64;
        assign(D_flat__, nil_index_list(), context__.vals_r("D"),
          "assigning variable D_flat__");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= Ns; ++sym1__) {
          current_statement__ = 64;
          assign(D, cons_list(index_uni(sym1__), nil_index_list()),
            D_flat__[(pos__ - 1)], "assigning variable D");
          current_statement__ = 64;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 65;
      validate_non_negative_index("z", "Ns + 1", (Ns + 1));
      current_statement__ = 66;
      context__.validate_dims("data initialization","z","double",
          context__.to_vec((Ns + 1)));
      z = Eigen::Matrix<double, -1, 1>((Ns + 1));
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 66;
        assign(z_flat__, nil_index_list(), context__.vals_r("z"),
          "assigning variable z_flat__");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (int sym1__ = 1; sym1__ <= (Ns + 1); ++sym1__) {
          current_statement__ = 66;
          assign(z, cons_list(index_uni(sym1__), nil_index_list()),
            z_flat__[(pos__ - 1)], "assigning variable z");
          current_statement__ = 66;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 67;
      context__.validate_dims("data initialization","alpha","double",
          context__.to_vec());
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 67;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      current_statement__ = 68;
      context__.validate_dims("data initialization","Edet_min","double",
          context__.to_vec());
      Edet_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 68;
      Edet_min = context__.vals_r("Edet_min")[(1 - 1)];
      current_statement__ = 69;
      context__.validate_dims("data initialization","Esrc_min","double",
          context__.to_vec());
      Esrc_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 69;
      Esrc_min = context__.vals_r("Esrc_min")[(1 - 1)];
      current_statement__ = 70;
      context__.validate_dims("data initialization","Esrc_max","double",
          context__.to_vec());
      Esrc_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 70;
      Esrc_max = context__.vals_r("Esrc_max")[(1 - 1)];
      current_statement__ = 71;
      context__.validate_dims("data initialization","L","double",
          context__.to_vec());
      L = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 71;
      L = context__.vals_r("L")[(1 - 1)];
      current_statement__ = 72;
      context__.validate_dims("data initialization","F_diff","double",
          context__.to_vec());
      F_diff = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 72;
      F_diff = context__.vals_r("F_diff")[(1 - 1)];
      current_statement__ = 73;
      context__.validate_dims("data initialization","Ngrid","int",
          context__.to_vec());
      Ngrid = std::numeric_limits<int>::min();
      
      current_statement__ = 73;
      Ngrid = context__.vals_i("Ngrid")[(1 - 1)];
      current_statement__ = 74;
      validate_non_negative_index("alpha_grid", "Ngrid", Ngrid);
      current_statement__ = 75;
      context__.validate_dims("data initialization","alpha_grid","double",
          context__.to_vec(Ngrid));
      alpha_grid = Eigen::Matrix<double, -1, 1>(Ngrid);
      stan::math::fill(alpha_grid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_grid_flat__;
        current_statement__ = 75;
        assign(alpha_grid_flat__, nil_index_list(),
          context__.vals_r("alpha_grid"),
          "assigning variable alpha_grid_flat__");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
          current_statement__ = 75;
          assign(alpha_grid, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_grid_flat__[(pos__ - 1)], "assigning variable alpha_grid");
          current_statement__ = 75;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 76;
      validate_non_negative_index("integral_grid", "Ns + 1", (Ns + 1));
      current_statement__ = 77;
      validate_non_negative_index("integral_grid", "Ngrid", Ngrid);
      current_statement__ = 78;
      context__.validate_dims("data initialization","integral_grid","double",
          context__.to_vec((Ns + 1), Ngrid));
      integral_grid = std::vector<Eigen::Matrix<double, -1, 1>>((Ns + 1), Eigen::Matrix<double, -1, 1>(Ngrid));
      stan::math::fill(integral_grid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> integral_grid_flat__;
        current_statement__ = 78;
        assign(integral_grid_flat__, nil_index_list(),
          context__.vals_r("integral_grid"),
          "assigning variable integral_grid_flat__");
        current_statement__ = 78;
        pos__ = 1;
        current_statement__ = 78;
        for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
          current_statement__ = 78;
          for (int sym2__ = 1; sym2__ <= (Ns + 1); ++sym2__) {
            current_statement__ = 78;
            assign(integral_grid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              integral_grid_flat__[(pos__ - 1)],
              "assigning variable integral_grid");
            current_statement__ = 78;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 79;
      context__.validate_dims("data initialization","aeff_max","double",
          context__.to_vec());
      aeff_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 79;
      aeff_max = context__.vals_r("aeff_max")[(1 - 1)];
      current_statement__ = 80;
      context__.validate_dims("data initialization","v_lim","double",
          context__.to_vec());
      v_lim = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 80;
      v_lim = context__.vals_r("v_lim")[(1 - 1)];
      current_statement__ = 81;
      context__.validate_dims("data initialization","T","double",
          context__.to_vec());
      T = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 81;
      T = context__.vals_r("T")[(1 - 1)];
      current_statement__ = 82;
      context__.validate_dims("data initialization","F_atmo","double",
          context__.to_vec());
      F_atmo = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 82;
      F_atmo = context__.vals_r("F_atmo")[(1 - 1)];
      current_statement__ = 83;
      context__.validate_dims("data initialization","atmo_integ_val",
          "double",context__.to_vec());
      atmo_integ_val = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 83;
      atmo_integ_val = context__.vals_r("atmo_integ_val")[(1 - 1)];
      current_statement__ = 84;
      context__.validate_dims("data initialization","N_atmo","int",
          context__.to_vec());
      N_atmo = std::numeric_limits<int>::min();
      
      current_statement__ = 84;
      N_atmo = context__.vals_i("N_atmo")[(1 - 1)];
      current_statement__ = 85;
      validate_non_negative_index("atmo_directions", "N_atmo", N_atmo);
      current_statement__ = 86;
      context__.validate_dims("data initialization","atmo_directions",
          "double",context__.to_vec(N_atmo, 3));
      atmo_directions = std::vector<Eigen::Matrix<double, -1, 1>>(N_atmo, Eigen::Matrix<double, -1, 1>(3));
      stan::math::fill(atmo_directions, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> atmo_directions_flat__;
        current_statement__ = 86;
        assign(atmo_directions_flat__, nil_index_list(),
          context__.vals_r("atmo_directions"),
          "assigning variable atmo_directions_flat__");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 86;
          for (int sym2__ = 1; sym2__ <= N_atmo; ++sym2__) {
            current_statement__ = 86;
            assign(atmo_directions,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              atmo_directions_flat__[(pos__ - 1)],
              "assigning variable atmo_directions");
            current_statement__ = 86;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 86;
      for (int sym1__ = 1; sym1__ <= N_atmo; ++sym1__) {
        current_statement__ = 86;
        current_statement__ = 86;
        check_unit_vector(function__, "atmo_directions[sym1__]",
                          atmo_directions[(sym1__ - 1)]);}
      current_statement__ = 87;
      validate_non_negative_index("atmo_energies", "N_atmo", N_atmo);
      current_statement__ = 88;
      context__.validate_dims("data initialization","atmo_energies","double",
          context__.to_vec(N_atmo));
      atmo_energies = Eigen::Matrix<double, -1, 1>(N_atmo);
      stan::math::fill(atmo_energies, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> atmo_energies_flat__;
        current_statement__ = 88;
        assign(atmo_energies_flat__, nil_index_list(),
          context__.vals_r("atmo_energies"),
          "assigning variable atmo_energies_flat__");
        current_statement__ = 88;
        pos__ = 1;
        current_statement__ = 88;
        for (int sym1__ = 1; sym1__ <= N_atmo; ++sym1__) {
          current_statement__ = 88;
          assign(atmo_energies,
            cons_list(index_uni(sym1__), nil_index_list()),
            atmo_energies_flat__[(pos__ - 1)],
            "assigning variable atmo_energies");
          current_statement__ = 88;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 89;
      validate_non_negative_index("atmo_weights", "N_atmo", N_atmo);
      current_statement__ = 90;
      context__.validate_dims("data initialization","atmo_weights","double",
          context__.to_vec(N_atmo));
      atmo_weights = Eigen::Matrix<double, -1, 1>(N_atmo);
      stan::math::fill(atmo_weights, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> atmo_weights_flat__;
        current_statement__ = 90;
        assign(atmo_weights_flat__, nil_index_list(),
          context__.vals_r("atmo_weights"),
          "assigning variable atmo_weights_flat__");
        current_statement__ = 90;
        pos__ = 1;
        current_statement__ = 90;
        for (int sym1__ = 1; sym1__ <= N_atmo; ++sym1__) {
          current_statement__ = 90;
          assign(atmo_weights,
            cons_list(index_uni(sym1__), nil_index_list()),
            atmo_weights_flat__[(pos__ - 1)],
            "assigning variable atmo_weights");
          current_statement__ = 90;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 90;
      current_statement__ = 90;
      check_simplex(function__, "atmo_weights", atmo_weights);
      current_statement__ = 91;
      validate_non_negative_index("F", "Ns + 2", (Ns + 2));
      current_statement__ = 92;
      F = Eigen::Matrix<double, -1, 1>((Ns + 2));
      stan::math::fill(F, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 93;
      validate_non_negative_index("w_exposure", "Ns + 2", (Ns + 2));
      current_statement__ = 94;
      w_exposure = Eigen::Matrix<double, -1, 1>((Ns + 2));
      stan::math::fill(w_exposure, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 95;
      validate_non_negative_index("eps", "Ns + 2", (Ns + 2));
      current_statement__ = 96;
      eps = Eigen::Matrix<double, -1, 1>((Ns + 2));
      stan::math::fill(eps, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 97;
      track_type = std::numeric_limits<int>::min();
      
      current_statement__ = 98;
      cascade_type = std::numeric_limits<int>::min();
      
      current_statement__ = 99;
      Ftot = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 100;
      Fs = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 101;
      f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 102;
      Nex = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 103;
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 104;
      track_type = 0;
      current_statement__ = 105;
      cascade_type = 1;
      current_statement__ = 106;
      Fs = 0.0;
      current_statement__ = 111;
      for (int k = 1; k <= Ns; ++k) {
        current_statement__ = 107;
        assign(F, cons_list(index_uni(k), nil_index_list()),
          (L / ((4 * stan::math::pi()) * pow((D[(k - 1)] * 3.086e+22), 2))),
          "assigning variable F");
        current_statement__ = 108;
        assign(F, cons_list(index_uni(k), nil_index_list()),
          (F[(k - 1)] * flux_conv(alpha, Esrc_min, Esrc_max, pstream__)),
          "assigning variable F");
        current_statement__ = 109;
        Fs = (Fs + F[(k - 1)]);}
      current_statement__ = 112;
      assign(F, cons_list(index_uni((Ns + 1)), nil_index_list()), F_diff,
        "assigning variable F");
      current_statement__ = 113;
      assign(F, cons_list(index_uni((Ns + 2)), nil_index_list()), F_atmo,
        "assigning variable F");
      current_statement__ = 114;
      Ftot = ((Fs + F_diff) + F_atmo);
      current_statement__ = 115;
      f = (Fs / Ftot);
      current_statement__ = 116;
      if (pstream__) {
        stan_print(pstream__, "f: ");
        stan_print(pstream__, f);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 117;
      assign(eps, nil_index_list(),
        get_exposure_factor_atmo(alpha, alpha_grid, integral_grid,
          atmo_integ_val, T, Ns, pstream__), "assigning variable eps");
      current_statement__ = 118;
      Nex = get_Nex(F, eps, pstream__);
      current_statement__ = 119;
      assign(w_exposure, nil_index_list(),
        get_exposure_weights(F, eps, pstream__),
        "assigning variable w_exposure");
      current_statement__ = 120;
      N = poisson_rng(Nex, base_rng__);
      current_statement__ = 121;
      if (pstream__) {
        stan_print(pstream__, w_exposure);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 122;
      if (pstream__) {
        stan_print(pstream__, Ngrid);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 123;
      if (pstream__) {
        stan_print(pstream__, Nex);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 124;
      if (pstream__) {
        stan_print(pstream__, N);
        stan_print(pstream__, "\n");
      }
      current_statement__ = 94;
      current_statement__ = 94;
      check_simplex(function__, "w_exposure", w_exposure);
      current_statement__ = 125;
      validate_non_negative_index("Lambda", "N", N);
      current_statement__ = 126;
      validate_non_negative_index("Esrc", "N", N);
      current_statement__ = 127;
      validate_non_negative_index("E", "N", N);
      current_statement__ = 128;
      validate_non_negative_index("Edet", "N", N);
      current_statement__ = 129;
      validate_non_negative_index("cosz", "N", N);
      current_statement__ = 130;
      validate_non_negative_index("Pdet", "N", N);
      current_statement__ = 131;
      validate_non_negative_index("event", "N", N);
      current_statement__ = 132;
      validate_non_negative_index("event_type", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "sim_code_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "sim_code_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<int> Lambda;
      Lambda = std::vector<int>(N, std::numeric_limits<int>::min());
      
      Eigen::Matrix<double, -1, 1> omega;
      omega = Eigen::Matrix<double, -1, 1>(3);
      stan::math::fill(omega, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Esrc;
      Esrc = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Esrc, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> E;
      E = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(E, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Edet;
      Edet = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Edet, std::numeric_limits<double>::quiet_NaN());
      
      int atmo_index;
      atmo_index = std::numeric_limits<int>::min();
      
      std::vector<double> cosz;
      cosz = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Pdet;
      Pdet = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      int accept;
      accept = std::numeric_limits<int>::min();
      
      int detected;
      detected = std::numeric_limits<int>::min();
      
      int ntrials;
      ntrials = std::numeric_limits<int>::min();
      
      Eigen::Matrix<double, -1, 1> prob;
      prob = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(prob, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> event;
      event = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(3));
      stan::math::fill(event, std::numeric_limits<double>::quiet_NaN());
      
      double Nex_sim;
      Nex_sim = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> event_type;
      event_type = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(event_type, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      Nex_sim = Nex;
      current_statement__ = 59;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 17;
        assign(Lambda, cons_list(index_uni(i), nil_index_list()),
          categorical_rng(w_exposure, base_rng__),
          "assigning variable Lambda");
        current_statement__ = 18;
        accept = 0;
        current_statement__ = 19;
        detected = 0;
        current_statement__ = 20;
        ntrials = 0;
        current_statement__ = 55;
        while (logical_neq(accept, 1)) {
          current_statement__ = 30;
          if (logical_lte(Lambda[(i - 1)], Ns)) {
            current_statement__ = 28;
            assign(omega, nil_index_list(), varpi[(Lambda[(i - 1)] - 1)],
              "assigning variable omega");
          } else {
            current_statement__ = 27;
            if (logical_eq(Lambda[(i - 1)], (Ns + 1))) {
              current_statement__ = 25;
              assign(omega, nil_index_list(),
                sphere_lim_rng(1, v_lim, base_rng__, pstream__),
                "assigning variable omega");
            } else {
              current_statement__ = 24;
              if (logical_eq(Lambda[(i - 1)], (Ns + 2))) {
                current_statement__ = 21;
                atmo_index = categorical_rng(atmo_weights, base_rng__);
                current_statement__ = 22;
                assign(omega, nil_index_list(),
                  atmo_directions[(atmo_index - 1)],
                  "assigning variable omega");
              } 
            }
          }
          current_statement__ = 31;
          assign(cosz, cons_list(index_uni(i), nil_index_list()),
            stan::math::cos(omega_to_zenith(omega, pstream__)),
            "assigning variable cosz");
          current_statement__ = 38;
          if (logical_lte(Lambda[(i - 1)], (Ns + 1))) {
            current_statement__ = 35;
            assign(Esrc, cons_list(index_uni(i), nil_index_list()),
              spectrum_rng(alpha, Esrc_min, Esrc_max, base_rng__, pstream__),
              "assigning variable Esrc");
            current_statement__ = 36;
            assign(E, cons_list(index_uni(i), nil_index_list()),
              (Esrc[(i - 1)] / (1 + z[(Lambda[(i - 1)] - 1)])),
              "assigning variable E");
          } else {
            current_statement__ = 34;
            if (logical_eq(Lambda[(i - 1)], (Ns + 2))) {
              current_statement__ = 32;
              assign(E, cons_list(index_uni(i), nil_index_list()),
                atmo_energies[(atmo_index - 1)], "assigning variable E");
            } 
          }
          current_statement__ = 39;
          assign(Pdet, cons_list(index_uni(i), nil_index_list()),
            (CascadesEffectiveArea(E[(i - 1)], omega, pstream__) / aeff_max),
            "assigning variable Pdet");
          current_statement__ = 40;
          assign(Edet, cons_list(index_uni(i), nil_index_list()),
            pow(10,
              CascadeEnergyResolution_rng(E[(i - 1)], base_rng__, pstream__)),
            "assigning variable Edet");
          current_statement__ = 41;
          assign(prob, cons_list(index_uni(1), nil_index_list()),
            Pdet[(i - 1)], "assigning variable prob");
          current_statement__ = 42;
          assign(prob, cons_list(index_uni(2), nil_index_list()),
            (1 - Pdet[(i - 1)]), "assigning variable prob");
          current_statement__ = 43;
          ntrials = (ntrials + 1);
          current_statement__ = 53;
          if (logical_lt(ntrials, 1000000)) {
            current_statement__ = 48;
            detected = categorical_rng(prob, base_rng__);
            current_statement__ = 51;
            if ((primitive_value(logical_gte(Edet[(i - 1)], Edet_min)) &&
                primitive_value(logical_eq(detected, 1)))) {
              current_statement__ = 49;
              accept = 1;
            } 
          } else {
            current_statement__ = 44;
            accept = 1;
            current_statement__ = 45;
            if (pstream__) {
              stan_print(pstream__, "problem component: ");
              stan_print(pstream__, Lambda[(i - 1)]);
              stan_print(pstream__, "\n");
            }
            ;
          }
        }
        current_statement__ = 56;
        assign(event, cons_list(index_uni(i), nil_index_list()),
          CascadesAngularResolution_rng(E[(i - 1)],
            omega, base_rng__, pstream__), "assigning variable event");
        current_statement__ = 57;
        assign(event_type, cons_list(index_uni(i), nil_index_list()),
          cascade_type, "assigning variable event_type");}
      current_statement__ = 2;
      current_statement__ = 2;
      check_unit_vector(function__, "omega", omega);
      current_statement__ = 12;
      current_statement__ = 12;
      check_simplex(function__, "prob", prob);
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_unit_vector(function__, "event[sym1__]", event[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Lambda[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(omega[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Esrc[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(E[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Edet[(sym1__ - 1)]);}
      vars__.emplace_back(atmo_index);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(cosz[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Pdet[(sym1__ - 1)]);}
      vars__.emplace_back(accept);
      vars__.emplace_back(detected);
      vars__.emplace_back(ntrials);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(prob[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(event[(sym2__ - 1)][(sym1__ - 1)]);}}
      vars__.emplace_back(Nex_sim);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(event_type[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("Lambda");
    names__.emplace_back("omega");
    names__.emplace_back("Esrc");
    names__.emplace_back("E");
    names__.emplace_back("Edet");
    names__.emplace_back("atmo_index");
    names__.emplace_back("cosz");
    names__.emplace_back("Pdet");
    names__.emplace_back("accept");
    names__.emplace_back("detected");
    names__.emplace_back("ntrials");
    names__.emplace_back("prob");
    names__.emplace_back("event");
    names__.emplace_back("Nex_sim");
    names__.emplace_back("event_type");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Lambda" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Esrc" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "E" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Edet" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "atmo_index");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cosz" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Pdet" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "accept");
      param_names__.emplace_back(std::string() + "detected");
      param_names__.emplace_back(std::string() + "ntrials");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prob" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "event" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      param_names__.emplace_back(std::string() + "Nex_sim");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "event_type" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Lambda" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "omega" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Esrc" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "E" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Edet" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "atmo_index");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cosz" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Pdet" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "accept");
      param_names__.emplace_back(std::string() + "detected");
      param_names__.emplace_back(std::string() + "ntrials");
      for (int sym1__ = 1; sym1__ <= (2 - 1); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "prob" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "event" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      param_names__.emplace_back(std::string() + "Nex_sim");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "event_type" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"Lambda\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"generated_quantities\"},{\"name\":\"Esrc\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"E\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Edet\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"atmo_index\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"cosz\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Pdet\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"accept\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"detected\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"ntrials\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"prob\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"generated_quantities\"},{\"name\":\"event\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 3 << "}},\"block\":\"generated_quantities\"},{\"name\":\"Nex_sim\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"event_type\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"Lambda\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"omega\",\"type\":{\"name\":\"vector\",\"length\":" << 3 << "},\"block\":\"generated_quantities\"},{\"name\":\"Esrc\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"E\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"Edet\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"atmo_index\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"cosz\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Pdet\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"accept\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"detected\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"ntrials\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"prob\",\"type\":{\"name\":\"vector\",\"length\":" << (2 - 1) << "},\"block\":\"generated_quantities\"},{\"name\":\"event\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 3 << "}},\"block\":\"generated_quantities\"},{\"name\":\"Nex_sim\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"event_type\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = sim_code_model_namespace::sim_code_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


