functions
{
#include utils.stan
#include vMF.stan
#include interpolation.stan
#include sim_functions.stan
real CascadesEffAreaHist(real value_0,real value_1)
{
real hist_array[50,10] = {{1.21783064e-01,1.30803876e-01,1.41297518e-01,1.47216096e-01,
  1.53686750e-01,1.58328682e-01,1.58538160e-01,1.58400223e-01,
  1.58719513e-01,1.58691271e-01},
 {1.46061845e-01,1.64805048e-01,1.82990526e-01,1.96466501e-01,
  2.04176068e-01,2.06786767e-01,2.10500993e-01,2.10898261e-01,
  2.11533896e-01,2.11070306e-01},
 {1.70312092e-01,2.02094475e-01,2.31641254e-01,2.55219264e-01,
  2.66359356e-01,2.75160532e-01,2.72726669e-01,2.73172460e-01,
  2.75822454e-01,2.75783102e-01},
 {1.94033792e-01,2.43651396e-01,2.91139773e-01,3.22605246e-01,
  3.42596205e-01,3.50755850e-01,3.49645174e-01,3.47530774e-01,
  3.48983010e-01,3.55993779e-01},
 {2.14775027e-01,2.84200472e-01,3.57881373e-01,4.05277539e-01,
  4.37102200e-01,4.44150776e-01,4.43163133e-01,4.38889669e-01,
  4.40475453e-01,4.52414086e-01},
 {2.34352539e-01,3.27975347e-01,4.29751065e-01,4.99142994e-01,
  5.45552636e-01,5.54904801e-01,5.52110198e-01,5.45896599e-01,
  5.44398398e-01,5.62549299e-01},
 {2.46005096e-01,3.70671287e-01,5.07513864e-01,6.06049766e-01,
  6.73213000e-01,6.86185839e-01,6.75301540e-01,6.66250107e-01,
  6.72421331e-01,6.99691173e-01},
 {2.54041763e-01,4.07746886e-01,5.93695622e-01,7.32992823e-01,
  8.14103111e-01,8.38353696e-01,8.27393090e-01,8.02998220e-01,
  8.05065027e-01,8.50286624e-01},
 {2.55618588e-01,4.46845164e-01,6.77322555e-01,8.69050659e-01,
  9.79512855e-01,1.00532610e+00,9.90549913e-01,9.65180741e-01,
  9.71864528e-01,1.03141146e+00},
 {2.50486478e-01,4.67628906e-01,7.60365886e-01,1.02163318e+00,
  1.17654451e+00,1.20459710e+00,1.18102907e+00,1.13525014e+00,
  1.14345700e+00,1.22518314e+00},
 {2.38365635e-01,4.90862639e-01,8.50589905e-01,1.18199512e+00,
  1.36777564e+00,1.42879717e+00,1.38296906e+00,1.32524624e+00,
  1.32539462e+00,1.43835400e+00},
 {2.24640423e-01,4.99150733e-01,9.24707592e-01,1.34436664e+00,
  1.57384234e+00,1.65493523e+00,1.61765146e+00,1.53692123e+00,
  1.53415729e+00,1.68222830e+00},
 {2.03797771e-01,5.02932732e-01,9.91739599e-01,1.50254932e+00,
  1.83371928e+00,1.91576978e+00,1.86398350e+00,1.77601604e+00,
  1.77802440e+00,1.95223313e+00},
 {1.82018586e-01,4.91486113e-01,1.05313776e+00,1.64563180e+00,
  2.07822002e+00,2.20715450e+00,2.12447206e+00,2.04619007e+00,
  2.02860360e+00,2.22140006e+00},
 {1.59356664e-01,4.75435509e-01,1.08421545e+00,1.81444416e+00,
  2.31579214e+00,2.48379113e+00,2.44499509e+00,2.30765985e+00,
  2.29551987e+00,2.51433091e+00},
 {1.36495254e-01,4.46759899e-01,1.10613377e+00,1.95546702e+00,
  2.57847544e+00,2.85029516e+00,2.74769278e+00,2.59302699e+00,
  2.60517865e+00,2.87361883e+00},
 {1.14817891e-01,4.11370025e-01,1.10793126e+00,2.06280601e+00,
  2.84507272e+00,3.16272345e+00,3.11179334e+00,2.92303173e+00,
  2.91541796e+00,3.20677796e+00},
 {9.34284493e-02,3.76186926e-01,1.09565077e+00,2.18715972e+00,
  3.10968505e+00,3.51238844e+00,3.44863235e+00,3.24983362e+00,
  3.26305261e+00,3.60721236e+00},
 {7.61056575e-02,3.35995109e-01,1.07624339e+00,2.25891560e+00,
  3.36177835e+00,3.87347772e+00,3.88666607e+00,3.66638293e+00,
  3.61405788e+00,3.99494321e+00},
 {6.03284489e-02,2.98373673e-01,1.04188143e+00,2.32108341e+00,
  3.60199943e+00,4.24586700e+00,4.28964345e+00,4.07554522e+00,
  3.98161623e+00,4.39299206e+00},
 {4.70037763e-02,2.56652380e-01,9.80933312e-01,2.35495340e+00,
  3.80492625e+00,4.64044226e+00,4.77525296e+00,4.50099942e+00,
  4.43908151e+00,4.89879641e+00},
 {3.63016968e-02,2.20282154e-01,9.19488737e-01,2.35092642e+00,
  4.00798096e+00,5.06646369e+00,5.21602850e+00,5.01534459e+00,
  4.89104364e+00,5.35409574e+00},
 {2.68721094e-02,1.84634635e-01,8.42817916e-01,2.32789868e+00,
  4.16757841e+00,5.46561870e+00,5.80577519e+00,5.54245508e+00,
  5.37765835e+00,5.87756705e+00},
 {2.02990558e-02,1.54799203e-01,7.70565399e-01,2.27577710e+00,
  4.37900036e+00,5.90316087e+00,6.38022687e+00,6.21809355e+00,
  6.04662483e+00,6.47793458e+00},
 {1.50418695e-02,1.26934420e-01,6.96274478e-01,2.22737344e+00,
  4.48836477e+00,6.32647503e+00,7.01757782e+00,6.89899870e+00,
  6.69816661e+00,7.10456060e+00},
 {1.10226221e-02,1.02902928e-01,6.16980450e-01,2.14649089e+00,
  4.57770078e+00,6.82972921e+00,7.73242338e+00,7.63627698e+00,
  7.41110521e+00,7.80390419e+00},
 {8.01123596e-03,8.29523138e-02,5.48044508e-01,2.04592050e+00,
  4.71114692e+00,7.29499230e+00,8.61745884e+00,8.53307811e+00,
  8.27028523e+00,8.54293886e+00},
 {5.73113837e-03,6.61328734e-02,4.80819697e-01,1.93029258e+00,
  4.80123540e+00,7.86571963e+00,9.48607468e+00,9.61617531e+00,
  9.30700218e+00,9.44944173e+00},
 {4.10805510e-03,5.33182632e-02,4.17407143e-01,1.83689954e+00,
  4.86669952e+00,8.43465262e+00,1.05510815e+01,1.08901202e+01,
  1.04360569e+01,1.03539911e+01},
 {2.91791428e-03,4.25488763e-02,3.66054210e-01,1.75422505e+00,
  4.96233835e+00,9.02378769e+00,1.18558342e+01,1.23305498e+01,
  1.18497110e+01,1.15939100e+01},
 {2.04644033e-03,3.28357675e-02,3.19469837e-01,1.64657529e+00,
  4.99129111e+00,9.67810147e+00,1.32694120e+01,1.41897680e+01,
  1.35799591e+01,1.30155084e+01},
 {5.82114603e-04,1.03430530e-02,9.94486941e-02,5.38336142e-01,
  1.69829485e+00,3.38199532e+00,4.68802331e+00,5.06824192e+00,
  4.87102496e+00,4.53572486e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00},
 {0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00,0.00000000e+00,0.00000000e+00,
  0.00000000e+00,0.00000000e+00}};
real hist_edge_0[51] = {3.00000000e+04,3.61059544e+04,4.34546648e+04,5.22990716e+04,
 6.29435965e+04,7.57546209e+04,9.11730963e+04,1.09729722e+05,
 1.32063211e+05,1.58942276e+05,1.91292086e+05,2.30226112e+05,
 2.77084450e+05,3.33479951e+05,4.01353730e+05,4.83041983e+05,
 5.81356394e+05,6.99680915e+05,8.42088241e+05,1.01347999e+06,
 1.21975541e+06,1.46801444e+06,1.76680208e+06,2.12640252e+06,
 2.55919308e+06,3.08007029e+06,3.70696258e+06,4.46144740e+06,
 5.36949388e+06,6.46235672e+06,7.77765190e+06,9.36065150e+06,
 1.12658419e+07,1.35587991e+07,1.63184461e+07,1.96397690e+07,
 2.36370869e+07,2.84479860e+07,3.42380563e+07,4.12065900e+07,
 4.95934420e+07,5.96872852e+07,7.18355466e+07,8.64563657e+07,
 1.04052987e+08,1.25231080e+08,1.50719589e+08,1.81395820e+08,
 2.18315640e+08,2.62749819e+08,3.16227766e+08};
real hist_edge_1[11] = {-1. ,-0.8,-0.6,-0.4,-0.2, 0. , 0.2, 0.4, 0.6, 0.8, 1. };
return hist_array[binary_search(value_0, hist_edge_0)][binary_search(value_1, hist_edge_1)];
}
real spectrum_rng(real alpha,real e_low,real e_up)
{
real uni_sample;
real norm;
norm = ((1-alpha)/((e_up^(1-alpha))-(e_low^(1-alpha))));
uni_sample = uniform_rng(0, 1);
return ((((uni_sample*(1-alpha))/norm)+(e_low^(1-alpha)))^(1/(1-alpha)));
}
real flux_conv(real alpha,real e_low,real e_up)
{
real f1;
real f2;
if(alpha == 1.0)
{
f1 = (log(e_up)-log(e_low));
}
else
{
f1 = ((1/(1-alpha))*((e_up^(1-alpha))-(e_low^(1-alpha))));
}
if(alpha == 2.0)
{
f2 = (log(e_up)-log(e_low));
}
else
{
f2 = ((1/(2-alpha))*((e_up^(2-alpha))-(e_low^(2-alpha))));
}
return (f1/f2);
}
vector CascadesAngularResolution_rng(real true_energy,vector true_dir)
{
vector[6] CascadesAngularResolutionPolyCoeffs = [-4.84839608e-01, 3.59082699e+00, 4.39765349e+01,-4.86964043e+02,
  1.50499694e+03,-1.48474342e+03]';
return vMF_rng(true_dir, eval_poly1d(log10(truncate_value(true_energy, 100.0, 100000000.0)),CascadesAngularResolutionPolyCoeffs));
}
real c_energy_res_mix_rng(vector means,vector sigmas,vector weights)
{
int index;
index = categorical_rng(weights);
return lognormal_rng(means[index], sigmas[index]);
}
real CascadeEnergyResolution_rng(real true_energy)
{
real CascadesEnergyResolutionMuPolyCoeffs[3,4] = {{ 6.53313494e-02,-1.12000300e+00, 6.87898447e+00,-1.02551114e+01},
 { 3.38232247e-02,-5.53146905e-01, 3.73111309e+00,-4.46089856e+00},
 { 1.85995099e-03,-3.46620393e-02, 1.13092146e+00,-1.83372203e-01}};
real CascadesEnergyResolutionSdPolyCoeffs[3,4] = {{-2.01420133e-03, 4.02070407e-02,-2.42477818e-01, 5.12506734e-01},
 {-6.68041324e-04, 1.23887853e-02,-6.38367085e-02, 1.22855310e-01},
 { 2.77487585e-05,-1.91839601e-03, 2.75232763e-02,-7.22611701e-02}};
real mu_e_res[3];
real sigma_e_res[3];
vector[3] weights;
for (i in 1:3)
{
weights[i] = 1.0/3;
}
for (i in 1:3)
{
mu_e_res[i] = eval_poly1d(log10(truncate_value(true_energy, 30000.00000000001, 10000000.0)), to_vector(CascadesEnergyResolutionMuPolyCoeffs[i]));
sigma_e_res[i] = eval_poly1d(log10(truncate_value(true_energy, 30000.00000000001, 10000000.0)), to_vector(CascadesEnergyResolutionSdPolyCoeffs[i]));
}
return c_energy_res_mix_rng(to_vector(log(mu_e_res)), to_vector(sigma_e_res), weights);
}
real CascadesAngularResolution(real true_energy,vector true_dir,vector reco_dir)
{
vector[6] CascadesAngularResolutionPolyCoeffs = [-4.84839608e-01, 3.59082699e+00, 4.39765349e+01,-4.86964043e+02,
  1.50499694e+03,-1.48474342e+03]';
return vMF_lpdf(reco_dir | true_dir, eval_poly1d(log10(truncate_value(true_energy, 100.0, 100000000.0)),CascadesAngularResolutionPolyCoeffs));
}
real c_energy_res_mix(real x,vector means,vector sigmas,vector weights)
{
vector[3] result;
for (i in 1:3)
{
result[i] = (log(weights)[i]+lognormal_lpdf(x | means[i], sigmas[i]));
}
return log_sum_exp(result);
}
real CascadeEnergyResolution(real true_energy,real reco_energy)
{
real CascadesEnergyResolutionMuPolyCoeffs[3,4] = {{ 6.53313494e-02,-1.12000300e+00, 6.87898447e+00,-1.02551114e+01},
 { 3.38232247e-02,-5.53146905e-01, 3.73111309e+00,-4.46089856e+00},
 { 1.85995099e-03,-3.46620393e-02, 1.13092146e+00,-1.83372203e-01}};
real CascadesEnergyResolutionSdPolyCoeffs[3,4] = {{-2.01420133e-03, 4.02070407e-02,-2.42477818e-01, 5.12506734e-01},
 {-6.68041324e-04, 1.23887853e-02,-6.38367085e-02, 1.22855310e-01},
 { 2.77487585e-05,-1.91839601e-03, 2.75232763e-02,-7.22611701e-02}};
real mu_e_res[3];
real sigma_e_res[3];
vector[3] weights;
for (i in 1:3)
{
weights[i] = 1.0/3;
}
for (i in 1:3)
{
mu_e_res[i] = eval_poly1d(log10(truncate_value(true_energy, 30000.00000000001, 10000000.0)), to_vector(CascadesEnergyResolutionMuPolyCoeffs[i]));
sigma_e_res[i] = eval_poly1d(log10(truncate_value(true_energy, 30000.00000000001, 10000000.0)), to_vector(CascadesEnergyResolutionSdPolyCoeffs[i]));
}
return c_energy_res_mix(log10(reco_energy), to_vector(log(mu_e_res)), to_vector(sigma_e_res), weights);
}
real CascadesEffectiveArea(real true_energy,vector true_dir)
{
return CascadesEffAreaHist(true_energy, cos(pi() - acos(true_dir[3])));
}
}
data
{
int Ns;
unit_vector[3] varpi[Ns];
vector[Ns] D;
vector[Ns+1] z;
real alpha;
real Edet_min;
real Esrc_min;
real Esrc_max;
real L;
real F_diff;
int Ngrid;
vector[Ngrid] alpha_grid;
vector[Ngrid] integral_grid[Ns+1];
real aeff_max;
real v_lim;
real T;
real F_atmo;
real atmo_integ_val;
int N_atmo;
unit_vector[3] atmo_directions[N_atmo];
vector[N_atmo] atmo_energies;
simplex[N_atmo] atmo_weights;
}
transformed data
{
vector[Ns+2] F;
simplex[Ns+2] w_exposure;
vector[Ns+2] eps;
int track_type;
int cascade_type;
real Ftot;
real Fs;
real f;
real Nex;
int N;
track_type = 0;
cascade_type = 1;
Fs = 0.0;
for (k in 1:Ns)
{
F[k] = L/ (4 * pi() * pow(D[k] * 3.086e+22, 2));
F[k]*=flux_conv(alpha, Esrc_min, Esrc_max);
Fs += F[k];
}
F[Ns+1] = F_diff;
F[Ns+2] = F_atmo;
Ftot = ((Fs+F_diff)+F_atmo);
f = Fs/Ftot;
print("f: ", f);
eps = get_exposure_factor_atmo(alpha, alpha_grid, integral_grid, atmo_integ_val, T, Ns);
Nex = get_Nex(F, eps);
w_exposure = get_exposure_weights(F, eps);
N = poisson_rng(Nex);
print(w_exposure);
print(Ngrid);
print(Nex);
print(N);
}
generated quantities
{
int Lambda[N];
unit_vector[3] omega;
vector[N] Esrc;
vector[N] E;
vector[N] Edet;
int atmo_index;
real cosz[N];
real Pdet[N];
int accept;
int detected;
int ntrials;
simplex[2] prob;
unit_vector[3] event[N];
real Nex_sim;
vector[N] event_type;
Nex_sim = Nex;
for (i in 1:N)
{
Lambda[i] = categorical_rng(w_exposure);
accept = 0;
detected = 0;
ntrials = 0;
while((accept!=1))
{
if(Lambda[i] <= Ns)
{
omega = varpi[Lambda[i]];
}
else if(Lambda[i] == (Ns+1))
{
omega = sphere_lim_rng(1, v_lim);
}
else if(Lambda[i] == (Ns+2))
{
atmo_index = categorical_rng(atmo_weights);
omega = atmo_directions[atmo_index];
}
cosz[i] = cos(omega_to_zenith(omega));
if(Lambda[i] <= (Ns+1))
{
Esrc[i] = spectrum_rng(alpha, Esrc_min, Esrc_max);
E[i] = (Esrc[i]/(1+z[Lambda[i]]));
}
else if(Lambda[i] == (Ns+2))
{
E[i] = atmo_energies[atmo_index];
}
Pdet[i] = (CascadesEffectiveArea(E[i], omega)/aeff_max);
Edet[i] = (10^CascadeEnergyResolution_rng(E[i]));
prob[1] = Pdet[i];
prob[2] = (1-Pdet[i]);
ntrials += 1;
if(ntrials< 1000000)
{
detected = categorical_rng(prob);
if((Edet[i] >= Edet_min) && ((detected==1)))
{
accept = 1;
}
}
else
{
accept = 1;
print("problem component: ", Lambda[i]);
;
}
}
event[i] = CascadesAngularResolution_rng(E[i], omega);
event_type[i] = cascade_type;
}
}
