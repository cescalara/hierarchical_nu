
// Code generated by stanc v2.24.1
#include <stan/model/model_header.hpp>
namespace model_code_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1665, column 0 to column 29)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1666, column 0 to column 36)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1667, column 0 to column 36)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1668, column 0 to column 31)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1669, column 0 to column 48)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1673, column 0 to column 10)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1674, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1675, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1676, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1677, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1678, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1679, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1680, column 0 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1681, column 0 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1682, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1685, column 0 to column 48)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1686, column 0 to column 43)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1687, column 0 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1684, column 0 to line 1688, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1683, column 0 to line 1688, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1689, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1690, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1691, column 0 to column 30)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1692, column 0 to column 16)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1693, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1696, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1713, column 0 to column 85)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1714, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1712, column 0 to line 1715, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1711, column 5 to line 1715, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1707, column 0 to column 64)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1708, column 0 to column 28)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1709, column 0 to column 32)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1706, column 0 to line 1710, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1705, column 5 to line 1715, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1701, column 0 to column 64)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1702, column 0 to column 28)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1703, column 0 to column 74)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1700, column 0 to line 1704, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1699, column 0 to line 1715, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1716, column 0 to column 58)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1717, column 0 to column 57)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1698, column 0 to line 1718, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1697, column 0 to line 1718, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1695, column 0 to line 1719, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1694, column 0 to line 1719, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1720, column 0 to column 88)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1721, column 0 to column 22)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1727, column 0 to column 29)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1726, column 0 to line 1728, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1725, column 0 to line 1728, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1729, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1730, column 0 to column 23)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1731, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1732, column 0 to column 50)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1733, column 0 to column 46)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1734, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1642, column 0 to column 6)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1643, column 25 to column 26)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1643, column 0 to column 28)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1644, column 7 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1644, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1645, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1646, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1647, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1648, column 21 to column 23)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1648, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1649, column 7 to column 9)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1649, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1650, column 7 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1650, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1651, column 0 to column 10)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1652, column 7 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1652, column 0 to column 25)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1653, column 28 to column 32)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1653, column 7 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1653, column 0 to column 34)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1654, column 0 to column 20)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1655, column 7 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1655, column 0 to column 21)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1656, column 24 to column 28)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1656, column 7 to column 12)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1656, column 0 to column 30)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1657, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1658, column 0 to column 13)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1659, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1660, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1661, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1669, column 40 to column 41)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1674, column 7 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1675, column 7 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1678, column 16 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1678, column 7 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1679, column 7 to column 11)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1681, column 7 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 13, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 18, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 16, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 22, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 11, column 45, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 31, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 31, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 32, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 35, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 34, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 34, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 38, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 29, column 39, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 46, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 47, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 49, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 48, column 15, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 48, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 51, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 45, column 39, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 59, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 58, column 25, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 58, column 10, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 56, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 55, column 20, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 55, column 5, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 61, column 5, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 54, column 55, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 68, column 18, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 68, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 69, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 72, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 71, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 70, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 74, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 66, column 0, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 79, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 80, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 81, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 89, column 12, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 95, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 93, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 92, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 91, column 16, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 90, column 12, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 88, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 87, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 86, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 85, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 84, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 83, column 8, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 82, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 98, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/utils.stan', line 78, column 0, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 3, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 13, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 18, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 17, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 17, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 20, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 21, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 11, column 34, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 30, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 31, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 31, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 32, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 32, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 33, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 33, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 36, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 35, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 35, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 39, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 40, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 42, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 28, column 44, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 52, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 53, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 54, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 55, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 57, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 58, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 59, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 60, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 62, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 63, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 64, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 66, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 65, column 57, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 65, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 61, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 61, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 70, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 50, column 44, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 79, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 80, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 80, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 82, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 83, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 83, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 85, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 86, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 77, column 38, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 96, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 97, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 98, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 99, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 100, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 102, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 103, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 104, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 106, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 94, column 31, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 117, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 118, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 119, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 121, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 122, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 124, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 125, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 126, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 128, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 115, column 47, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 140, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 145, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 144, column 7, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 142, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 141, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 141, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 147, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/vMF.stan', line 138, column 47, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 4, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 14, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 15, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 16, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 17, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 18, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 20, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 21, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 22, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 23, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 38, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 23, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 37, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 35, column 6, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 34, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 28, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 25, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 35, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 33, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 46, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 45, column 7, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 43, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 30, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 42, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 49, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 50, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 51, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 52, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 54, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 56, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/interpolation.stan', line 12, column 59, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 5, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 7, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 8, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 8, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 12, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 10, column 19, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 10, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 15, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 17, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 5, column 124, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 26, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 27, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 27, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 31, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 29, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 29, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 35, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 24, column 90, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 44, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 46, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 48, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 42, column 81, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 57, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 58, column 9, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 58, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 60, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 63, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 62, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 62, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 67, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 66, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 66, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 70, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 55, column 50, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 80, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 82, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 85, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 84, column 14, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 84, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 88, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 90, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 78, column 35, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 98, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 99, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 102, column 4, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 101, column 17, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 101, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 105, column 2, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/stan_files/sim_functions.stan', line 96, column 35, included from\n'/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 6, column 0)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 9, column 0 to line 848, column 49)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 849, column 0 to line 919, column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 920, column 0 to column 85)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 921, column 0 to column 92)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 8, column 0 to line 922, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 925, column 0 to line 926, column 35)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 927, column 0 to column 166)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 924, column 0 to line 928, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 931, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 934, column 0 to column 70)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 933, column 0 to line 935, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 932, column 0 to line 935, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 936, column 0 to column 27)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 930, column 0 to line 937, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 940, column 0 to line 945, column 36)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 946, column 0 to line 951, column 36)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 952, column 0 to column 17)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 953, column 0 to column 20)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 954, column 0 to column 18)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 957, column 0 to column 19)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 956, column 0 to line 958, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 955, column 0 to line 958, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 961, column 0 to column 159)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 962, column 0 to column 162)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 960, column 0 to line 963, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 959, column 0 to line 963, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 964, column 0 to column 104)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 939, column 0 to line 965, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 968, column 0 to column 77)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 967, column 0 to line 969, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 972, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 973, column 0 to column 7)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 980, column 0 to column 59)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 979, column 0 to line 981, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 976, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 975, column 0 to line 977, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 974, column 0 to line 981, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 982, column 0 to column 27)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 983, column 0 to column 14)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 971, column 0 to line 984, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 987, column 0 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 988, column 0 to column 8)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 995, column 0 to column 58)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 994, column 0 to line 996, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 991, column 0 to column 28)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 990, column 0 to line 992, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 989, column 0 to line 996, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1003, column 0 to column 58)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1002, column 0 to line 1004, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 999, column 0 to column 28)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 998, column 0 to line 1000, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 997, column 0 to line 1004, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1005, column 0 to column 15)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 986, column 0 to line 1006, column 1)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1009, column 0 to line 1608, column 69)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1609, column 0 to line 1613, column 74)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1614, column 0 to line 1630, column 46)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1631, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1632, column 0 to column 33)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1633, column 0 to column 228)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1634, column 0 to column 232)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1635, column 0 to column 110)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1636, column 0 to column 114)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1637, column 0 to column 118)",
                                                      " (in '/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files/model_code.stan', line 1008, column 0 to line 1638, column 1)"};


template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
trapz(const Eigen::Matrix<T0__, -1, 1>& x_values,
      const Eigen::Matrix<T1__, -1, 1>& y_values, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 96;
    N = num_elements(x_values);
    local_scalar_t__ I;
    I = DUMMY_VAR__;
    
    current_statement__ = 97;
    I = 0;
    current_statement__ = 100;
    for (int i = 1; i <= (N - 1); ++i) {
      current_statement__ = 98;
      I = (I +
            ((0.5 * (x_values[((i + 1) - 1)] - x_values[(i - 1)])) *
              (y_values[(i - 1)] + y_values[((i + 1) - 1)])));}
    current_statement__ = 101;
    return I;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct trapz_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const Eigen::Matrix<T0__, -1, 1>& x_values,
           const Eigen::Matrix<T1__, -1, 1>& y_values,
           std::ostream* pstream__)  const 
{
return trapz(x_values, y_values, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
linspace(const T0__& A, const T1__& B, const int& N, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 103;
    validate_non_negative_index("output", "N", N);
    Eigen::Matrix<local_scalar_t__, -1, 1> output;
    output = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
    stan::math::fill(output, DUMMY_VAR__);
    
    local_scalar_t__ dx;
    dx = DUMMY_VAR__;
    
    current_statement__ = 105;
    dx = ((B - A) / (N - 1));
    current_statement__ = 108;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 106;
      assign(output, cons_list(index_uni(i), nil_index_list()),
        (A + ((i - 1) * dx)), "assigning variable output");}
    current_statement__ = 109;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct linspace_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& A, const T1__& B, const int& N,
           std::ostream* pstream__)  const 
{
return linspace(A, B, N, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
eval_poly1d(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& coeffs,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 111;
    N = num_elements(coeffs);
    local_scalar_t__ res;
    res = DUMMY_VAR__;
    
    current_statement__ = 112;
    res = 0;
    current_statement__ = 115;
    for (int i = 1; i <= N; ++i) {
      current_statement__ = 113;
      res = (res + (coeffs[(i - 1)] * pow(x, (N - i))));}
    current_statement__ = 116;
    return res;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct eval_poly1d_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& coeffs,
           std::ostream* pstream__)  const 
{
return eval_poly1d(x, coeffs, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
truncate_value(const T0__& x, const T1__& min_val, const T2__& max_val,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 123;
    if (logical_lt(x, min_val)) {
      current_statement__ = 121;
      return min_val;
    } else {
      current_statement__ = 120;
      if (logical_gt(x, max_val)) {
        current_statement__ = 118;
        return max_val;
      } 
    }
    current_statement__ = 124;
    return x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct truncate_value_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& x, const T1__& min_val, const T2__& max_val,
           std::ostream* pstream__)  const 
{
return truncate_value(x, min_val, max_val, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
generate_bin_edges(const T0__& lower_edge, const T1__& upper_edge,
                   const int& nbins, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 126;
    validate_non_negative_index("binedges", "nbins + 1", (nbins + 1));
    std::vector<local_scalar_t__> binedges;
    binedges = std::vector<local_scalar_t__>((nbins + 1), DUMMY_VAR__);
    
    local_scalar_t__ binwidth;
    binwidth = DUMMY_VAR__;
    
    current_statement__ = 128;
    binwidth = ((upper_edge - lower_edge) / nbins);
    current_statement__ = 131;
    for (int i = 1; i <= (nbins + 1); ++i) {
      current_statement__ = 129;
      assign(binedges, cons_list(index_uni(i), nil_index_list()),
        (lower_edge + ((i - 1) * binwidth)), "assigning variable binedges");}
    current_statement__ = 132;
    return binedges;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct generate_bin_edges_functor__ {
template <typename T0__, typename T1__>
std::vector<stan::promote_args_t<T0__,
T1__>>
operator()(const T0__& lower_edge, const T1__& upper_edge, const int& nbins,
           std::ostream* pstream__)  const 
{
return generate_bin_edges(lower_edge, upper_edge, nbins, pstream__);
}
};

template <typename T0__, typename T1__>
int
binary_search(const T0__& value, const std::vector<T1__>& binedges,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int L;
    L = std::numeric_limits<int>::min();
    
    current_statement__ = 134;
    L = 1;
    int R;
    R = std::numeric_limits<int>::min();
    
    current_statement__ = 135;
    R = size(binedges);
    int m;
    m = std::numeric_limits<int>::min();
    
    current_statement__ = 149;
    if (logical_lt(value, binedges[(1 - 1)])) {
      current_statement__ = 148;
      return 0;
    } else {
      current_statement__ = 147;
      if (logical_gt(value, binedges[(R - 1)])) {
        current_statement__ = 146;
        return (R + 1);
      } else {
        current_statement__ = 144;
        while (logical_lt(L, (R - 1))) {
          current_statement__ = 137;
          m = ((L + R) / 2);
          current_statement__ = 142;
          if (logical_lt(binedges[(m - 1)], value)) {
            current_statement__ = 141;
            L = m;
          } else {
            current_statement__ = 140;
            if (logical_gt(binedges[(m - 1)], value)) {
              current_statement__ = 139;
              R = m;
            } else {
              current_statement__ = 138;
              return m;
            }
          }
        }
      }
    }
    current_statement__ = 150;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct binary_search_functor__ {
template <typename T0__, typename T1__>
int
operator()(const T0__& value, const std::vector<T1__>& binedges,
           std::ostream* pstream__)  const 
{
return binary_search(value, binedges, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
abs_val(const Eigen::Matrix<T0__, -1, 1>& input_vector,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ av;
    av = DUMMY_VAR__;
    
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 153;
    n = num_elements(input_vector);
    local_scalar_t__ sum_squares;
    sum_squares = DUMMY_VAR__;
    
    current_statement__ = 154;
    sum_squares = 0;
    current_statement__ = 157;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 155;
      sum_squares = (sum_squares +
                      (input_vector[(i - 1)] * input_vector[(i - 1)]));}
    current_statement__ = 158;
    av = stan::math::sqrt(sum_squares);
    current_statement__ = 159;
    return av;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct abs_val_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const Eigen::Matrix<T0__, -1, 1>& input_vector,
           std::ostream* pstream__)  const 
{
return abs_val(input_vector, pstream__);
}
};

template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
sample_orthonormal_to_rng(const Eigen::Matrix<T0__, -1, 1>& mu,
                          RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int dim;
    dim = std::numeric_limits<int>::min();
    
    current_statement__ = 161;
    dim = num_elements(mu);
    current_statement__ = 162;
    validate_non_negative_index("v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> v;
    v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 164;
    validate_non_negative_index("proj_mu_v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> proj_mu_v;
    proj_mu_v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(proj_mu_v, DUMMY_VAR__);
    
    current_statement__ = 166;
    validate_non_negative_index("orthto", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> orthto;
    orthto = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(orthto, DUMMY_VAR__);
    
    current_statement__ = 170;
    for (int i = 1; i <= dim; ++i) {
      current_statement__ = 168;
      assign(v, cons_list(index_uni(i), nil_index_list()),
        normal_rng(0, 1, base_rng__), "assigning variable v");}
    current_statement__ = 171;
    assign(proj_mu_v, nil_index_list(),
      divide(multiply(mu, dot_product(mu, v)), abs_val(mu, pstream__)),
      "assigning variable proj_mu_v");
    current_statement__ = 172;
    assign(orthto, nil_index_list(), subtract(v, proj_mu_v),
      "assigning variable orthto");
    current_statement__ = 173;
    return divide(orthto, abs_val(orthto, pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sample_orthonormal_to_rng_functor__ {
template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& mu, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return sample_orthonormal_to_rng(mu, base_rng__, pstream__);
}
};

template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
sample_weight_rng(const T0__& kappa, const int& dim, RNG& base_rng__,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ sdim;
    sdim = DUMMY_VAR__;
    
    current_statement__ = 175;
    sdim = (dim - 1);
    local_scalar_t__ b;
    b = DUMMY_VAR__;
    
    current_statement__ = 176;
    b = (sdim /
          (stan::math::sqrt(((4. * pow(kappa, 2)) + pow(sdim, 2))) +
            (2 * kappa)));
    local_scalar_t__ x;
    x = DUMMY_VAR__;
    
    current_statement__ = 177;
    x = ((1 - b) / (1 + b));
    local_scalar_t__ c;
    c = DUMMY_VAR__;
    
    current_statement__ = 178;
    c = ((kappa * x) + (sdim * stan::math::log((1 - pow(x, 2)))));
    int i;
    i = std::numeric_limits<int>::min();
    
    current_statement__ = 179;
    i = 0;
    local_scalar_t__ z;
    z = DUMMY_VAR__;
    
    local_scalar_t__ w;
    w = DUMMY_VAR__;
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 190;
    while (logical_eq(i, 0)) {
      current_statement__ = 183;
      z = beta_rng((sdim / 2), (sdim / 2), base_rng__);
      current_statement__ = 184;
      w = ((1 - ((1 + b) * z)) / (1 - ((1 - b) * z)));
      current_statement__ = 185;
      u = uniform_rng(0, 1, base_rng__);
      current_statement__ = 188;
      if (logical_gte(
            (((kappa * w) + (sdim * stan::math::log((1 - (x * w))))) - c),
            stan::math::log(u))) {
        current_statement__ = 186;
        i = 1;
      } 
    }
    current_statement__ = 191;
    return w;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sample_weight_rng_functor__ {
template <typename T0__, typename RNG>
stan::promote_args_t<T0__>
operator()(const T0__& kappa, const int& dim, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return sample_weight_rng(kappa, dim, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
vMF_rng(const Eigen::Matrix<T0__, -1, 1>& mu, const T1__& kappa,
        RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int dim;
    dim = std::numeric_limits<int>::min();
    
    current_statement__ = 193;
    dim = num_elements(mu);
    current_statement__ = 194;
    validate_non_negative_index("result", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ w;
    w = DUMMY_VAR__;
    
    current_statement__ = 196;
    w = sample_weight_rng(kappa, dim, base_rng__, pstream__);
    current_statement__ = 197;
    validate_non_negative_index("v", "dim", dim);
    Eigen::Matrix<local_scalar_t__, -1, 1> v;
    v = Eigen::Matrix<local_scalar_t__, -1, 1>(dim);
    stan::math::fill(v, DUMMY_VAR__);
    
    current_statement__ = 198;
    assign(v, nil_index_list(),
      sample_orthonormal_to_rng(mu, base_rng__, pstream__),
      "assigning variable v");
    current_statement__ = 199;
    assign(result, nil_index_list(),
      add(multiply(v, stan::math::sqrt((1 - pow(w, 2)))), multiply(w, mu)),
      "assigning variable result");
    current_statement__ = 200;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vMF_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& mu, const T1__& kappa,
           RNG& base_rng__, std::ostream* pstream__)  const 
{
return vMF_rng(mu, kappa, base_rng__, pstream__);
}
};

template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
sphere_rng(const T0__& radius, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 203;
    u = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ v;
    v = DUMMY_VAR__;
    
    current_statement__ = 204;
    v = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 205;
    phi = ((2 * stan::math::pi()) * u);
    local_scalar_t__ theta;
    theta = DUMMY_VAR__;
    
    current_statement__ = 206;
    theta = stan::math::acos(((2 * v) - 1));
    current_statement__ = 207;
    assign(result, cons_list(index_uni(1), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::cos(phi)),
      "assigning variable result");
    current_statement__ = 208;
    assign(result, cons_list(index_uni(2), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::sin(phi)),
      "assigning variable result");
    current_statement__ = 209;
    assign(result, cons_list(index_uni(3), nil_index_list()),
      (radius * stan::math::cos(theta)), "assigning variable result");
    current_statement__ = 210;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sphere_rng_functor__ {
template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const T0__& radius, RNG& base_rng__, std::ostream* pstream__)  const 
{
return sphere_rng(radius, base_rng__, pstream__);
}
};

template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
sphere_lim_rng(const T0__& radius, const T1__& v_lim, RNG& base_rng__,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(result, DUMMY_VAR__);
    
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 213;
    u = uniform_rng(0, 1, base_rng__);
    local_scalar_t__ v;
    v = DUMMY_VAR__;
    
    current_statement__ = 214;
    v = uniform_rng(v_lim, 1, base_rng__);
    local_scalar_t__ phi;
    phi = DUMMY_VAR__;
    
    current_statement__ = 215;
    phi = ((2 * stan::math::pi()) * u);
    local_scalar_t__ theta;
    theta = DUMMY_VAR__;
    
    current_statement__ = 216;
    theta = stan::math::acos(((2 * v) - 1));
    current_statement__ = 217;
    assign(result, cons_list(index_uni(1), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::cos(phi)),
      "assigning variable result");
    current_statement__ = 218;
    assign(result, cons_list(index_uni(2), nil_index_list()),
      ((radius * stan::math::sin(theta)) * stan::math::sin(phi)),
      "assigning variable result");
    current_statement__ = 219;
    assign(result, cons_list(index_uni(3), nil_index_list()),
      (radius * stan::math::cos(theta)), "assigning variable result");
    current_statement__ = 220;
    return result;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sphere_lim_rng_functor__ {
template <typename T0__, typename T1__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& radius, const T1__& v_lim, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return sphere_lim_rng(radius, v_lim, base_rng__, pstream__);
}
};

template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
vMF_lpdf(const Eigen::Matrix<T0__, -1, 1>& v,
         const Eigen::Matrix<T1__, -1, 1>& mu, const T2__& kappa,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ lprob;
    lprob = DUMMY_VAR__;
    
    current_statement__ = 227;
    if (logical_gt(kappa, 100)) {
      current_statement__ = 225;
      lprob = (((((kappa * dot_product(v, mu)) + stan::math::log(kappa)) -
                  stan::math::log((4 * stan::math::pi()))) - kappa) +
                stan::math::log(2));
    } else {
      current_statement__ = 223;
      lprob = (((kappa * dot_product(v, mu)) + stan::math::log(kappa)) -
                stan::math::log(
                  ((4 * stan::math::pi()) * stan::math::sinh(kappa))));
    }
    current_statement__ = 228;
    return lprob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct vMF_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const Eigen::Matrix<T0__, -1, 1>& v,
           const Eigen::Matrix<T1__, -1, 1>& mu, const T2__& kappa,
           std::ostream* pstream__)  const 
{
return vMF_lpdf<propto__>(v, mu, kappa, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
interpolate(const Eigen::Matrix<T0__, -1, 1>& x_values,
            const Eigen::Matrix<T1__, -1, 1>& y_values, const T2__& x,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ x_left;
    x_left = DUMMY_VAR__;
    
    local_scalar_t__ y_left;
    y_left = DUMMY_VAR__;
    
    local_scalar_t__ x_right;
    x_right = DUMMY_VAR__;
    
    local_scalar_t__ y_right;
    y_right = DUMMY_VAR__;
    
    local_scalar_t__ dydx;
    dydx = DUMMY_VAR__;
    
    int Nx;
    Nx = std::numeric_limits<int>::min();
    
    current_statement__ = 235;
    Nx = num_elements(x_values);
    local_scalar_t__ xmin;
    xmin = DUMMY_VAR__;
    
    current_statement__ = 236;
    xmin = x_values[(1 - 1)];
    local_scalar_t__ xmax;
    xmax = DUMMY_VAR__;
    
    current_statement__ = 237;
    xmax = x_values[(Nx - 1)];
    int i;
    i = std::numeric_limits<int>::min();
    
    current_statement__ = 238;
    i = 1;
    current_statement__ = 246;
    if ((primitive_value(logical_gt(x, xmax)) || primitive_value(
        logical_lt(x, xmin)))) {
      current_statement__ = 244;
      if (logical_gt(x, xmax)) {
        current_statement__ = 242;
        return y_values[(Nx - 1)];
      } else {
        current_statement__ = 241;
        if (logical_lt(x, xmin)) {
          current_statement__ = 239;
          return y_values[(1 - 1)];
        } 
      }
    } 
    current_statement__ = 253;
    if (logical_gte(x, x_values[((Nx - 1) - 1)])) {
      current_statement__ = 251;
      i = (Nx - 1);
    } else {
      current_statement__ = 249;
      while (logical_gt(x, x_values[((i + 1) - 1)])) {
        current_statement__ = 247;
        i = (i + 1);
      }
    }
    current_statement__ = 254;
    x_left = x_values[(i - 1)];
    current_statement__ = 255;
    y_left = y_values[(i - 1)];
    current_statement__ = 256;
    x_right = x_values[((i + 1) - 1)];
    current_statement__ = 257;
    y_right = y_values[((i + 1) - 1)];
    current_statement__ = 258;
    dydx = ((y_right - y_left) / (x_right - x_left));
    current_statement__ = 259;
    return (y_left + (dydx * (x - x_left)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct interpolate_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const Eigen::Matrix<T0__, -1, 1>& x_values,
           const Eigen::Matrix<T1__, -1, 1>& y_values, const T2__& x,
           std::ostream* pstream__)  const 
{
return interpolate(x_values, y_values, x, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>, -1, 1>
get_exposure_factor_atmo(const T0__& alpha,
                         const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
                         const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
                         const T3__& atmo_integ_val, const T4__& T,
                         const int& Ns, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 261;
    K = (Ns + 2);
    current_statement__ = 262;
    validate_non_negative_index("eps", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> eps;
    eps = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(eps, DUMMY_VAR__);
    
    current_statement__ = 266;
    for (int k = 1; k <= (K - 1); ++k) {
      current_statement__ = 264;
      assign(eps, cons_list(index_uni(k), nil_index_list()),
        interpolate(alpha_grid, integral_grid[(k - 1)], alpha, pstream__),
        "assigning variable eps");}
    current_statement__ = 267;
    assign(eps, cons_list(index_uni(K), nil_index_list()), atmo_integ_val,
      "assigning variable eps");
    current_statement__ = 268;
    return multiply(eps, T);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_exposure_factor_atmo_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>, -1, 1>
operator()(const T0__& alpha, const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
           const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
           const T3__& atmo_integ_val, const T4__& T, const int& Ns,
           std::ostream* pstream__)  const 
{
return get_exposure_factor_atmo(alpha, alpha_grid, integral_grid,
         atmo_integ_val, T, Ns, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__,
T3__>, -1, 1>
get_exposure_factor(const T0__& alpha,
                    const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
                    const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
                    const T3__& T, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 270;
    K = num_elements(integral_grid);
    current_statement__ = 271;
    validate_non_negative_index("eps", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> eps;
    eps = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(eps, DUMMY_VAR__);
    
    current_statement__ = 275;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 273;
      assign(eps, cons_list(index_uni(k), nil_index_list()),
        interpolate(alpha_grid, integral_grid[(k - 1)], alpha, pstream__),
        "assigning variable eps");}
    current_statement__ = 276;
    return multiply(eps, T);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_exposure_factor_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__,
T3__>, -1, 1>
operator()(const T0__& alpha, const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
           const std::vector<Eigen::Matrix<T2__, -1, 1>>& integral_grid,
           const T3__& T, std::ostream* pstream__)  const 
{
return get_exposure_factor(alpha, alpha_grid, integral_grid, T, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
get_eps_simple(const T0__& alpha,
               const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
               const Eigen::Matrix<T2__, -1, 1>& integral_grid,
               const T3__& T, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ eps;
    eps = DUMMY_VAR__;
    
    current_statement__ = 279;
    eps = (interpolate(alpha_grid, integral_grid, alpha, pstream__) * T);
    current_statement__ = 280;
    return eps;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_eps_simple_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& alpha, const Eigen::Matrix<T1__, -1, 1>& alpha_grid,
           const Eigen::Matrix<T2__, -1, 1>& integral_grid, const T3__& T,
           std::ostream* pstream__)  const 
{
return get_eps_simple(alpha, alpha_grid, integral_grid, T, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
get_exposure_weights(const Eigen::Matrix<T0__, -1, 1>& F,
                     const Eigen::Matrix<T1__, -1, 1>& eps,
                     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 282;
    K = num_elements(F);
    current_statement__ = 283;
    validate_non_negative_index("weights", "K", K);
    Eigen::Matrix<local_scalar_t__, -1, 1> weights;
    weights = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
    stan::math::fill(weights, DUMMY_VAR__);
    
    local_scalar_t__ normalisation;
    normalisation = DUMMY_VAR__;
    
    current_statement__ = 285;
    normalisation = 0;
    current_statement__ = 288;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 286;
      normalisation = (normalisation + (F[(k - 1)] * eps[(k - 1)]));}
    current_statement__ = 291;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 289;
      assign(weights, cons_list(index_uni(k), nil_index_list()),
        ((F[(k - 1)] * eps[(k - 1)]) / normalisation),
        "assigning variable weights");}
    current_statement__ = 292;
    return weights;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_exposure_weights_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& F,
           const Eigen::Matrix<T1__, -1, 1>& eps, std::ostream* pstream__)  const 
{
return get_exposure_weights(F, eps, pstream__);
}
};

template <typename T0__>
stan::promote_args_t<T0__>
omega_to_zenith(const Eigen::Matrix<T0__, -1, 1>& omega,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ zenith;
    zenith = DUMMY_VAR__;
    
    int N;
    N = std::numeric_limits<int>::min();
    
    current_statement__ = 295;
    N = num_elements(omega);
    current_statement__ = 298;
    if (logical_neq(N, 3)) {
      current_statement__ = 296;
      if (pstream__) {
        stan_print(pstream__, "Error: input vector omega must be of 3 dimensions");
        stan_print(pstream__, "\n");
      }
    } 
    current_statement__ = 299;
    zenith = (stan::math::pi() - stan::math::acos(omega[(3 - 1)]));
    current_statement__ = 300;
    return zenith;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct omega_to_zenith_functor__ {
template <typename T0__>
stan::promote_args_t<T0__>
operator()(const Eigen::Matrix<T0__, -1, 1>& omega, std::ostream* pstream__)  const 
{
return omega_to_zenith(omega, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
get_Nex(const Eigen::Matrix<T0__, -1, 1>& F,
        const Eigen::Matrix<T1__, -1, 1>& eps, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int K;
    K = std::numeric_limits<int>::min();
    
    current_statement__ = 302;
    K = num_elements(F);
    local_scalar_t__ Nex;
    Nex = DUMMY_VAR__;
    
    current_statement__ = 303;
    Nex = 0;
    current_statement__ = 306;
    for (int k = 1; k <= K; ++k) {
      current_statement__ = 304;
      Nex = (Nex + (F[(k - 1)] * eps[(k - 1)]));}
    current_statement__ = 307;
    return Nex;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct get_Nex_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const Eigen::Matrix<T0__, -1, 1>& F,
           const Eigen::Matrix<T1__, -1, 1>& eps, std::ostream* pstream__)  const 
{
return get_Nex(F, eps, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
NorthernTracksEffAreaHist(const T0__& value_0, const T1__& value_1,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> hist_array;
    hist_array = std::vector<std::vector<local_scalar_t__>>(280, std::vector<local_scalar_t__>(11, DUMMY_VAR__));
    
    current_statement__ = 309;
    assign(hist_array, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(8.07610872e-06)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(1.23124721e-05)
      .add(1.17263630e-05).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(1.38564999e-05)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(1.37609173e-05).add(0.00000000e+00)
      .add(1.24812892e-05).add(1.34722308e-05).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(1.61023702e-05).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(1.50212116e-05).add(1.42885036e-05).add(1.52805302e-05)
      .add(1.40053926e-05).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(3.36934149e-05)
      .add(0.00000000e+00).add(0.00000000e+00).add(3.14448481e-05)
      .add(0.00000000e+00).add(1.60632675e-05).add(4.69158184e-05)
      .add(1.46973435e-05).add(1.47024745e-05).add(1.62431943e-05)
      .add(1.60837837e-05).array()).add(stan::math::array_builder<double>()
      .add(3.66522869e-05).add(3.68636409e-05).add(3.43576110e-05)
      .add(0.00000000e+00).add(5.21874913e-05).add(3.36823593e-05)
      .add(5.19694028e-05).add(1.01280615e-04).add(4.96691556e-05)
      .add(6.48274367e-05).add(1.60973610e-05).array())
      .add(stan::math::array_builder<double>().add(9.55859522e-05)
      .add(2.66504177e-05).add(3.15540223e-05).add(2.13108700e-05)
      .add(1.82939575e-05).add(6.60388556e-05).add(7.88738620e-05)
      .add(9.63779800e-05).add(9.70664031e-05).add(8.42371259e-05)
      .add(1.21488114e-05).array()).add(stan::math::array_builder<double>()
      .add(1.73172618e-04).add(4.43740924e-05).add(3.25455947e-05)
      .add(3.34953225e-05).add(6.33801086e-05).add(7.75928934e-05)
      .add(1.58757145e-04).add(1.66799077e-04).add(1.68706194e-04)
      .add(1.36560398e-04).add(2.11422215e-05).array())
      .add(stan::math::array_builder<double>().add(2.76372362e-04)
      .add(8.02362258e-05).add(8.11396246e-05).add(7.57025132e-05)
      .add(1.04784489e-04).add(1.48410483e-04).add(1.79194332e-04)
      .add(2.56779590e-04).add(2.84732109e-04).add(2.07248647e-04)
      .add(2.91611219e-05).array()).add(stan::math::array_builder<double>()
      .add(4.18103178e-04).add(1.46336339e-04).add(1.32200728e-04)
      .add(1.21275408e-04).add(1.34067511e-04).add(2.45813925e-04)
      .add(3.46292889e-04).add(3.86663263e-04).add(3.87688377e-04)
      .add(3.45583137e-04).add(3.19843594e-05).array())
      .add(stan::math::array_builder<double>().add(5.96270468e-04)
      .add(2.70779292e-04).add(1.89569310e-04).add(2.21994063e-04)
      .add(2.66947550e-04).add(3.62972179e-04).add(4.90206409e-04)
      .add(6.33473452e-04).add(5.69147418e-04).add(5.67275843e-04)
      .add(4.65588950e-05).array()).add(stan::math::array_builder<double>()
      .add(9.00645679e-04).add(4.53861207e-04).add(3.35446943e-04)
      .add(3.48646880e-04).add(5.11035278e-04).add(5.68042002e-04)
      .add(7.49969448e-04).add(8.04005403e-04).add(8.84991737e-04)
      .add(7.78036384e-04).add(9.38424444e-05).array())
      .add(stan::math::array_builder<double>().add(1.22735028e-03)
      .add(7.93850098e-04).add(6.51867649e-04).add(5.67161931e-04)
      .add(5.89337317e-04).add(6.86556892e-04).add(1.00077314e-03)
      .add(1.17952901e-03).add(1.29793318e-03).add(1.01043523e-03)
      .add(8.98394254e-05).array()).add(stan::math::array_builder<double>()
      .add(2.04021883e-03).add(1.14221855e-03).add(8.80518799e-04)
      .add(8.45215751e-04).add(8.32254834e-04).add(1.05044776e-03)
      .add(1.44025363e-03).add(1.66276477e-03).add(1.71018378e-03)
      .add(1.50941398e-03).add(1.72764708e-04).array())
      .add(stan::math::array_builder<double>().add(2.34928036e-03)
      .add(1.60473014e-03).add(1.38843973e-03).add(1.14109208e-03)
      .add(1.28732076e-03).add(1.55099131e-03).add(2.01845344e-03)
      .add(2.20274508e-03).add(2.22251546e-03).add(1.95269542e-03)
      .add(2.10413879e-04).array()).add(stan::math::array_builder<double>()
      .add(3.44580718e-03).add(2.47242776e-03).add(2.05107224e-03)
      .add(1.87986989e-03).add(1.88404305e-03).add(1.98379845e-03)
      .add(2.45332065e-03).add(2.88233382e-03).add(2.82155354e-03)
      .add(2.64129438e-03).add(3.23841584e-04).array())
      .add(stan::math::array_builder<double>().add(4.27228908e-03)
      .add(3.23774953e-03).add(2.80587976e-03).add(2.39079838e-03)
      .add(2.49202700e-03).add(2.72548231e-03).add(3.42991288e-03)
      .add(3.86130390e-03).add(3.75828674e-03).add(3.22238920e-03)
      .add(4.42715700e-04).array()).add(stan::math::array_builder<double>()
      .add(5.61056415e-03).add(4.46109058e-03).add(3.58429289e-03)
      .add(3.33537858e-03).add(3.34227100e-03).add(3.62465485e-03)
      .add(4.45030524e-03).add(4.69748150e-03).add(4.75418587e-03)
      .add(4.18132568e-03).add(4.83505091e-04).array())
      .add(stan::math::array_builder<double>().add(7.05220362e-03)
      .add(5.63759074e-03).add(4.97999521e-03).add(4.65130291e-03)
      .add(4.32333836e-03).add(4.79130168e-03).add(4.86790941e-03)
      .add(5.92261699e-03).add(5.51119798e-03).add(5.14561556e-03)
      .add(4.05410790e-04).array()).add(stan::math::array_builder<double>()
      .add(8.60365151e-03).add(6.84721171e-03).add(6.59405158e-03)
      .add(5.88935518e-03).add(5.59540279e-03).add(5.54912092e-03)
      .add(6.46288148e-03).add(7.32314774e-03).add(7.18821126e-03)
      .add(6.31359980e-03).add(6.93965686e-04).array())
      .add(stan::math::array_builder<double>().add(1.10582919e-02)
      .add(8.57056471e-03).add(7.62911584e-03).add(7.54879514e-03)
      .add(6.92152135e-03).add(6.88172592e-03).add(7.64247624e-03)
      .add(8.55108945e-03).add(8.28064270e-03).add(8.16395667e-03)
      .add(8.80963202e-04).array()).add(stan::math::array_builder<double>()
      .add(1.30686040e-02).add(1.10025279e-02).add(9.78726419e-03)
      .add(8.49437050e-03).add(8.68900756e-03).add(8.25417943e-03)
      .add(9.25616494e-03).add(1.02479885e-02).add(1.08521889e-02)
      .add(9.28258151e-03).add(1.17390726e-03).array())
      .add(stan::math::array_builder<double>().add(1.57549197e-02)
      .add(1.29099352e-02).add(1.19686412e-02).add(1.16411019e-02)
      .add(1.03600348e-02).add(1.01732899e-02).add(1.12356835e-02)
      .add(1.25479435e-02).add(1.17288319e-02).add(1.09029873e-02)
      .add(1.55611862e-03).array()).add(stan::math::array_builder<double>()
      .add(1.91018172e-02).add(1.63530663e-02).add(1.52014840e-02)
      .add(1.33131590e-02).add(1.26808845e-02).add(1.37770544e-02)
      .add(1.29640005e-02).add(1.48071167e-02).add(1.53705800e-02)
      .add(1.36015861e-02).add(1.77193573e-03).array())
      .add(stan::math::array_builder<double>().add(2.24625953e-02)
      .add(1.88919693e-02).add(1.80288260e-02).add(1.69196765e-02)
      .add(1.62954378e-02).add(1.59511225e-02).add(1.59495923e-02)
      .add(1.69111987e-02).add(1.81752520e-02).add(1.71181588e-02)
      .add(2.34697714e-03).array()).add(stan::math::array_builder<double>()
      .add(2.63336472e-02).add(2.33400335e-02).add(2.20086572e-02)
      .add(2.02780795e-02).add(1.91289660e-02).add(1.87862641e-02)
      .add(1.85845147e-02).add(2.14289376e-02).add(2.03012096e-02)
      .add(1.93752429e-02).add(2.72972966e-03).array())
      .add(stan::math::array_builder<double>().add(3.14021987e-02)
      .add(2.78984362e-02).add(2.56379409e-02).add(2.22198757e-02)
      .add(2.30944728e-02).add(2.24413048e-02).add(2.32485762e-02)
      .add(2.36716713e-02).add(2.50997352e-02).add(2.29460034e-02)
      .add(3.18870727e-03).array()).add(stan::math::array_builder<double>()
      .add(3.57435012e-02).add(3.15670711e-02).add(3.14002087e-02)
      .add(2.75388153e-02).add(2.44986638e-02).add(2.67309748e-02)
      .add(2.80940662e-02).add(2.97360468e-02).add(2.98106980e-02)
      .add(2.67296643e-02).add(3.73400541e-03).array())
      .add(stan::math::array_builder<double>().add(4.39369770e-02)
      .add(3.73184755e-02).add(3.52021114e-02).add(3.36147700e-02)
      .add(3.13265771e-02).add(2.98494389e-02).add(3.06108646e-02)
      .add(3.17801550e-02).add(3.61256752e-02).add(3.19111570e-02)
      .add(4.79459494e-03).array()).add(stan::math::array_builder<double>()
      .add(4.89684848e-02).add(4.56266498e-02).add(4.15956523e-02)
      .add(3.91271648e-02).add(3.33801262e-02).add(3.72651625e-02)
      .add(3.59276651e-02).add(3.74430351e-02).add(4.10782203e-02)
      .add(3.57102857e-02).add(5.05759236e-03).array())
      .add(stan::math::array_builder<double>().add(5.70988582e-02)
      .add(4.97031144e-02).add(4.60291332e-02).add(4.44029555e-02)
      .add(4.12044341e-02).add(4.13853480e-02).add(4.25877557e-02)
      .add(4.64709706e-02).add(4.53762138e-02).add(4.24733753e-02)
      .add(5.64453341e-03).array()).add(stan::math::array_builder<double>()
      .add(6.35299188e-02).add(6.03018657e-02).add(5.62408308e-02)
      .add(5.08460331e-02).add(4.99339130e-02).add(4.66801724e-02)
      .add(4.94961232e-02).add(5.16120579e-02).add(5.23559476e-02)
      .add(4.85299157e-02).add(6.48703355e-03).array())
      .add(stan::math::array_builder<double>().add(7.42736044e-02)
      .add(6.97662380e-02).add(6.41378035e-02).add(5.99747900e-02)
      .add(5.89375404e-02).add(5.65069124e-02).add(5.60147977e-02)
      .add(5.95154661e-02).add(5.80683756e-02).add(5.74142985e-02)
      .add(8.61043572e-03).array()).add(stan::math::array_builder<double>()
      .add(8.46871058e-02).add(7.51838350e-02).add(6.98138314e-02)
      .add(6.66843532e-02).add(6.38621143e-02).add(6.09682298e-02)
      .add(6.31478153e-02).add(6.65586018e-02).add(7.11140136e-02)
      .add(6.56605880e-02).add(8.74086266e-03).array())
      .add(stan::math::array_builder<double>().add(9.13925545e-02)
      .add(8.84838569e-02).add(8.95542228e-02).add(7.65347257e-02)
      .add(7.53099469e-02).add(7.60383981e-02).add(7.66321274e-02)
      .add(7.89418593e-02).add(7.84818816e-02).add(7.70532321e-02)
      .add(1.09330149e-02).array()).add(stan::math::array_builder<double>()
      .add(1.10341518e-01).add(1.00454821e-01).add(9.68386840e-02)
      .add(9.16613762e-02).add(8.44490827e-02).add(8.56063989e-02)
      .add(8.86090051e-02).add(9.21960280e-02).add(9.28477090e-02)
      .add(8.64838039e-02).add(1.47447888e-02).array())
      .add(stan::math::array_builder<double>().add(1.24462801e-01)
      .add(1.22854756e-01).add(1.08100115e-01).add(1.04044632e-01)
      .add(1.04728806e-01).add(9.91261184e-02).add(1.02886136e-01)
      .add(1.00848544e-01).add(1.06799747e-01).add(1.01432060e-01)
      .add(1.49876660e-02).array()).add(stan::math::array_builder<double>()
      .add(1.42669609e-01).add(1.31495522e-01).add(1.31798128e-01)
      .add(1.19097134e-01).add(1.16872575e-01).add(1.15025209e-01)
      .add(1.21552344e-01).add(1.12266536e-01).add(1.18980438e-01)
      .add(1.10187111e-01).add(2.00836564e-02).array())
      .add(stan::math::array_builder<double>().add(1.59882936e-01)
      .add(1.55249846e-01).add(1.48253991e-01).add(1.37201069e-01)
      .add(1.33935980e-01).add(1.28217511e-01).add(1.35015265e-01)
      .add(1.32400203e-01).add(1.37924332e-01).add(1.38040692e-01)
      .add(2.19374904e-02).array()).add(stan::math::array_builder<double>()
      .add(1.89313268e-01).add(1.83565942e-01).add(1.68659388e-01)
      .add(1.58080943e-01).add(1.53284071e-01).add(1.47869389e-01)
      .add(1.52471844e-01).add(1.50035044e-01).add(1.59620409e-01)
      .add(1.49082942e-01).add(2.90535804e-02).array())
      .add(stan::math::array_builder<double>().add(2.08103790e-01)
      .add(1.99163915e-01).add(1.89320557e-01).add(1.82022565e-01)
      .add(1.75832873e-01).add(1.73169158e-01).add(1.76720678e-01)
      .add(1.79770799e-01).add(1.79893621e-01).add(1.82832388e-01)
      .add(2.73501059e-02).array()).add(stan::math::array_builder<double>()
      .add(2.37170709e-01).add(2.24268657e-01).add(2.24912727e-01)
      .add(2.06249077e-01).add(2.02654452e-01).add(2.04887619e-01)
      .add(2.01184584e-01).add(1.99711687e-01).add(2.10361312e-01)
      .add(1.95484157e-01).add(3.44472470e-02).array())
      .add(stan::math::array_builder<double>().add(2.58551107e-01)
      .add(2.55225997e-01).add(2.49669821e-01).add(2.23814970e-01)
      .add(2.34527984e-01).add(2.24419008e-01).add(2.20499769e-01)
      .add(2.28477143e-01).add(2.35243858e-01).add(2.27418832e-01)
      .add(3.84957224e-02).array()).add(stan::math::array_builder<double>()
      .add(2.91110999e-01).add(2.78041257e-01).add(2.79014840e-01)
      .add(2.67310129e-01).add(2.47353484e-01).add(2.56308067e-01)
      .add(2.54521431e-01).add(2.51390393e-01).add(2.69278326e-01)
      .add(2.61143884e-01).add(4.60610333e-02).array())
      .add(stan::math::array_builder<double>().add(3.22359026e-01)
      .add(3.14135794e-01).add(2.97563640e-01).add(3.00888144e-01)
      .add(2.83293943e-01).add(2.93387694e-01).add(2.83186551e-01)
      .add(2.86477910e-01).add(2.94214851e-01).add(2.93360380e-01)
      .add(5.39535071e-02).array()).add(stan::math::array_builder<double>()
      .add(3.63641656e-01).add(3.67000257e-01).add(3.30652843e-01)
      .add(3.20970390e-01).add(3.33921533e-01).add(3.14551329e-01)
      .add(3.14133558e-01).add(3.29202551e-01).add(3.28931291e-01)
      .add(3.28735982e-01).add(5.59176850e-02).array())
      .add(stan::math::array_builder<double>().add(4.11884471e-01)
      .add(4.07260841e-01).add(3.90415976e-01).add(3.49879799e-01)
      .add(3.46669264e-01).add(3.63276352e-01).add(3.65643248e-01)
      .add(3.56295348e-01).add(3.68695799e-01).add(3.56184041e-01)
      .add(6.93672350e-02).array()).add(stan::math::array_builder<double>()
      .add(4.63717877e-01).add(4.45053081e-01).add(4.31483375e-01)
      .add(4.17554004e-01).add(4.20877305e-01).add(4.40558722e-01)
      .add(4.08651506e-01).add(4.13838117e-01).add(3.81153900e-01)
      .add(3.96060052e-01).add(7.69839393e-02).array())
      .add(stan::math::array_builder<double>().add(5.16043092e-01)
      .add(4.89654168e-01).add(4.57186227e-01).add(4.89834089e-01)
      .add(4.74318262e-01).add(4.61411760e-01).add(4.79872287e-01)
      .add(4.71418504e-01).add(4.79122722e-01).add(4.62384912e-01)
      .add(9.44386163e-02).array()).add(stan::math::array_builder<double>()
      .add(6.17614661e-01).add(5.55897433e-01).add(5.30304257e-01)
      .add(5.28303007e-01).add(5.33119646e-01).add(5.45073938e-01)
      .add(5.20564815e-01).add(5.27807776e-01).add(5.40151542e-01)
      .add(5.16900360e-01).add(9.98128265e-02).array())
      .add(stan::math::array_builder<double>().add(6.15875416e-01)
      .add(6.26605844e-01).add(6.08180715e-01).add(5.80243706e-01)
      .add(5.86496364e-01).add(5.79717566e-01).add(5.95988124e-01)
      .add(5.76366488e-01).add(6.10288552e-01).add(5.67577867e-01)
      .add(1.10322241e-01).array()).add(stan::math::array_builder<double>()
      .add(7.26942256e-01).add(7.17575954e-01).add(6.73376235e-01)
      .add(6.53726500e-01).add(6.61279155e-01).add(6.85522644e-01)
      .add(6.52590271e-01).add(6.81635682e-01).add(6.83548941e-01)
      .add(6.38455322e-01).add(1.29294796e-01).array())
      .add(stan::math::array_builder<double>().add(7.36378110e-01)
      .add(7.26695350e-01).add(7.20400165e-01).add(6.97780821e-01)
      .add(7.08536078e-01).add(7.77212692e-01).add(7.34007942e-01)
      .add(7.43222181e-01).add(7.50081318e-01).add(6.98236595e-01)
      .add(1.51579499e-01).array()).add(stan::math::array_builder<double>()
      .add(8.84203299e-01).add(7.93333194e-01).add(8.32907583e-01)
      .add(8.05414828e-01).add(7.49543490e-01).add(7.37348010e-01)
      .add(7.80404502e-01).add(7.64149206e-01).add(7.88732241e-01)
      .add(7.80401417e-01).add(1.62626380e-01).array())
      .add(stan::math::array_builder<double>().add(9.11770861e-01)
      .add(9.24435341e-01).add(9.16775462e-01).add(8.15375976e-01)
      .add(8.84441843e-01).add(8.33509829e-01).add(9.19711124e-01)
      .add(8.69918508e-01).add(8.90947744e-01).add(9.29978716e-01)
      .add(1.77431560e-01).array()).add(stan::math::array_builder<double>()
      .add(1.01380087e+00).add(1.02153404e+00).add(9.93091654e-01)
      .add(9.11831627e-01).add(9.72693310e-01).add(9.55445029e-01)
      .add(9.83641819e-01).add(9.25625563e-01).add(1.01198096e+00)
      .add(1.00296525e+00).add(2.08858467e-01).array())
      .add(stan::math::array_builder<double>().add(1.07364560e+00)
      .add(1.09623145e+00).add(1.08977529e+00).add(1.05118223e+00)
      .add(1.13182193e+00).add(1.19006909e+00).add(1.06356964e+00)
      .add(1.12378172e+00).add(1.14689242e+00).add(1.10592542e+00)
      .add(2.42046573e-01).array()).add(stan::math::array_builder<double>()
      .add(1.25361420e+00).add(1.17380285e+00).add(1.16701578e+00)
      .add(1.15721453e+00).add(1.12571631e+00).add(1.15577768e+00)
      .add(1.26464327e+00).add(1.23445889e+00).add(1.20833676e+00)
      .add(1.22145927e+00).add(2.75727052e-01).array())
      .add(stan::math::array_builder<double>().add(1.27314995e+00)
      .add(1.33850359e+00).add(1.28184434e+00).add(1.32633181e+00)
      .add(1.36836267e+00).add(1.27479256e+00).add(1.33305149e+00)
      .add(1.37124699e+00).add(1.42567808e+00).add(1.35618018e+00)
      .add(3.08429507e-01).array()).add(stan::math::array_builder<double>()
      .add(1.48575610e+00).add(1.47130133e+00).add(1.42165003e+00)
      .add(1.50012092e+00).add(1.63925202e+00).add(1.46840501e+00)
      .add(1.46430553e+00).add(1.54647774e+00).add(1.64008750e+00)
      .add(1.45705903e+00).add(3.39367384e-01).array())
      .add(stan::math::array_builder<double>().add(1.64473126e+00)
      .add(1.64684397e+00).add(1.49960340e+00).add(1.54814480e+00)
      .add(1.64749331e+00).add(1.57964655e+00).add(1.68067913e+00)
      .add(1.57253578e+00).add(1.72267119e+00).add(1.63400496e+00)
      .add(3.69738070e-01).array()).add(stan::math::array_builder<double>()
      .add(1.82957141e+00).add(1.74307497e+00).add(1.74106940e+00)
      .add(1.76564522e+00).add(1.80657971e+00).add(2.03126841e+00)
      .add(1.78636220e+00).add(1.84597599e+00).add(1.98507175e+00)
      .add(1.77046543e+00).add(4.73911149e-01).array())
      .add(stan::math::array_builder<double>().add(1.88471574e+00)
      .add(1.91049852e+00).add(1.89817267e+00).add(1.90752570e+00)
      .add(1.95685230e+00).add(1.98097971e+00).add(1.99514797e+00)
      .add(2.02829125e+00).add(2.06530567e+00).add(2.04014425e+00)
      .add(4.96258764e-01).array()).add(stan::math::array_builder<double>()
      .add(2.08346352e+00).add(2.08442184e+00).add(2.10609561e+00)
      .add(2.09851517e+00).add(2.15241201e+00).add(2.18062827e+00)
      .add(2.22843266e+00).add(2.24366256e+00).add(2.26018009e+00)
      .add(2.22384943e+00).add(5.62915527e-01).array())
      .add(stan::math::array_builder<double>().add(2.22849413e+00)
      .add(2.30146989e+00).add(2.28636434e+00).add(2.28300086e+00)
      .add(2.31163239e+00).add(2.38731283e+00).add(2.40539258e+00)
      .add(2.46034252e+00).add(2.49223917e+00).add(2.45622308e+00)
      .add(5.92750159e-01).array()).add(stan::math::array_builder<double>()
      .add(2.41738582e+00).add(2.43017919e+00).add(2.47269675e+00)
      .add(2.43887647e+00).add(2.52412710e+00).add(2.61818853e+00)
      .add(2.66696659e+00).add(2.67253189e+00).add(2.73206831e+00)
      .add(2.69361378e+00).add(6.90329464e-01).array())
      .add(stan::math::array_builder<double>().add(2.59716331e+00)
      .add(2.72595893e+00).add(2.72634758e+00).add(2.73532363e+00)
      .add(2.79791042e+00).add(2.89478230e+00).add(2.91415504e+00)
      .add(2.95420478e+00).add(3.04778843e+00).add(2.93253780e+00)
      .add(7.60054636e-01).array()).add(stan::math::array_builder<double>()
      .add(2.90301179e+00).add(2.91894967e+00).add(2.93715858e+00)
      .add(2.97760328e+00).add(3.05564322e+00).add(3.11750248e+00)
      .add(3.11202201e+00).add(3.28490777e+00).add(3.31677281e+00)
      .add(3.28446877e+00).add(8.88159576e-01).array())
      .add(stan::math::array_builder<double>().add(3.11352778e+00)
      .add(3.17876831e+00).add(3.17676761e+00).add(3.24708767e+00)
      .add(3.32587453e+00).add(3.53199746e+00).add(3.51743128e+00)
      .add(3.48821024e+00).add(3.71278814e+00).add(3.52492261e+00)
      .add(9.97370282e-01).array()).add(stan::math::array_builder<double>()
      .add(3.28875060e+00).add(3.43628033e+00).add(3.46113450e+00)
      .add(3.50636070e+00).add(3.61869046e+00).add(3.73786121e+00)
      .add(3.84140061e+00).add(3.93892930e+00).add(4.06592535e+00)
      .add(3.92979738e+00).add(1.11983177e+00).array())
      .add(stan::math::array_builder<double>().add(3.58454610e+00)
      .add(3.74215933e+00).add(3.79169032e+00).add(3.80084342e+00)
      .add(3.94462751e+00).add(4.06908140e+00).add(4.11144242e+00)
      .add(4.33719634e+00).add(4.34139611e+00).add(4.25332770e+00)
      .add(1.26981846e+00).array()).add(stan::math::array_builder<double>()
      .add(3.78555730e+00).add(4.11760079e+00).add(4.06722654e+00)
      .add(4.15275412e+00).add(4.28601696e+00).add(4.49197758e+00)
      .add(4.56487768e+00).add(4.59072855e+00).add(4.79952462e+00)
      .add(4.62890566e+00).add(1.38411864e+00).array())
      .add(stan::math::array_builder<double>().add(4.08825449e+00)
      .add(4.46183593e+00).add(4.53532231e+00).add(4.56723624e+00)
      .add(4.80102123e+00).add(4.90755725e+00).add(4.96324038e+00)
      .add(4.99777377e+00).add(5.18268576e+00).add(5.19814319e+00)
      .add(1.54819512e+00).array()).add(stan::math::array_builder<double>()
      .add(4.48099050e+00).add(4.72110871e+00).add(4.79925819e+00)
      .add(4.99926957e+00).add(5.12760394e+00).add(5.34917786e+00)
      .add(5.44900869e+00).add(5.66588879e+00).add(5.69775614e+00)
      .add(5.59351952e+00).add(1.72965357e+00).array())
      .add(stan::math::array_builder<double>().add(4.81829622e+00)
      .add(5.03465766e+00).add(5.29620533e+00).add(5.14363784e+00)
      .add(5.40694588e+00).add(5.73469960e+00).add(5.87032270e+00)
      .add(6.00275076e+00).add(6.29946076e+00).add(6.14277987e+00)
      .add(1.94349004e+00).array()).add(stan::math::array_builder<double>()
      .add(5.00952337e+00).add(5.50180007e+00).add(5.67142737e+00)
      .add(5.74618158e+00).add(5.84936965e+00).add(6.16870613e+00)
      .add(6.44177984e+00).add(6.63609624e+00).add(6.66918258e+00)
      .add(6.66727053e+00).add(2.13363967e+00).array())
      .add(stan::math::array_builder<double>().add(5.42768876e+00)
      .add(5.70583548e+00).add(6.08333598e+00).add(6.24957004e+00)
      .add(6.17368944e+00).add(6.57109182e+00).add(6.75623553e+00)
      .add(7.02831063e+00).add(7.26504262e+00).add(7.11468920e+00)
      .add(2.29797090e+00).array()).add(stan::math::array_builder<double>()
      .add(5.48097216e+00).add(6.13320683e+00).add(6.40041797e+00)
      .add(6.60320451e+00).add(6.81181143e+00).add(7.21825357e+00)
      .add(7.25387659e+00).add(7.52789763e+00).add(7.52654079e+00)
      .add(7.63177947e+00).add(2.40512599e+00).array())
      .add(stan::math::array_builder<double>().add(5.87305138e+00)
      .add(6.62884458e+00).add(6.82266338e+00).add(7.03068087e+00)
      .add(7.38743564e+00).add(7.54309587e+00).add(7.95820486e+00)
      .add(8.10112878e+00).add(8.49798396e+00).add(8.23022036e+00)
      .add(2.71822135e+00).array()).add(stan::math::array_builder<double>()
      .add(6.48914848e+00).add(6.94543098e+00).add(7.20828474e+00)
      .add(7.74325205e+00).add(8.02658318e+00).add(8.01462879e+00)
      .add(8.79974929e+00).add(8.69801085e+00).add(9.14368594e+00)
      .add(8.90414905e+00).add(2.95846515e+00).array())
      .add(stan::math::array_builder<double>().add(6.91585498e+00)
      .add(7.66105884e+00).add(7.70424649e+00).add(8.43721763e+00)
      .add(8.42987746e+00).add(8.96233570e+00).add(9.18797229e+00)
      .add(9.45780969e+00).add(9.69318297e+00).add(9.76621386e+00)
      .add(3.40280208e+00).array()).add(stan::math::array_builder<double>()
      .add(6.91919409e+00).add(8.14935902e+00).add(8.31716063e+00)
      .add(8.74749643e+00).add(9.18075826e+00).add(9.53267537e+00)
      .add(9.87866092e+00).add(1.03408773e+01).add(1.05995409e+01)
      .add(1.07063388e+01).add(3.72858940e+00).array())
      .add(stan::math::array_builder<double>().add(7.79628926e+00)
      .add(8.34436691e+00).add(8.98607323e+00).add(9.43429016e+00)
      .add(9.67820837e+00).add(1.04150235e+01).add(1.05085409e+01)
      .add(1.08217668e+01).add(1.18914757e+01).add(1.14069597e+01)
      .add(3.90687056e+00).array()).add(stan::math::array_builder<double>()
      .add(8.09761402e+00).add(9.36534035e+00).add(9.53537642e+00)
      .add(9.99110238e+00).add(1.03494987e+01).add(1.11244253e+01)
      .add(1.14528357e+01).add(1.21403541e+01).add(1.24050805e+01)
      .add(1.22710199e+01).add(4.33121243e+00).array())
      .add(stan::math::array_builder<double>().add(8.51531137e+00)
      .add(9.70264882e+00).add(1.04081768e+01).add(1.11183285e+01)
      .add(1.17037901e+01).add(1.21182006e+01).add(1.26322084e+01)
      .add(1.28322559e+01).add(1.35405231e+01).add(1.32349998e+01)
      .add(4.90016917e+00).array()).add(stan::math::array_builder<double>()
      .add(9.29224661e+00).add(1.05198039e+01).add(1.07622654e+01)
      .add(1.19697023e+01).add(1.23401731e+01).add(1.28508387e+01)
      .add(1.36156179e+01).add(1.38941800e+01).add(1.46029019e+01)
      .add(1.44389201e+01).add(5.25078409e+00).array())
      .add(stan::math::array_builder<double>().add(9.70784884e+00)
      .add(1.09703224e+01).add(1.19774507e+01).add(1.27259010e+01)
      .add(1.33409714e+01).add(1.37304466e+01).add(1.40512798e+01)
      .add(1.51358743e+01).add(1.59048677e+01).add(1.55202811e+01)
      .add(5.93144250e+00).array()).add(stan::math::array_builder<double>()
      .add(1.01486122e+01).add(1.16513237e+01).add(1.25622646e+01)
      .add(1.30123938e+01).add(1.38730183e+01).add(1.46977933e+01)
      .add(1.53052510e+01).add(1.61803972e+01).add(1.69215109e+01)
      .add(1.67928250e+01).add(6.61722266e+00).array())
      .add(stan::math::array_builder<double>().add(1.04250629e+01)
      .add(1.21682301e+01).add(1.31004433e+01).add(1.41733457e+01)
      .add(1.50281547e+01).add(1.56610179e+01).add(1.67984675e+01)
      .add(1.69435755e+01).add(1.79571034e+01).add(1.78890998e+01)
      .add(7.04653862e+00).array()).add(stan::math::array_builder<double>()
      .add(1.08875538e+01).add(1.32284680e+01).add(1.39383132e+01)
      .add(1.47120564e+01).add(1.56993558e+01).add(1.65177670e+01)
      .add(1.77892808e+01).add(1.79459906e+01).add(1.90567109e+01)
      .add(1.93666282e+01).add(8.03374034e+00).array())
      .add(stan::math::array_builder<double>().add(1.18058390e+01)
      .add(1.34961935e+01).add(1.55231111e+01).add(1.55718768e+01)
      .add(1.68947711e+01).add(1.77155532e+01).add(1.85817165e+01)
      .add(1.94245918e+01).add(2.07478222e+01).add(2.08469037e+01)
      .add(8.42972530e+00).array()).add(stan::math::array_builder<double>()
      .add(1.19872952e+01).add(1.44542022e+01).add(1.60755474e+01)
      .add(1.70391336e+01).add(1.80697357e+01).add(1.93517317e+01)
      .add(1.95326782e+01).add(2.12170129e+01).add(2.28274287e+01)
      .add(2.22553699e+01).add(9.12271210e+00).array())
      .add(stan::math::array_builder<double>().add(1.25827446e+01)
      .add(1.48753110e+01).add(1.68755230e+01).add(1.75156015e+01)
      .add(1.93028502e+01).add(1.96307309e+01).add(2.13038376e+01)
      .add(2.21636403e+01).add(2.43378283e+01).add(2.41133296e+01)
      .add(1.02088836e+01).array()).add(stan::math::array_builder<double>()
      .add(1.35326967e+01).add(1.69815022e+01).add(1.77640562e+01)
      .add(1.85088402e+01).add(1.99343278e+01).add(2.11027079e+01)
      .add(2.29326093e+01).add(2.38107373e+01).add(2.51182026e+01)
      .add(2.62072434e+01).add(1.07061221e+01).array())
      .add(stan::math::array_builder<double>().add(1.37997383e+01)
      .add(1.64030109e+01).add(1.95353435e+01).add(1.96322483e+01)
      .add(2.16807124e+01).add(2.21986024e+01).add(2.45762299e+01)
      .add(2.55230145e+01).add(2.65715235e+01).add(2.64096956e+01)
      .add(1.16661634e+01).array()).add(stan::math::array_builder<double>()
      .add(1.42704928e+01).add(1.80358504e+01).add(1.95542706e+01)
      .add(2.24272619e+01).add(2.26322724e+01).add(2.46547093e+01)
      .add(2.50315863e+01).add(2.71061615e+01).add(2.87727725e+01)
      .add(2.94132391e+01).add(1.34166945e+01).array())
      .add(stan::math::array_builder<double>().add(1.42966414e+01)
      .add(1.81921904e+01).add(2.07409296e+01).add(2.19254826e+01)
      .add(2.37454525e+01).add(2.63248204e+01).add(2.74972770e+01)
      .add(2.82107385e+01).add(3.06596619e+01).add(3.16575801e+01)
      .add(1.42943638e+01).array()).add(stan::math::array_builder<double>()
      .add(1.52061419e+01).add(2.00190992e+01).add(2.17008091e+01)
      .add(2.37816652e+01).add(2.61974718e+01).add(2.61364021e+01)
      .add(3.00251513e+01).add(3.04236406e+01).add(3.16189329e+01)
      .add(3.39179528e+01).add(1.47663147e+01).array())
      .add(stan::math::array_builder<double>().add(1.58730818e+01)
      .add(2.00050892e+01).add(2.29625408e+01).add(2.41709317e+01)
      .add(2.65164830e+01).add(2.84178552e+01).add(3.05395932e+01)
      .add(3.19095921e+01).add(3.34383949e+01).add(3.53528069e+01)
      .add(1.64774558e+01).array()).add(stan::math::array_builder<double>()
      .add(1.63198692e+01).add(2.04458670e+01).add(2.34297949e+01)
      .add(2.62130156e+01).add(2.85233031e+01).add(3.05632925e+01)
      .add(3.12722127e+01).add(3.26282500e+01).add(3.69780919e+01)
      .add(3.68193983e+01).add(1.82140744e+01).array())
      .add(stan::math::array_builder<double>().add(1.68684079e+01)
      .add(2.16472541e+01).add(2.51336938e+01).add(2.65265421e+01)
      .add(2.88049915e+01).add(3.26009258e+01).add(3.43463889e+01)
      .add(3.58050299e+01).add(3.82595983e+01).add(3.76742278e+01)
      .add(1.78115791e+01).array()).add(stan::math::array_builder<double>()
      .add(1.73774524e+01).add(2.28602467e+01).add(2.68017581e+01)
      .add(2.66570108e+01).add(3.02282723e+01).add(3.40220893e+01)
      .add(3.59441893e+01).add(3.72463350e+01).add(3.98288151e+01)
      .add(4.09407887e+01).add(1.96016615e+01).array())
      .add(stan::math::array_builder<double>().add(1.80043857e+01)
      .add(2.26692238e+01).add(2.71335422e+01).add(2.93674920e+01)
      .add(3.13712457e+01).add(3.31510715e+01).add(3.65438726e+01)
      .add(3.94904157e+01).add(4.31359835e+01).add(4.41289192e+01)
      .add(2.11574718e+01).array()).add(stan::math::array_builder<double>()
      .add(1.74333322e+01).add(2.35374092e+01).add(2.74203080e+01)
      .add(2.98559354e+01).add(3.37194652e+01).add(3.66859877e+01)
      .add(3.82987223e+01).add(4.15229425e+01).add(4.39228815e+01)
      .add(4.59170084e+01).add(2.25002927e+01).array())
      .add(stan::math::array_builder<double>().add(1.79345138e+01)
      .add(2.44023082e+01).add(2.98747466e+01).add(3.21784038e+01)
      .add(3.59137809e+01).add(3.82620352e+01).add(4.09198605e+01)
      .add(4.24509518e+01).add(4.80322960e+01).add(4.92103110e+01)
      .add(2.40172679e+01).array()).add(stan::math::array_builder<double>()
      .add(1.85388739e+01).add(2.62204377e+01).add(2.99836336e+01)
      .add(3.21513524e+01).add(3.90714774e+01).add(3.99230112e+01)
      .add(4.26007460e+01).add(4.58628487e+01).add(4.91565831e+01)
      .add(5.29528759e+01).add(2.45527024e+01).array())
      .add(stan::math::array_builder<double>().add(2.00768911e+01)
      .add(2.55087478e+01).add(3.09962051e+01).add(3.32179554e+01)
      .add(3.78602116e+01).add(4.08145380e+01).add(4.63953174e+01)
      .add(4.91054240e+01).add(5.22409316e+01).add(5.44782108e+01)
      .add(2.75264667e+01).array()).add(stan::math::array_builder<double>()
      .add(2.09345852e+01).add(2.82434476e+01).add(3.15724528e+01)
      .add(3.72100056e+01).add(3.88128821e+01).add(4.39700026e+01)
      .add(4.83453956e+01).add(5.19605734e+01).add(5.56508954e+01)
      .add(5.75641737e+01).add(3.04469062e+01).array())
      .add(stan::math::array_builder<double>().add(1.88146588e+01)
      .add(2.94409034e+01).add(3.37193763e+01).add(3.93426764e+01)
      .add(4.20512589e+01).add(4.72079182e+01).add(4.98157591e+01)
      .add(5.32946814e+01).add(5.95420996e+01).add(6.26022145e+01)
      .add(3.32006973e+01).array()).add(stan::math::array_builder<double>()
      .add(2.07098232e+01).add(2.97579180e+01).add(3.66689484e+01)
      .add(4.02270453e+01).add(4.25624188e+01).add(4.93046862e+01)
      .add(5.26317063e+01).add(5.72101545e+01).add(6.00010726e+01)
      .add(6.64049259e+01).add(3.34802449e+01).array())
      .add(stan::math::array_builder<double>().add(2.09242654e+01)
      .add(2.98544405e+01).add(3.56138754e+01).add(4.06530393e+01)
      .add(4.52345272e+01).add(5.07853085e+01).add(5.63480360e+01)
      .add(6.01037288e+01).add(6.55431788e+01).add(7.23592004e+01)
      .add(3.59590177e+01).array()).add(stan::math::array_builder<double>()
      .add(2.07081950e+01).add(3.17481367e+01).add(3.89622653e+01)
      .add(4.34720909e+01).add(4.67307906e+01).add(5.24849951e+01)
      .add(5.75225924e+01).add(6.53786268e+01).add(6.56297827e+01)
      .add(7.42343709e+01).add(3.87655174e+01).array())
      .add(stan::math::array_builder<double>().add(2.00676874e+01)
      .add(3.16133951e+01).add(3.88039201e+01).add(4.56401833e+01)
      .add(4.77781130e+01).add(5.52258797e+01).add(6.21730614e+01)
      .add(6.69276226e+01).add(7.41859183e+01).add(8.13932171e+01)
      .add(4.43441580e+01).array()).add(stan::math::array_builder<double>()
      .add(2.12756065e+01).add(3.60505256e+01).add(4.12456945e+01)
      .add(4.69419542e+01).add(5.21171285e+01).add(5.98792202e+01)
      .add(6.63128297e+01).add(6.68566307e+01).add(7.77929088e+01)
      .add(8.07818504e+01).add(3.96426356e+01).array())
      .add(stan::math::array_builder<double>().add(2.24272420e+01)
      .add(3.70299778e+01).add(4.57884898e+01).add(4.78884277e+01)
      .add(5.33658536e+01).add(5.85954349e+01).add(6.54386075e+01)
      .add(7.53732645e+01).add(8.21517278e+01).add(8.62141586e+01)
      .add(5.00919662e+01).array()).add(stan::math::array_builder<double>()
      .add(2.26294417e+01).add(3.32899379e+01).add(4.08564584e+01)
      .add(5.21285042e+01).add(5.68454752e+01).add(6.56565582e+01)
      .add(6.71946845e+01).add(7.49194608e+01).add(8.63313717e+01)
      .add(9.08817008e+01).add(5.26326118e+01).array())
      .add(stan::math::array_builder<double>().add(2.33653711e+01)
      .add(3.77918646e+01).add(4.45946059e+01).add(5.16926631e+01)
      .add(6.09752665e+01).add(6.88669928e+01).add(7.09246397e+01)
      .add(7.85196977e+01).add(9.02420065e+01).add(9.54540055e+01)
      .add(5.40864239e+01).array()).add(stan::math::array_builder<double>()
      .add(2.15464413e+01).add(3.67038764e+01).add(4.78680433e+01)
      .add(4.93397280e+01).add(6.26516077e+01).add(7.18719695e+01)
      .add(7.25635028e+01).add(8.63798576e+01).add(9.61632825e+01)
      .add(1.01628477e+02).add(5.83930393e+01).array())
      .add(stan::math::array_builder<double>().add(2.33469968e+01)
      .add(3.51712085e+01).add(4.64338603e+01).add(5.44357052e+01)
      .add(6.45042530e+01).add(7.17178554e+01).add(8.32788852e+01)
      .add(9.12418516e+01).add(9.21420656e+01).add(1.06721760e+02)
      .add(6.28520396e+01).array()).add(stan::math::array_builder<double>()
      .add(2.17115329e+01).add(3.96914682e+01).add(5.07502759e+01)
      .add(5.34267438e+01).add(6.26135880e+01).add(7.37387598e+01)
      .add(8.38049598e+01).add(8.96194906e+01).add(9.63483901e+01)
      .add(1.12572830e+02).add(6.18876004e+01).array())
      .add(stan::math::array_builder<double>().add(2.51968200e+01)
      .add(4.14219026e+01).add(4.77026613e+01).add(6.17655364e+01)
      .add(6.38015263e+01).add(8.29465647e+01).add(8.17067189e+01)
      .add(9.59288892e+01).add(1.02756517e+02).add(1.08831644e+02)
      .add(6.60718671e+01).array()).add(stan::math::array_builder<double>()
      .add(2.17984873e+01).add(3.61782780e+01).add(5.04314947e+01)
      .add(5.79094931e+01).add(7.13879217e+01).add(7.54019561e+01)
      .add(9.05957903e+01).add(9.24306723e+01).add(1.06934381e+02)
      .add(1.16700585e+02).add(6.87279877e+01).array())
      .add(stan::math::array_builder<double>().add(2.30603341e+01)
      .add(3.64839809e+01).add(5.57208603e+01).add(5.98333074e+01)
      .add(7.25854218e+01).add(7.82674151e+01).add(8.64887050e+01)
      .add(1.01943996e+02).add(1.21347241e+02).add(1.29389609e+02)
      .add(7.59860055e+01).array()).add(stan::math::array_builder<double>()
      .add(2.06039990e+01).add(4.24257552e+01).add(5.42088577e+01)
      .add(6.66004433e+01).add(6.82900352e+01).add(7.89245428e+01)
      .add(9.77792686e+01).add(1.15226579e+02).add(1.16247033e+02)
      .add(1.43693973e+02).add(8.04564711e+01).array())
      .add(stan::math::array_builder<double>().add(2.20723983e+01)
      .add(4.07847616e+01).add(5.14946051e+01).add(6.82966660e+01)
      .add(7.04298482e+01).add(8.96496442e+01).add(9.68944602e+01)
      .add(1.13282719e+02).add(1.32129736e+02).add(1.46659715e+02)
      .add(8.31550235e+01).array()).add(stan::math::array_builder<double>()
      .add(2.58669311e+01).add(4.38908214e+01).add(5.49476078e+01)
      .add(6.95234903e+01).add(7.75724504e+01).add(8.93401783e+01)
      .add(1.07152174e+02).add(1.14341725e+02).add(1.22707171e+02)
      .add(1.50354028e+02).add(8.40355682e+01).array())
      .add(stan::math::array_builder<double>().add(2.31262092e+01)
      .add(4.29969895e+01).add(5.39680108e+01).add(7.95959426e+01)
      .add(8.27628410e+01).add(1.02061248e+02).add(1.10161477e+02)
      .add(1.14848743e+02).add(1.32597210e+02).add(1.49018223e+02)
      .add(9.03734172e+01).array()).add(stan::math::array_builder<double>()
      .add(2.46632310e+01).add(3.78797620e+01).add(5.88650105e+01)
      .add(7.00950003e+01).add(8.81883742e+01).add(8.97769190e+01)
      .add(1.09025804e+02).add(1.17784739e+02).add(1.41161429e+02)
      .add(1.65096546e+02).add(9.09506474e+01).array())
      .add(stan::math::array_builder<double>().add(2.03406412e+01)
      .add(4.16723406e+01).add(5.79182935e+01).add(7.24179688e+01)
      .add(9.38083995e+01).add(9.79327274e+01).add(1.15602183e+02)
      .add(1.23738380e+02).add(1.41435764e+02).add(1.63751412e+02)
      .add(9.37520080e+01).array()).add(stan::math::array_builder<double>()
      .add(2.06786016e+01).add(4.15686445e+01).add(6.56455549e+01)
      .add(6.68214534e+01).add(7.78837947e+01).add(1.05585852e+02)
      .add(1.17919270e+02).add(1.33758575e+02).add(1.60359979e+02)
      .add(1.70091851e+02).add(1.14571244e+02).array())
      .add(stan::math::array_builder<double>().add(2.34183621e+01)
      .add(4.17571416e+01).add(6.28958923e+01).add(8.67722475e+01)
      .add(9.03205341e+01).add(9.77904980e+01).add(1.16063136e+02)
      .add(1.34951928e+02).add(1.59019369e+02).add(1.87533833e+02)
      .add(1.06085541e+02).array()).add(stan::math::array_builder<double>()
      .add(2.87445250e+01).add(4.59602738e+01).add(6.34572294e+01)
      .add(8.61903894e+01).add(8.84001069e+01).add(1.03942664e+02)
      .add(1.19588375e+02).add(1.46936317e+02).add(1.61235156e+02)
      .add(1.72751283e+02).add(1.08937566e+02).array())
      .add(stan::math::array_builder<double>().add(2.11061180e+01)
      .add(4.48595713e+01).add(6.36578698e+01).add(8.25623244e+01)
      .add(9.12943487e+01).add(1.09226107e+02).add(1.37578777e+02)
      .add(1.42608418e+02).add(1.63369727e+02).add(1.91052942e+02)
      .add(1.24435432e+02).array()).add(stan::math::array_builder<double>()
      .add(1.91737198e+01).add(4.46132273e+01).add(7.05358259e+01)
      .add(7.93895243e+01).add(9.19304033e+01).add(1.21128616e+02)
      .add(1.27183349e+02).add(1.59968855e+02).add(1.70831009e+02)
      .add(2.23120231e+02).add(1.31642971e+02).array())
      .add(stan::math::array_builder<double>().add(2.04882594e+01)
      .add(4.20398805e+01).add(6.15132409e+01).add(8.27168483e+01)
      .add(9.92326411e+01).add(1.11788730e+02).add(1.33528213e+02)
      .add(1.73131804e+02).add(1.94349827e+02).add(1.92598725e+02)
      .add(1.39008239e+02).array()).add(stan::math::array_builder<double>()
      .add(2.13618975e+01).add(4.68787120e+01).add(5.80144997e+01)
      .add(8.10406922e+01).add(9.99581324e+01).add(1.27506845e+02)
      .add(1.52260815e+02).add(1.74638845e+02).add(1.70908612e+02)
      .add(2.35222168e+02).add(1.37570279e+02).array())
      .add(stan::math::array_builder<double>().add(2.29718283e+01)
      .add(4.74529412e+01).add(6.83371508e+01).add(7.77525454e+01)
      .add(1.11968611e+02).add(1.24292171e+02).add(1.67347906e+02)
      .add(1.50355849e+02).add(1.95941337e+02).add(2.33800508e+02)
      .add(1.45529622e+02).array()).add(stan::math::array_builder<double>()
      .add(1.90119160e+01).add(4.54827311e+01).add(7.52611142e+01)
      .add(8.02059538e+01).add(1.05972349e+02).add(1.33227210e+02)
      .add(1.49524603e+02).add(1.77863180e+02).add(2.03107609e+02)
      .add(2.34050592e+02).add(1.63948454e+02).array())
      .add(stan::math::array_builder<double>().add(1.80211210e+01)
      .add(4.39953076e+01).add(6.87836396e+01).add(7.50191981e+01)
      .add(1.07932489e+02).add(1.37972326e+02).add(1.64050652e+02)
      .add(1.82408859e+02).add(2.10439337e+02).add(2.81073226e+02)
      .add(1.67044005e+02).array()).add(stan::math::array_builder<double>()
      .add(1.72094997e+01).add(4.66242672e+01).add(6.15323119e+01)
      .add(7.25820159e+01).add(1.14646898e+02).add(1.37843703e+02)
      .add(1.64519016e+02).add(1.89206375e+02).add(2.21244614e+02)
      .add(2.68406442e+02).add(1.74563680e+02).array())
      .add(stan::math::array_builder<double>().add(1.26129491e+01)
      .add(4.65100453e+01).add(7.24291774e+01).add(9.42911359e+01)
      .add(1.21475552e+02).add(1.28846272e+02).add(1.71598331e+02)
      .add(1.80438466e+02).add(2.33563565e+02).add(2.49929185e+02)
      .add(1.57926010e+02).array()).add(stan::math::array_builder<double>()
      .add(1.65721966e+01).add(4.15814357e+01).add(7.10452666e+01)
      .add(8.73731202e+01).add(1.08194379e+02).add(1.47273797e+02)
      .add(1.82743280e+02).add(2.13537461e+02).add(2.15316833e+02)
      .add(2.91310837e+02).add(1.82038006e+02).array())
      .add(stan::math::array_builder<double>().add(1.43918501e+01)
      .add(4.03903042e+01).add(7.55845345e+01).add(9.36076362e+01)
      .add(1.08207774e+02).add(1.54543068e+02).add(1.81073086e+02)
      .add(2.20215592e+02).add(2.28525893e+02).add(2.77246228e+02)
      .add(2.03582302e+02).array()).add(stan::math::array_builder<double>()
      .add(1.91295335e+01).add(4.39055337e+01).add(6.05415227e+01)
      .add(8.73127566e+01).add(1.29706012e+02).add(1.42132120e+02)
      .add(1.96360631e+02).add(2.01791216e+02).add(2.73563189e+02)
      .add(3.32737336e+02).add(2.25317376e+02).array())
      .add(stan::math::array_builder<double>().add(1.84642198e+01)
      .add(3.97431402e+01).add(7.36761182e+01).add(8.39017052e+01)
      .add(1.16216123e+02).add(1.40089361e+02).add(2.04310400e+02)
      .add(2.32660418e+02).add(2.80518202e+02).add(3.32352236e+02)
      .add(2.11143722e+02).array()).add(stan::math::array_builder<double>()
      .add(1.71186193e+01).add(3.42413022e+01).add(6.87954752e+01)
      .add(9.04461118e+01).add(1.33204588e+02).add(1.53920957e+02)
      .add(2.26991418e+02).add(2.43032014e+02).add(2.69884538e+02)
      .add(3.65229867e+02).add(2.62494606e+02).array())
      .add(stan::math::array_builder<double>().add(1.51537393e+01)
      .add(4.30771757e+01).add(8.51648965e+01).add(1.04161646e+02)
      .add(1.17605905e+02).add(1.43836548e+02).add(2.02935729e+02)
      .add(2.21568017e+02).add(3.03448978e+02).add(3.37282851e+02)
      .add(2.45982813e+02).array()).add(stan::math::array_builder<double>()
      .add(1.80513599e+01).add(4.25515453e+01).add(6.99478923e+01)
      .add(8.51885257e+01).add(1.21786474e+02).add(1.70233708e+02)
      .add(1.85944413e+02).add(2.37791587e+02).add(2.66830701e+02)
      .add(3.38842613e+02).add(2.52863742e+02).array())
      .add(stan::math::array_builder<double>().add(1.90103654e+01)
      .add(3.84466926e+01).add(9.66727750e+01).add(8.75828797e+01)
      .add(1.00418891e+02).add(1.61558858e+02).add(2.09820490e+02)
      .add(2.09778478e+02).add(2.84427382e+02).add(3.91895084e+02)
      .add(2.45025532e+02).array()).add(stan::math::array_builder<double>()
      .add(1.20976340e+01).add(3.74387419e+01).add(6.39548197e+01)
      .add(9.94441651e+01).add(1.15578559e+02).add(1.50772647e+02)
      .add(2.08945620e+02).add(2.52573539e+02).add(3.02859875e+02)
      .add(4.37680292e+02).add(2.41935257e+02).array())
      .add(stan::math::array_builder<double>().add(9.59524312e+00)
      .add(3.55196849e+01).add(5.70188113e+01).add(8.51809311e+01)
      .add(1.21780202e+02).add(1.68464603e+02).add(2.24367717e+02)
      .add(2.44443649e+02).add(3.35264601e+02).add(3.67586502e+02)
      .add(2.76143831e+02).array()).add(stan::math::array_builder<double>()
      .add(1.49827350e+01).add(2.52399675e+01).add(8.86657832e+01)
      .add(9.86877192e+01).add(1.09809468e+02).add(1.65858833e+02)
      .add(1.89464666e+02).add(2.43251434e+02).add(3.28786438e+02)
      .add(4.46221915e+02).add(3.28692105e+02).array())
      .add(stan::math::array_builder<double>().add(1.08850513e+01)
      .add(3.46299423e+01).add(5.08364374e+01).add(1.04116372e+02)
      .add(1.39443232e+02).add(1.91931117e+02).add(1.99211744e+02)
      .add(2.65144283e+02).add(3.54687870e+02).add(4.51851844e+02)
      .add(3.02615115e+02).array()).add(stan::math::array_builder<double>()
      .add(7.91895206e+00).add(3.40765172e+01).add(7.52337581e+01)
      .add(1.06353458e+02).add(9.96913129e+01).add(1.85499027e+02)
      .add(2.47669313e+02).add(2.98737655e+02).add(3.44496546e+02)
      .add(4.62557620e+02).add(3.25060431e+02).array())
      .add(stan::math::array_builder<double>().add(1.27880149e+01)
      .add(3.66862344e+01).add(7.43836981e+01).add(1.06079782e+02)
      .add(1.43080217e+02).add(1.82153003e+02).add(2.50902601e+02)
      .add(2.81475008e+02).add(3.79199155e+02).add(4.36134822e+02)
      .add(3.26000021e+02).array()).add(stan::math::array_builder<double>()
      .add(7.32327103e+00).add(3.18266179e+01).add(5.60623625e+01)
      .add(7.92206982e+01).add(1.43492781e+02).add(1.54173281e+02)
      .add(2.26525232e+02).add(2.78189729e+02).add(3.46851519e+02)
      .add(4.81548606e+02).add(3.78861295e+02).array())
      .add(stan::math::array_builder<double>().add(1.01957378e+01)
      .add(2.72004022e+01).add(5.73285422e+01).add(9.28445485e+01)
      .add(1.42809189e+02).add(1.82284689e+02).add(2.54510836e+02)
      .add(2.82008244e+02).add(4.10410170e+02).add(5.59666119e+02)
      .add(3.89401458e+02).array()).add(stan::math::array_builder<double>()
      .add(6.62651154e+00).add(3.62403008e+01).add(5.80161294e+01)
      .add(9.41596588e+01).add(1.30165946e+02).add(1.58690789e+02)
      .add(2.79712546e+02).add(3.13196437e+02).add(4.05790087e+02)
      .add(4.99250484e+02).add(3.70223553e+02).array())
      .add(stan::math::array_builder<double>().add(6.25162054e+00)
      .add(3.51750347e+01).add(5.28111167e+01).add(1.09118685e+02)
      .add(1.37797598e+02).add(2.04783501e+02).add(2.80928749e+02)
      .add(3.15502821e+02).add(4.67247800e+02).add(5.50485531e+02)
      .add(3.68615939e+02).array()).add(stan::math::array_builder<double>()
      .add(1.07982173e+01).add(3.38166959e+01).add(3.62955648e+01)
      .add(1.18638377e+02).add(1.29464487e+02).add(2.04805998e+02)
      .add(2.51096551e+02).add(3.28375042e+02).add(4.50435197e+02)
      .add(5.77728777e+02).add(4.28610249e+02).array())
      .add(stan::math::array_builder<double>().add(1.25544091e+01)
      .add(2.71380964e+01).add(4.40516625e+01).add(8.62928521e+01)
      .add(1.76856411e+02).add(1.80490099e+02).add(2.62612319e+02)
      .add(2.96400722e+02).add(4.35035535e+02).add(5.65124092e+02)
      .add(4.13658288e+02).array()).add(stan::math::array_builder<double>()
      .add(3.86909619e+00).add(3.04965643e+01).add(3.79486221e+01)
      .add(1.00858194e+02).add(1.24066533e+02).add(1.85052790e+02)
      .add(2.67840747e+02).add(3.36503950e+02).add(4.80960297e+02)
      .add(6.19432226e+02).add(4.85350955e+02).array())
      .add(stan::math::array_builder<double>().add(7.28219441e+00)
      .add(1.66534116e+01).add(7.17219502e+01).add(1.03380933e+02)
      .add(1.72140069e+02).add(1.81998081e+02).add(2.80586251e+02)
      .add(3.31251776e+02).add(4.84661400e+02).add(6.20667275e+02)
      .add(4.75600995e+02).array()).add(stan::math::array_builder<double>()
      .add(4.02491145e+00).add(2.62285861e+01).add(6.99047032e+01)
      .add(6.69270350e+01).add(1.37516546e+02).add(1.97933128e+02)
      .add(2.13347138e+02).add(4.04792272e+02).add(4.59126515e+02)
      .add(7.05088855e+02).add(5.43337735e+02).array())
      .add(stan::math::array_builder<double>().add(6.00175037e+00)
      .add(3.13011665e+01).add(4.91154222e+01).add(6.15155936e+01)
      .add(1.41521929e+02).add(1.78417076e+02).add(2.79591494e+02)
      .add(3.78401868e+02).add(5.01666933e+02).add(6.47854734e+02)
      .add(4.97604404e+02).array()).add(stan::math::array_builder<double>()
      .add(9.19634771e+00).add(2.74319883e+01).add(7.82829010e+01)
      .add(8.08635432e+01).add(1.30986410e+02).add(1.40272402e+02)
      .add(2.92179784e+02).add(3.65998935e+02).add(5.15834028e+02)
      .add(6.66161768e+02).add(5.00385829e+02).array())
      .add(stan::math::array_builder<double>().add(4.74754356e+00)
      .add(2.44493018e+01).add(4.82022998e+01).add(5.58364538e+01)
      .add(1.60794135e+02).add(2.42809206e+02).add(3.05615640e+02)
      .add(4.23020451e+02).add(4.87185887e+02).add(7.08070113e+02)
      .add(4.93116343e+02).array()).add(stan::math::array_builder<double>()
      .add(4.70267657e+00).add(3.87009945e+01).add(3.71784960e+01)
      .add(9.04842334e+01).add(1.88434323e+02).add(1.84672035e+02)
      .add(3.20379272e+02).add(3.59682690e+02).add(5.74311074e+02)
      .add(9.08139768e+02).add(6.02178726e+02).array())
      .add(stan::math::array_builder<double>().add(3.40010052e+00)
      .add(2.78733327e+01).add(6.35188939e+01).add(7.07840916e+01)
      .add(1.32791461e+02).add(1.61210496e+02).add(2.53059880e+02)
      .add(3.94945384e+02).add(5.52654174e+02).add(7.88115182e+02)
      .add(5.70770168e+02).array()).add(stan::math::array_builder<double>()
      .add(5.82982558e+00).add(2.92556375e+01).add(3.84636364e+01)
      .add(8.45964996e+01).add(1.26700395e+02).add(1.85366927e+02)
      .add(3.06119127e+02).add(3.80943556e+02).add(5.28568761e+02)
      .add(7.41098228e+02).add(6.89899678e+02).array())
      .add(stan::math::array_builder<double>().add(5.16032105e+00)
      .add(1.34774276e+01).add(3.51570511e+01).add(7.86980168e+01)
      .add(1.58252238e+02).add(1.44477639e+02).add(3.53561883e+02)
      .add(5.08212808e+02).add(6.83186550e+02).add(7.79992325e+02)
      .add(6.45331466e+02).array()).add(stan::math::array_builder<double>()
      .add(1.12504762e+00).add(1.93873615e+01).add(5.23393352e+01)
      .add(9.95942248e+01).add(1.20393979e+02).add(1.33579574e+02)
      .add(3.23247017e+02).add(4.30697179e+02).add(5.43058604e+02)
      .add(8.49543970e+02).add(6.18359458e+02).array())
      .add(stan::math::array_builder<double>().add(1.47422500e+00)
      .add(1.34040543e+01).add(4.06357082e+01).add(6.96403400e+01)
      .add(1.38788881e+02).add(1.70004785e+02).add(2.65168362e+02)
      .add(3.81974627e+02).add(6.50479677e+02).add(7.93254271e+02)
      .add(6.11875066e+02).array()).add(stan::math::array_builder<double>()
      .add(1.21940480e+00).add(1.81197673e+01).add(5.84847900e+01)
      .add(2.70525155e+01).add(1.25886287e+02).add(2.72360658e+02)
      .add(4.46517204e+02).add(4.19742166e+02).add(7.18676624e+02)
      .add(7.88880593e+02).add(5.60452810e+02).array())
      .add(stan::math::array_builder<double>().add(3.12715943e+00)
      .add(1.37130396e+01).add(4.79398420e+01).add(6.19889275e+01)
      .add(1.22463954e+02).add(1.79521000e+02).add(3.22698793e+02)
      .add(4.86337471e+02).add(6.55298437e+02).add(8.83801688e+02)
      .add(8.11101350e+02).array()).add(stan::math::array_builder<double>()
      .add(3.83788435e+00).add(9.34859959e+00).add(7.10490651e+01)
      .add(4.03396923e+01).add(1.34726565e+02).add(2.12019519e+02)
      .add(3.10966901e+02).add(4.01090564e+02).add(6.87370951e+02)
      .add(9.61829893e+02).add(8.48791621e+02).array())
      .add(stan::math::array_builder<double>().add(1.42416485e+01)
      .add(1.40182662e+01).add(4.83017879e+01).add(5.46350229e+01)
      .add(1.19528787e+02).add(1.91834987e+02).add(3.75472138e+02)
      .add(5.33606507e+02).add(6.35223149e+02).add(1.07202853e+03)
      .add(7.79489460e+02).array()).add(stan::math::array_builder<double>()
      .add(8.81398286e-01).add(1.60059550e+01).add(4.76380236e+01)
      .add(5.16879889e+01).add(1.17205438e+02).add(2.04389822e+02)
      .add(3.07563521e+02).add(4.29179693e+02).add(5.68568210e+02)
      .add(9.36110997e+02).add(7.15854773e+02).array())
      .add(stan::math::array_builder<double>().add(2.42705457e+00)
      .add(1.86823628e+01).add(5.95724009e+01).add(5.60571423e+01)
      .add(7.18703988e+01).add(1.80818167e+02).add(2.90570748e+02)
      .add(4.55285072e+02).add(6.09881964e+02).add(1.09507874e+03)
      .add(8.16844618e+02).array()).add(stan::math::array_builder<double>()
      .add(2.39394289e+00).add(1.08157483e+01).add(3.78933933e+01)
      .add(9.59502563e+01).add(7.13229710e+01).add(2.00497508e+02)
      .add(3.32481108e+02).add(4.84514547e+02).add(6.51595228e+02)
      .add(1.14736346e+03).add(8.36015060e+02).array())
      .add(stan::math::array_builder<double>().add(3.95412490e+00)
      .add(4.65022766e+00).add(4.17730186e+01).add(9.39921272e+01)
      .add(1.31408334e+02).add(2.95290007e+02).add(3.79676671e+02)
      .add(4.92038371e+02).add(8.66000514e+02).add(1.22735736e+03)
      .add(6.74573681e+02).array()).add(stan::math::array_builder<double>()
      .add(9.27352967e-01).add(8.34884311e+00).add(3.04768803e+01)
      .add(2.55354738e+01).add(1.31910613e+02).add(1.65106196e+02)
      .add(3.60884912e+02).add(4.57416380e+02).add(7.70175467e+02)
      .add(1.06055011e+03).add(1.07267682e+03).array())
      .add(stan::math::array_builder<double>().add(1.03397281e+00)
      .add(7.40582873e+00).add(4.98150437e+01).add(4.78707403e+01)
      .add(9.25971190e+01).add(1.86939375e+02).add(3.19588423e+02)
      .add(4.77446468e+02).add(5.39665451e+02).add(1.49679668e+03)
      .add(8.89666917e+02).array()).add(stan::math::array_builder<double>()
      .add(5.54617865e-01).add(3.97519508e+00).add(1.47438747e+01)
      .add(5.31878721e+01).add(9.48303068e+01).add(1.09592197e+02)
      .add(3.48265947e+02).add(4.78566452e+02).add(7.39105670e+02)
      .add(8.49405606e+02).add(9.85798805e+02).array())
      .add(stan::math::array_builder<double>().add(4.30312190e-01)
      .add(2.78096987e+01).add(2.19284162e+01).add(5.05077051e+01)
      .add(1.09425963e+02).add(8.80597197e+01).add(2.69451409e+02)
      .add(4.18551483e+02).add(7.79351237e+02).add(1.17344699e+03)
      .add(1.15589466e+03).array()).add(stan::math::array_builder<double>()
      .add(3.71685337e+00).add(4.32759367e+00).add(2.02361093e+01)
      .add(3.46849309e+01).add(9.29200729e+01).add(1.72504165e+02)
      .add(2.77769913e+02).add(5.20932399e+02).add(9.28774489e+02)
      .add(1.22774690e+03).add(9.90524501e+02).array())
      .add(stan::math::array_builder<double>().add(4.65454750e-01)
      .add(5.19597057e+00).add(6.24316042e+01).add(4.21560367e+01)
      .add(1.21931109e+02).add(2.45194528e+02).add(3.54515650e+02)
      .add(3.74035235e+02).add(7.79741354e+02).add(1.39390441e+03)
      .add(1.47071964e+03).array()).add(stan::math::array_builder<double>()
      .add(3.95174360e+00).add(1.48270081e+01).add(5.31186538e+01)
      .add(2.50546998e+01).add(4.53335770e+01).add(1.37320458e+02)
      .add(3.47871162e+02).add(4.64849022e+02).add(7.76039243e+02)
      .add(1.16584688e+03).add(1.19734721e+03).array())
      .add(stan::math::array_builder<double>().add(1.60338407e+00)
      .add(2.32487024e+00).add(2.43239614e+01).add(5.54885752e+01)
      .add(7.03748739e+01).add(1.04212294e+02).add(3.93750798e+02)
      .add(6.10977849e+02).add(9.28422938e+02).add(1.38293840e+03)
      .add(1.53070803e+03).array()).add(stan::math::array_builder<double>()
      .add(4.31034411e-01).add(3.89646553e+00).add(9.47977053e+00)
      .add(5.50352970e+00).add(8.48346718e+01).add(1.49815806e+02)
      .add(2.96436267e+02).add(4.62142621e+02).add(1.00528126e+03)
      .add(1.30168794e+03).add(1.44847089e+03).array())
      .add(stan::math::array_builder<double>().add(1.31147154e-01)
      .add(2.11854320e+00).add(2.59695913e+01).add(5.43779688e+01)
      .add(1.11895500e+02).add(1.08704147e+02).add(2.85980034e+02)
      .add(4.50787047e+02).add(9.33956694e+02).add(1.26631131e+03)
      .add(1.13701779e+03).array()).add(stan::math::array_builder<double>()
      .add(8.10646270e-01).add(2.99979504e+00).add(5.32802048e+00)
      .add(1.94235495e+01).add(1.27765227e+02).add(1.99348989e+02)
      .add(4.82291482e+02).add(4.46091802e+02).add(6.67602130e+02)
      .add(1.35177092e+03).add(1.32031751e+03).array())
      .add(stan::math::array_builder<double>().add(2.56893193e-01)
      .add(6.38058450e+00).add(1.53585293e+01).add(5.73545653e+01)
      .add(6.33127041e+01).add(1.52304418e+02).add(4.38138642e+02)
      .add(3.39448173e+02).add(8.75174616e+02).add(1.10762334e+03)
      .add(1.06613057e+03).array()).add(stan::math::array_builder<double>()
      .add(8.12595435e-01).add(2.90694521e+00).add(1.31651744e+01)
      .add(1.53965959e+01).add(4.80332234e+01).add(1.48325392e+02)
      .add(3.88304848e+02).add(4.75063665e+02).add(1.13187912e+03)
      .add(1.82628707e+03).add(1.71706209e+03).array())
      .add(stan::math::array_builder<double>().add(2.12762977e-01)
      .add(1.94814272e+01).add(1.86345230e+01).add(6.44644265e+01)
      .add(2.27204604e+01).add(2.11296469e+02).add(3.54601597e+02)
      .add(6.21466003e+02).add(1.52979781e+03).add(2.34110268e+03)
      .add(9.43512493e+02).array()).add(stan::math::array_builder<double>()
      .add(1.09358400e-01).add(1.16365028e+00).add(6.23795816e+00)
      .add(2.29923135e+01).add(1.54406985e+01).add(7.39336199e+01)
      .add(2.79865284e+02).add(4.08125167e+02).add(1.23381321e+03)
      .add(8.38234752e+02).add(9.45024282e+02).array())
      .add(stan::math::array_builder<double>().add(7.68344143e-02)
      .add(8.78110710e-01).add(1.92551007e+01).add(3.98495095e+01)
      .add(1.08003645e+02).add(2.65711045e+02).add(9.14036084e+01)
      .add(3.48389627e+02).add(1.50148353e+03).add(1.75552895e+03)
      .add(1.78186043e+03).array()).add(stan::math::array_builder<double>()
      .add(6.37253750e-02).add(3.09357315e-01).add(4.81379476e-01)
      .add(1.48275404e+01).add(6.89772283e+01).add(1.84766822e+02)
      .add(3.06650171e+02).add(3.48596668e+02).add(1.15684574e+03)
      .add(2.46850231e+03).add(1.35192612e+03).array())
      .add(stan::math::array_builder<double>().add(1.09103322e+00)
      .add(3.76669691e+00).add(3.35434298e+00).add(2.45283794e+00)
      .add(1.64168799e+01).add(1.78667799e+02).add(1.33544475e+02)
      .add(6.13899530e+02).add(1.27154919e+03).add(1.39272551e+03)
      .add(1.57673052e+03).array()).add(stan::math::array_builder<double>()
      .add(9.15720369e-02).add(6.10490236e-01).add(9.93962765e+00)
      .add(2.04607184e+01).add(4.98778517e+00).add(8.79958426e+01)
      .add(5.52478340e+02).add(3.58063550e+02).add(6.51212007e+02)
      .add(2.66392414e+03).add(1.76705338e+03).array())
      .add(stan::math::array_builder<double>().add(2.99093290e-01)
      .add(7.59941974e-02).add(2.00068746e+00).add(9.12434591e+00)
      .add(5.34539094e+01).add(6.72432932e+01).add(4.06139592e+02)
      .add(3.19931703e+02).add(1.12188288e+03).add(2.12710223e+03)
      .add(1.65746058e+03).array()).add(stan::math::array_builder<double>()
      .add(2.61602531e-01).add(8.20537889e+00).add(4.01925575e+00)
      .add(2.56060103e+01).add(4.44390757e+01).add(1.78122323e+01)
      .add(2.18320917e+02).add(2.94518889e+02).add(7.84189684e+02)
      .add(2.13297771e+03).add(1.92232969e+03).array())
      .add(stan::math::array_builder<double>().add(4.17023745e-01)
      .add(4.35053658e+00).add(3.67714682e+00).add(7.10516004e+00)
      .add(7.43476790e+01).add(3.82762597e+01).add(3.55112626e+02)
      .add(8.52353613e+02).add(8.39404469e+02).add(1.28203628e+03)
      .add(2.11617600e+03).array()).add(stan::math::array_builder<double>()
      .add(6.59062841e-01).add(1.98248808e+00).add(2.29257977e+00)
      .add(9.93133647e+00).add(2.77912165e+01).add(6.14067020e+01)
      .add(7.12527591e+01).add(4.16810811e+02).add(1.01936352e+03)
      .add(2.07790427e+03).add(2.53609774e+03).array())
      .add(stan::math::array_builder<double>().add(7.40503180e-02)
      .add(8.26250020e-01).add(4.04618576e+00).add(7.58304099e+00)
      .add(5.72877722e+00).add(1.41771558e+01).add(4.08158856e+02)
      .add(9.16746681e+02).add(1.41392777e+03).add(2.19160546e+03)
      .add(1.19733761e+03).array()).add(stan::math::array_builder<double>()
      .add(5.73331304e-03).add(1.39302536e+00).add(4.80177520e+00)
      .add(1.20789259e+01).add(2.24678625e+01).add(2.68284706e+01)
      .add(3.46110015e+02).add(4.86577796e+02).add(1.08644273e+03)
      .add(2.88851755e+03).add(3.53185273e+03).array())
      .add(stan::math::array_builder<double>().add(6.71362709e-02)
      .add(4.81085363e-02).add(4.60958966e+00).add(1.28684483e+01)
      .add(3.34463496e+01).add(5.11301606e+01).add(1.47354236e+02)
      .add(4.58172595e+02).add(1.01844121e+03).add(2.62914512e+03)
      .add(1.24605752e+03).array()).add(stan::math::array_builder<double>()
      .add(1.31504125e+00).add(2.93983996e-02).add(4.02942490e+00)
      .add(3.01259982e+00).add(1.21705409e+01).add(2.41843959e+01)
      .add(1.08459603e+02).add(4.90272763e+02).add(3.75063898e+02)
      .add(3.32232226e+03).add(1.80846886e+03).array())
      .add(stan::math::array_builder<double>().add(4.47794586e-01)
      .add(6.48676062e-01).add(3.37198034e+00).add(7.41329249e+00)
      .add(3.97715037e+00).add(9.07972504e+01).add(2.64475626e+02)
      .add(7.30341880e+02).add(1.68759450e+03).add(2.75186013e+03)
      .add(3.21280736e+03).array()).add(stan::math::array_builder<double>()
      .add(6.08840503e-03).add(5.52593701e-01).add(2.43752910e+00)
      .add(1.56509872e+00).add(1.46463680e+01).add(1.11298617e+02)
      .add(1.76383868e+02).add(7.12317928e+02).add(1.85401938e+03)
      .add(4.24176248e+03).add(1.95850159e+03).array())
      .add(stan::math::array_builder<double>().add(1.21958521e-02)
      .add(4.18272880e+00).add(5.80278192e-01).add(3.59347459e+00)
      .add(3.20735300e+00).add(6.62563048e+01).add(1.38396727e+02)
      .add(8.91127227e+02).add(3.46012637e+02).add(4.93331633e+03)
      .add(3.86880698e+03).array()).add(stan::math::array_builder<double>()
      .add(9.84968550e-03).add(9.91015132e-01).add(5.01948364e+00)
      .add(3.22594713e+00).add(4.35560345e+01).add(5.91310531e+01)
      .add(6.79747330e+02).add(1.99442721e+02).add(4.30792225e+02)
      .add(2.45113364e+03).add(3.30292360e+03).array())
      .add(stan::math::array_builder<double>().add(1.82780759e-02)
      .add(1.29397814e-01).add(2.08975274e+00).add(1.28487401e+01)
      .add(4.81968957e+00).add(6.98892333e+01).add(6.04833170e+01)
      .add(1.07998424e+03).add(1.27394209e+03).add(3.68537866e+03)
      .add(3.24980110e+03).array()).add(stan::math::array_builder<double>()
      .add(4.68714839e-03).add(2.80670527e+00).add(0.00000000e+00)
      .add(5.06222143e+00).add(3.14968895e+00).add(8.46464513e+01)
      .add(4.12056162e+01).add(6.47716192e+02).add(5.24684286e+02)
      .add(1.48729174e+03).add(1.39681623e+03).array())
      .add(stan::math::array_builder<double>().add(2.03186805e-02)
      .add(7.80771070e-02).add(7.62275960e-01).add(1.87472085e+01)
      .add(1.50868747e+01).add(1.09662071e+02).add(5.15513167e+02)
      .add(9.06814645e+01).add(5.34908002e+02).add(2.20652710e+03)
      .add(2.14840271e+03).array()).add(stan::math::array_builder<double>()
      .add(5.08409534e-01).add(3.25548944e-01).add(1.94119106e-01)
      .add(7.93397195e+00).add(3.05577976e+01).add(4.39656278e+02)
      .add(1.45530008e+02).add(1.25116882e+03).add(1.98878846e+03)
      .add(4.32908806e+03).add(6.48690238e+03).array())
      .add(stan::math::array_builder<double>().add(2.03590367e-02)
      .add(9.30743720e-02).add(1.94433086e+00).add(7.83040057e-01)
      .add(1.47985447e+00).add(2.12675795e+01).add(8.27589260e+01)
      .add(8.28979029e+01).add(6.37061622e+02).add(1.50618829e+03)
      .add(1.28346430e+03).array()).add(stan::math::array_builder<double>()
      .add(4.81538502e-03).add(6.83858914e+00).add(4.28807767e-01)
      .add(4.21269671e+00).add(5.22032615e+00).add(1.06411858e+02)
      .add(1.01044247e+02).add(9.27722842e+02).add(1.58704444e+03)
      .add(3.17908213e+03).add(4.42351623e+03).array())
      .add(stan::math::array_builder<double>().add(5.04231674e-01)
      .add(2.25814657e-03).add(2.13791296e+00).add(7.72065806e-02)
      .add(3.98931331e-01).add(5.40433736e+00).add(1.32321989e+01)
      .add(1.16416835e+02).add(1.59871355e+03).add(1.63619502e+03)
      .add(3.66668100e+03).array()).add(stan::math::array_builder<double>()
      .add(2.51744541e-06).add(1.12863856e-03).add(0.00000000e+00)
      .add(4.57806323e-01).add(1.65510891e+00).add(9.90565857e+01)
      .add(3.14985015e+00).add(1.06929143e-01).add(8.50546870e+02)
      .add(4.91311414e+02).add(6.24508576e+03).array())
      .add(stan::math::array_builder<double>().add(4.93945238e-04)
      .add(3.65424208e-01).add(9.84724914e-01).add(1.05250459e+00)
      .add(1.88399053e-01).add(1.69382928e+01).add(6.54441581e+01)
      .add(0.00000000e+00).add(2.96878725e+02).add(2.66317475e+03)
      .add(1.62093264e+03).array()).add(stan::math::array_builder<double>()
      .add(8.21092942e-03).add(1.90318629e-04).add(3.85026786e+00)
      .add(9.10055858e+00).add(4.25097489e-02).add(3.68432782e+01)
      .add(1.40244153e+01).add(1.25229906e+02).add(1.56741629e+03)
      .add(1.50207329e+03).add(9.50409158e+02).array())
      .add(stan::math::array_builder<double>().add(1.03347091e-02)
      .add(1.11512334e-02).add(9.23524262e-01).add(1.05527382e+00)
      .add(1.31144306e+00).add(5.34621074e+01).add(1.37433404e+02)
      .add(2.77078162e+01).add(5.83054567e+02).add(5.18605920e+03)
      .add(1.15480910e+03).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(3.10766772e-01).add(8.00509232e+00)
      .add(2.23034920e+00).add(1.99452989e+00).add(1.61853308e+00)
      .add(1.36867715e+01).add(1.38431377e+02).add(1.29371270e+03)
      .add(0.00000000e+00).add(4.54652770e+03).array())
      .add(stan::math::array_builder<double>().add(1.38072730e-03)
      .add(0.00000000e+00).add(1.04692903e+00).add(1.38206759e-01)
      .add(3.55340138e-01).add(2.59242823e+02).add(8.56132252e+01)
      .add(2.16438559e+02).add(6.13312943e+02).add(4.20314744e+03)
      .add(3.88889228e+03).array()).add(stan::math::array_builder<double>()
      .add(8.52185058e-05).add(3.75260173e-02).add(8.03280807e-02)
      .add(3.10193906e-01).add(1.16419314e+01).add(3.39657905e+00)
      .add(1.30354037e+02).add(7.59384116e+01).add(0.00000000e+00)
      .add(9.88451501e+03).add(9.36318288e+03).array())
      .add(stan::math::array_builder<double>().add(1.23317028e-03)
      .add(0.00000000e+00).add(8.00809885e-02).add(0.00000000e+00)
      .add(1.32085993e-02).add(1.31355558e+02).add(9.63155656e+01)
      .add(1.46752674e+03).add(2.06492038e+03).add(2.43417644e+03)
      .add(1.31948655e+03).array()).add(stan::math::array_builder<double>()
      .add(3.53775663e-03).add(5.48518359e-02).add(9.09397544e-01)
      .add(1.80857291e-01).add(1.95597993e+01).add(2.43403870e-01)
      .add(1.25076377e+01).add(1.67442466e+03).add(1.57805395e+03)
      .add(5.36447807e+03).add(1.94084023e+03).array())
      .add(stan::math::array_builder<double>().add(1.76972207e-02)
      .add(2.07221581e-01).add(1.02130751e-05).add(6.39569240e-02)
      .add(3.91779354e+00).add(8.48102725e+00).add(6.00988051e+01)
      .add(5.15284197e+02).add(6.29177617e+02).add(0.00000000e+00)
      .add(7.15990938e+03).array()).add(stan::math::array_builder<double>()
      .add(5.85739764e-02).add(1.39139365e-01).add(3.75307408e-01)
      .add(3.47507392e-02).add(5.74931000e+00).add(8.24480663e+00)
      .add(2.81988477e+02).add(1.30664911e+02).add(4.25293271e+03)
      .add(2.10716109e+03).add(7.41922592e+03).array())
      .add(stan::math::array_builder<double>().add(7.41152672e-07)
      .add(8.66250474e-04).add(2.07143127e-02).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(1.06839902e+02)
      .add(5.55408496e+02).add(1.39508294e+02).add(7.02528860e+03)
      .add(6.92006706e+03).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(2.19430693e-01).add(1.13648967e-01)
      .add(1.54778432e-02).add(2.31045507e+01).add(1.96064423e+00)
      .add(0.00000000e+00).add(2.79284974e-01).add(2.98369205e+03)
      .add(2.63311241e+03).add(3.61334601e+03).array())
      .add(stan::math::array_builder<double>().add(2.20439742e-04)
      .add(2.65415998e-04).add(3.96200590e-03).add(0.00000000e+00)
      .add(2.42675188e+00).add(3.69165352e+01).add(0.00000000e+00)
      .add(8.07564033e+02).add(4.61894458e+01).add(3.06729154e+03)
      .add(4.57642714e+03).array()).add(stan::math::array_builder<double>()
      .add(7.57822896e-03).add(3.37433304e-01).add(0.00000000e+00)
      .add(0.00000000e+00).add(2.67063792e-01).add(5.11367505e+01)
      .add(4.22589523e+02).add(4.98769887e+02).add(3.86090474e+03)
      .add(6.50829085e+03).add(8.62534229e+03).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(3.63516397e-01)
      .add(0.00000000e+00).add(1.52374199e+02).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(2.43640694e-01).add(8.18581122e+01)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(3.09125476e+01).add(0.00000000e+00).add(5.83835405e+02)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(1.39937363e+01).add(1.00770445e+03).add(0.00000000e+00)
      .add(1.97769152e+04).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(1.93844259e+01).add(3.00043435e+03)
      .add(5.74377283e+04).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(2.89990203e+02).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(9.33536341e-05).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(3.41484539e+01).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(2.23042643e-01).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(1.77505206e+01)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(3.33831992e+03).add(4.20179818e+04).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(4.40790508e-04).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(3.38345986e+01)
      .add(0.00000000e+00).add(1.90359116e+03).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(1.71773195e-02).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(6.26891995e-01).add(0.00000000e+00)
      .add(2.89283716e+00).add(9.31527235e+03).add(0.00000000e+00)
      .add(0.00000000e+00).add(1.03742952e+05).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(4.18399049e+04).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(4.68015384e-01)
      .add(0.00000000e+00).add(0.00000000e+00).add(4.50340026e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(6.66244441e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(9.58249157e-01).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(1.81283480e+04).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array())
      .add(stan::math::array_builder<double>().add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).array()).add(stan::math::array_builder<double>()
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).add(0.00000000e+00)
      .add(0.00000000e+00).add(0.00000000e+00).array()).array(),
      "assigning variable hist_array");
    std::vector<local_scalar_t__> hist_edge_0;
    hist_edge_0 = std::vector<local_scalar_t__>(281, DUMMY_VAR__);
    
    current_statement__ = 310;
    assign(hist_edge_0, nil_index_list(), stan::math::array_builder<double>()
      .add(1.00000000e+02).add(1.05925373e+02).add(1.12201845e+02)
      .add(1.18850223e+02).add(1.25892541e+02).add(1.33352143e+02)
      .add(1.41253754e+02).add(1.49623566e+02).add(1.58489319e+02)
      .add(1.67880402e+02).add(1.77827941e+02).add(1.88364909e+02)
      .add(1.99526231e+02).add(2.11348904e+02).add(2.23872114e+02)
      .add(2.37137371e+02).add(2.51188643e+02).add(2.66072506e+02)
      .add(2.81838293e+02).add(2.98538262e+02).add(3.16227766e+02)
      .add(3.34965439e+02).add(3.54813389e+02).add(3.75837404e+02)
      .add(3.98107171e+02).add(4.21696503e+02).add(4.46683592e+02)
      .add(4.73151259e+02).add(5.01187234e+02).add(5.30884444e+02)
      .add(5.62341325e+02).add(5.95662144e+02).add(6.30957344e+02)
      .add(6.68343918e+02).add(7.07945784e+02).add(7.49894209e+02)
      .add(7.94328235e+02).add(8.41395142e+02).add(8.91250938e+02)
      .add(9.44060876e+02).add(1.00000000e+03).add(1.05925373e+03)
      .add(1.12201845e+03).add(1.18850223e+03).add(1.25892541e+03)
      .add(1.33352143e+03).add(1.41253754e+03).add(1.49623566e+03)
      .add(1.58489319e+03).add(1.67880402e+03).add(1.77827941e+03)
      .add(1.88364909e+03).add(1.99526231e+03).add(2.11348904e+03)
      .add(2.23872114e+03).add(2.37137371e+03).add(2.51188643e+03)
      .add(2.66072506e+03).add(2.81838293e+03).add(2.98538262e+03)
      .add(3.16227766e+03).add(3.34965439e+03).add(3.54813389e+03)
      .add(3.75837404e+03).add(3.98107171e+03).add(4.21696503e+03)
      .add(4.46683592e+03).add(4.73151259e+03).add(5.01187234e+03)
      .add(5.30884444e+03).add(5.62341325e+03).add(5.95662144e+03)
      .add(6.30957344e+03).add(6.68343918e+03).add(7.07945784e+03)
      .add(7.49894209e+03).add(7.94328235e+03).add(8.41395142e+03)
      .add(8.91250938e+03).add(9.44060876e+03).add(1.00000000e+04)
      .add(1.05925373e+04).add(1.12201845e+04).add(1.18850223e+04)
      .add(1.25892541e+04).add(1.33352143e+04).add(1.41253754e+04)
      .add(1.49623566e+04).add(1.58489319e+04).add(1.67880402e+04)
      .add(1.77827941e+04).add(1.88364909e+04).add(1.99526231e+04)
      .add(2.11348904e+04).add(2.23872114e+04).add(2.37137371e+04)
      .add(2.51188643e+04).add(2.66072506e+04).add(2.81838293e+04)
      .add(2.98538262e+04).add(3.16227766e+04).add(3.34965439e+04)
      .add(3.54813389e+04).add(3.75837404e+04).add(3.98107171e+04)
      .add(4.21696503e+04).add(4.46683592e+04).add(4.73151259e+04)
      .add(5.01187234e+04).add(5.30884444e+04).add(5.62341325e+04)
      .add(5.95662144e+04).add(6.30957344e+04).add(6.68343918e+04)
      .add(7.07945784e+04).add(7.49894209e+04).add(7.94328235e+04)
      .add(8.41395142e+04).add(8.91250938e+04).add(9.44060876e+04)
      .add(1.00000000e+05).add(1.05925373e+05).add(1.12201845e+05)
      .add(1.18850223e+05).add(1.25892541e+05).add(1.33352143e+05)
      .add(1.41253754e+05).add(1.49623566e+05).add(1.58489319e+05)
      .add(1.67880402e+05).add(1.77827941e+05).add(1.88364909e+05)
      .add(1.99526231e+05).add(2.11348904e+05).add(2.23872114e+05)
      .add(2.37137371e+05).add(2.51188643e+05).add(2.66072506e+05)
      .add(2.81838293e+05).add(2.98538262e+05).add(3.16227766e+05)
      .add(3.34965439e+05).add(3.54813389e+05).add(3.75837404e+05)
      .add(3.98107171e+05).add(4.21696503e+05).add(4.46683592e+05)
      .add(4.73151259e+05).add(5.01187234e+05).add(5.30884444e+05)
      .add(5.62341325e+05).add(5.95662144e+05).add(6.30957344e+05)
      .add(6.68343918e+05).add(7.07945784e+05).add(7.49894209e+05)
      .add(7.94328235e+05).add(8.41395142e+05).add(8.91250938e+05)
      .add(9.44060876e+05).add(1.00000000e+06).add(1.05925373e+06)
      .add(1.12201845e+06).add(1.18850223e+06).add(1.25892541e+06)
      .add(1.33352143e+06).add(1.41253754e+06).add(1.49623566e+06)
      .add(1.58489319e+06).add(1.67880402e+06).add(1.77827941e+06)
      .add(1.88364909e+06).add(1.99526231e+06).add(2.11348904e+06)
      .add(2.23872114e+06).add(2.37137371e+06).add(2.51188643e+06)
      .add(2.66072506e+06).add(2.81838293e+06).add(2.98538262e+06)
      .add(3.16227766e+06).add(3.34965439e+06).add(3.54813389e+06)
      .add(3.75837404e+06).add(3.98107171e+06).add(4.21696503e+06)
      .add(4.46683592e+06).add(4.73151259e+06).add(5.01187234e+06)
      .add(5.30884444e+06).add(5.62341325e+06).add(5.95662144e+06)
      .add(6.30957344e+06).add(6.68343918e+06).add(7.07945784e+06)
      .add(7.49894209e+06).add(7.94328235e+06).add(8.41395142e+06)
      .add(8.91250938e+06).add(9.44060876e+06).add(1.00000000e+07)
      .add(1.05925373e+07).add(1.12201845e+07).add(1.18850223e+07)
      .add(1.25892541e+07).add(1.33352143e+07).add(1.41253754e+07)
      .add(1.49623566e+07).add(1.58489319e+07).add(1.67880402e+07)
      .add(1.77827941e+07).add(1.88364909e+07).add(1.99526231e+07)
      .add(2.11348904e+07).add(2.23872114e+07).add(2.37137371e+07)
      .add(2.51188643e+07).add(2.66072506e+07).add(2.81838293e+07)
      .add(2.98538262e+07).add(3.16227766e+07).add(3.34965439e+07)
      .add(3.54813389e+07).add(3.75837404e+07).add(3.98107171e+07)
      .add(4.21696503e+07).add(4.46683592e+07).add(4.73151259e+07)
      .add(5.01187234e+07).add(5.30884444e+07).add(5.62341325e+07)
      .add(5.95662144e+07).add(6.30957344e+07).add(6.68343918e+07)
      .add(7.07945784e+07).add(7.49894209e+07).add(7.94328235e+07)
      .add(8.41395142e+07).add(8.91250938e+07).add(9.44060876e+07)
      .add(1.00000000e+08).add(1.05925373e+08).add(1.12201845e+08)
      .add(1.18850223e+08).add(1.25892541e+08).add(1.33352143e+08)
      .add(1.41253754e+08).add(1.49623566e+08).add(1.58489319e+08)
      .add(1.67880402e+08).add(1.77827941e+08).add(1.88364909e+08)
      .add(1.99526231e+08).add(2.11348904e+08).add(2.23872114e+08)
      .add(2.37137371e+08).add(2.51188643e+08).add(2.66072506e+08)
      .add(2.81838293e+08).add(2.98538262e+08).add(3.16227766e+08)
      .add(3.34965439e+08).add(3.54813389e+08).add(3.75837404e+08)
      .add(3.98107171e+08).add(4.21696503e+08).add(4.46683592e+08)
      .add(4.73151259e+08).add(5.01187234e+08).add(5.30884444e+08)
      .add(5.62341325e+08).add(5.95662144e+08).add(6.30957344e+08)
      .add(6.68343918e+08).add(7.07945784e+08).add(7.49894209e+08)
      .add(7.94328235e+08).add(8.41395142e+08).add(8.91250938e+08)
      .add(9.44060876e+08).add(1.00000000e+09).array(),
      "assigning variable hist_edge_0");
    std::vector<local_scalar_t__> hist_edge_1;
    hist_edge_1 = std::vector<local_scalar_t__>(12, DUMMY_VAR__);
    
    current_statement__ = 311;
    assign(hist_edge_1, nil_index_list(), stan::math::array_builder<double>()
      .add(-1.).add(-0.9).add(-0.8).add(-0.7).add(-0.6).add(-0.5).add(
      -0.4).add(-0.3).add(-0.2).add(-0.1).add(0.).add(0.1).array(),
      "assigning variable hist_edge_1");
    current_statement__ = 312;
    return hist_array[(binary_search(value_0, hist_edge_0, pstream__) - 1)][
        (binary_search(value_1, hist_edge_1, pstream__) - 1)];
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct NorthernTracksEffAreaHist_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& value_0, const T1__& value_1, std::ostream* pstream__)  const 
{
return NorthernTracksEffAreaHist(value_0, value_1, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
NorthernTracksAngularResolution(const T0__& true_energy,
                                const Eigen::Matrix<T1__, -1, 1>& true_dir,
                                const Eigen::Matrix<T2__, -1, 1>& reco_dir,
                                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> NorthernTracksAngularResolutionPolyCoeffs;
    NorthernTracksAngularResolutionPolyCoeffs = Eigen::Matrix<local_scalar_t__, -1, 1>(6);
    stan::math::fill(NorthernTracksAngularResolutionPolyCoeffs, DUMMY_VAR__);
    
    current_statement__ = 314;
    assign(NorthernTracksAngularResolutionPolyCoeffs, nil_index_list(),
      transpose(stan::math::to_row_vector(stan::math::array_builder<double>()
        .add(3.11287843e+01).add(-8.72542968e+02).add(8.74576241e+03)
        .add(-3.72847494e+04).add(7.46309205e+04).add(-5.73160697e+04)
        .array())),
      "assigning variable NorthernTracksAngularResolutionPolyCoeffs");
    current_statement__ = 315;
    return vMF_lpdf<false>(reco_dir, true_dir,
             eval_poly1d(
               stan::math::log10(
                 truncate_value(true_energy, 133.9845723819148,
                   772161836.8251529, pstream__)),
               NorthernTracksAngularResolutionPolyCoeffs, pstream__), pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct NorthernTracksAngularResolution_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& true_energy,
           const Eigen::Matrix<T1__, -1, 1>& true_dir,
           const Eigen::Matrix<T2__, -1, 1>& reco_dir,
           std::ostream* pstream__)  const 
{
return NorthernTracksAngularResolution(true_energy, true_dir, reco_dir,
         pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
nt_energy_res_mix(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& means,
                  const Eigen::Matrix<T2__, -1, 1>& sigmas,
                  const Eigen::Matrix<T3__, -1, 1>& weights,
                  std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    Eigen::Matrix<local_scalar_t__, -1, 1> result;
    result = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(result, DUMMY_VAR__);
    
    current_statement__ = 320;
    for (int i = 1; i <= 3; ++i) {
      current_statement__ = 318;
      assign(result, cons_list(index_uni(i), nil_index_list()),
        (stan::math::log(weights)[(i - 1)] +
          lognormal_lpdf<false>(x, means[(i - 1)], sigmas[(i - 1)])),
        "assigning variable result");}
    current_statement__ = 321;
    return log_sum_exp(result);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct nt_energy_res_mix_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& x, const Eigen::Matrix<T1__, -1, 1>& means,
           const Eigen::Matrix<T2__, -1, 1>& sigmas,
           const Eigen::Matrix<T3__, -1, 1>& weights, std::ostream* pstream__)  const 
{
return nt_energy_res_mix(x, means, sigmas, weights, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
NorthernTracksEnergyResolution(const T0__& true_energy,
                               const T1__& reco_energy,
                               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> NorthernTracksEnergyResolutionMuPolyCoeffs;
    NorthernTracksEnergyResolutionMuPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(3, std::vector<local_scalar_t__>(6, DUMMY_VAR__));
    
    current_statement__ = 323;
    assign(NorthernTracksEnergyResolutionMuPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(1.79123316e-03)
      .add(-4.53094872e-02).add(4.36942224e-01).add(-1.97200894e+00)
      .add(4.31179843e+00).add(-8.01759468e-01).array())
      .add(stan::math::array_builder<double>().add(1.49689538e-03)
      .add(-4.20876747e-02).add(4.40492341e-01).add(-2.10673628e+00)
      .add(4.96463645e+00).add(-1.72852955e+00).array())
      .add(stan::math::array_builder<double>().add(3.21899096e-03)
      .add(-7.46514921e-02).add(6.42180173e-01).add(-2.44234586e+00)
      .add(4.37192616e+00).add(-1.46775692e-01).array()).array(),
      "assigning variable NorthernTracksEnergyResolutionMuPolyCoeffs");
    std::vector<std::vector<local_scalar_t__>> NorthernTracksEnergyResolutionSdPolyCoeffs;
    NorthernTracksEnergyResolutionSdPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(3, std::vector<local_scalar_t__>(6, DUMMY_VAR__));
    
    current_statement__ = 324;
    assign(NorthernTracksEnergyResolutionSdPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(-5.96059287e-05)
      .add(1.01057958e-03).add(-6.89582620e-03).add(2.77225861e-02)
      .add(-4.86977053e-02).add(5.38079289e-02).array())
      .add(stan::math::array_builder<double>().add(-5.62689396e-06)
      .add(-1.00372291e-03).add(2.17335300e-02).add(-1.58891590e-01)
      .add(4.85621776e-01).add(-4.64169589e-01).array())
      .add(stan::math::array_builder<double>().add(-7.19239071e-06)
      .add(-9.01178002e-04).add(2.07119386e-02).add(-1.59460481e-01)
      .add(5.12292363e-01).add(-5.24058691e-01).array()).array(),
      "assigning variable NorthernTracksEnergyResolutionSdPolyCoeffs");
    std::vector<local_scalar_t__> mu_e_res;
    mu_e_res = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
    
    std::vector<local_scalar_t__> sigma_e_res;
    sigma_e_res = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> weights;
    weights = Eigen::Matrix<local_scalar_t__, -1, 1>(3);
    stan::math::fill(weights, DUMMY_VAR__);
    
    current_statement__ = 330;
    for (int i = 1; i <= 3; ++i) {
      current_statement__ = 328;
      assign(weights, cons_list(index_uni(i), nil_index_list()), (1.0 / 3),
        "assigning variable weights");}
    current_statement__ = 334;
    for (int i = 1; i <= 3; ++i) {
      current_statement__ = 331;
      assign(mu_e_res, cons_list(index_uni(i), nil_index_list()),
        eval_poly1d(
          stan::math::log10(
            truncate_value(true_energy, 259.05920320586245,
              77339084.25215183, pstream__)),
          to_vector(NorthernTracksEnergyResolutionMuPolyCoeffs[(i - 1)]), pstream__),
        "assigning variable mu_e_res");
      current_statement__ = 332;
      assign(sigma_e_res, cons_list(index_uni(i), nil_index_list()),
        eval_poly1d(
          stan::math::log10(
            truncate_value(true_energy, 259.05920320586245,
              77339084.25215183, pstream__)),
          to_vector(NorthernTracksEnergyResolutionSdPolyCoeffs[(i - 1)]), pstream__),
        "assigning variable sigma_e_res");}
    current_statement__ = 335;
    return nt_energy_res_mix(stan::math::log10(reco_energy),
             to_vector(stan::math::log(mu_e_res)), to_vector(sigma_e_res),
             weights, pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct NorthernTracksEnergyResolution_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& true_energy, const T1__& reco_energy,
           std::ostream* pstream__)  const 
{
return NorthernTracksEnergyResolution(true_energy, reco_energy, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
NorthernTracksEffectiveArea(const T0__& true_energy,
                            const Eigen::Matrix<T1__, -1, 1>& true_dir,
                            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 337;
    return NorthernTracksEffAreaHist(true_energy,
             stan::math::cos(
               (stan::math::pi() - stan::math::acos(true_dir[(3 - 1)]))), pstream__);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct NorthernTracksEffectiveArea_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& true_energy,
           const Eigen::Matrix<T1__, -1, 1>& true_dir,
           std::ostream* pstream__)  const 
{
return NorthernTracksEffectiveArea(true_energy, true_dir, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
spectrum_logpdf(const T0__& E, const T1__& alpha, const T2__& e_low,
                const T3__& e_up, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ N;
    N = DUMMY_VAR__;
    
    local_scalar_t__ p;
    p = DUMMY_VAR__;
    
    current_statement__ = 345;
    if (logical_eq(alpha, 1.0)) {
      current_statement__ = 343;
      N = (1.0 / (stan::math::log(e_up) - stan::math::log(e_low)));
    } else {
      current_statement__ = 341;
      N = ((1.0 - alpha) /
            (pow(e_up, (1.0 - alpha)) - pow(e_low, (1.0 - alpha))));
    }
    current_statement__ = 346;
    p = (N * pow(E, (alpha * -1)));
    current_statement__ = 347;
    return stan::math::log(p);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct spectrum_logpdf_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& E, const T1__& alpha, const T2__& e_low,
           const T3__& e_up, std::ostream* pstream__)  const 
{
return spectrum_logpdf(E, alpha, e_low, e_up, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
flux_conv(const T0__& alpha, const T1__& e_low, const T2__& e_up,
          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ f1;
    f1 = DUMMY_VAR__;
    
    local_scalar_t__ f2;
    f2 = DUMMY_VAR__;
    
    current_statement__ = 355;
    if (logical_eq(alpha, 1.0)) {
      current_statement__ = 353;
      f1 = (stan::math::log(e_up) - stan::math::log(e_low));
    } else {
      current_statement__ = 351;
      f1 = ((1 / (1 - alpha)) *
             (pow(e_up, (1 - alpha)) - pow(e_low, (1 - alpha))));
    }
    current_statement__ = 360;
    if (logical_eq(alpha, 2.0)) {
      current_statement__ = 358;
      f2 = (stan::math::log(e_up) - stan::math::log(e_low));
    } else {
      current_statement__ = 356;
      f2 = ((1 / (2 - alpha)) *
             (pow(e_up, (2 - alpha)) - pow(e_low, (2 - alpha))));
    }
    current_statement__ = 361;
    return (f1 / f2);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct flux_conv_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
T2__>
operator()(const T0__& alpha, const T1__& e_low, const T2__& e_up,
           std::ostream* pstream__)  const 
{
return flux_conv(alpha, e_low, e_up, pstream__);
}
};

template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
AtmopshericNumuFlux(const T0__& true_energy,
                    const Eigen::Matrix<T1__, -1, 1>& true_dir,
                    std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<std::vector<local_scalar_t__>> AtmosphericFluxPolyCoeffs;
    AtmosphericFluxPolyCoeffs = std::vector<std::vector<local_scalar_t__>>(30, std::vector<local_scalar_t__>(100, DUMMY_VAR__));
    
    current_statement__ = 363;
    assign(AtmosphericFluxPolyCoeffs, nil_index_list(),
      stan::math::array_builder<std::vector<double>>()
      .add(stan::math::array_builder<double>().add(-1.98015639)
      .add(-2.06990581).add(-2.28102841).add(-2.5048243).add(-2.73832406)
      .add(-2.98153484).add(-3.23295258).add(-3.4836111).add(-3.73704168)
      .add(-3.9929935).add(-4.25083558).add(-4.51097506).add(-4.77320619)
      .add(-5.03694404).add(-5.3016799).add(-5.56730132).add(-5.83391547)
      .add(-6.10197286).add(-6.37184525).add(-6.64436918).add(-6.92212103)
      .add(-7.20151475).add(-7.47929293).add(-7.75687533).add(-8.03560464)
      .add(-8.31524896).add(-8.59622776).add(-8.87892723).add(-9.16356273)
      .add(-9.45014546).add(-9.73955079).add(-10.03194011).add(-10.32752948)
      .add(-10.62639137).add(-10.92863038).add(-11.23418615)
      .add(-11.54267921).add(-11.85417477).add(-12.16882135)
      .add(-12.48615571).add(-12.80598245).add(-13.12773531)
      .add(-13.45154511).add(-13.77716961).add(-14.10443447)
      .add(-14.43340331).add(-14.76372896).add(-15.09492324)
      .add(-15.42697458).add(-15.76005429).add(-16.09441157)
      .add(-16.43040613).add(-16.7669652).add(-17.10396077).add(-17.44180432)
      .add(-17.78061009).add(-18.12048441).add(-18.46119902)
      .add(-18.80257118).add(-19.14497854).add(-19.48807276)
      .add(-19.83120512).add(-20.17383955).add(-20.51615953)
      .add(-20.85808813).add(-21.19824132).add(-21.53516751)
      .add(-21.86978185).add(-22.202192).add(-22.53013232).add(-22.85303624)
      .add(-23.17163324).add(-23.48569116).add(-23.79511144)
      .add(-24.09975962).add(-24.40085482).add(-24.69940318)
      .add(-24.99492706).add(-25.28816168).add(-25.58040571)
      .add(-25.87460545).add(-26.17342592).add(-26.47426044)
      .add(-26.78133635).add(-27.09497504).add(-27.41648448)
      .add(-27.74672402).add(-28.0862232).add(-28.43231211).add(-28.78799004)
      .add(-29.15368342).add(-29.52833128).add(-29.91235745).add(-30.2978475)
      .add(-30.70124633).add(-31.10831576).add(-31.52247839)
      .add(-31.94063427).add(-32.35710298).add(-32.54291653).array())
      .add(stan::math::array_builder<double>().add(-1.97276985)
      .add(-2.06239285).add(-2.27324221).add(-2.49680217).add(-2.73008337)
      .add(-2.97293083).add(-3.22383104).add(-3.47442787).add(-3.72785996)
      .add(-3.98379502).add(-4.24160601).add(-4.50165454).add(-4.76373087)
      .add(-5.02726514).add(-5.29177041).add(-5.55714057).add(-5.82348116)
      .add(-6.0912459).add(-6.36080221).add(-6.63295968).add(-6.91009685)
      .add(-7.18889227).add(-7.46633503).add(-7.74369245).add(-8.02215182)
      .add(-8.30148161).add(-8.58206192).add(-8.86425662).add(-9.14827027)
      .add(-9.43411252).add(-9.72266747).add(-10.01411459).add(-10.30869882)
      .add(-10.60652099).add(-10.9077172).add(-11.21225853).add(-11.51979014)
      .add(-11.83039656).add(-12.14423751).add(-12.46086126)
      .add(-12.78007657).add(-13.10131472).add(-13.42470841)
      .add(-13.75000932).add(-14.07704185).add(-14.40587328)
      .add(-14.73614799).add(-15.06737688).add(-15.39955751)
      .add(-15.73284996).add(-16.06751929).add(-16.40392533)
      .add(-16.74100273).add(-17.07862431).add(-17.41720435)
      .add(-17.75686395).add(-18.09770172).add(-18.43949489)
      .add(-18.78204741).add(-19.12568532).add(-19.47007346)
      .add(-19.81457924).add(-20.15865138).add(-20.50241512)
      .add(-20.84575875).add(-21.18728946).add(-21.52551175).add(-21.8612539)
      .add(-22.19460098).add(-22.52332446).add(-22.84682062)
      .add(-23.16576504).add(-23.47998524).add(-23.78941225)
      .add(-24.09388936).add(-24.39462821).add(-24.69264295)
      .add(-24.98748594).add(-25.27991992).add(-25.57128479)
      .add(-25.86452252).add(-26.16228866).add(-26.46209742)
      .add(-26.76814963).add(-27.08081061).add(-27.40140641)
      .add(-27.73083916).add(-28.06964398).add(-28.41527326)
      .add(-28.77068112).add(-29.13633969).add(-29.51125262)
      .add(-29.89583036).add(-30.28242352).add(-30.68682321)
      .add(-31.09523974).add(-31.51092274).add(-31.93084655).add(-32.3493258)
      .add(-32.53607988).array()).add(stan::math::array_builder<double>()
      .add(-1.96499252).add(-2.05445424).add(-2.26495215).add(-2.48820249)
      .add(-2.72120067).add(-2.96363099).add(-3.21397128).add(-3.46447441)
      .add(-3.71789182).add(-3.97380897).add(-4.23159842).add(-4.49157103)
      .add(-4.75350837).add(-5.01685243).add(-5.28113546).add(-5.54625529)
      .add(-5.81231308).add(-6.07976434).add(-6.34897438).add(-6.62072838)
      .add(-6.89721365).add(-7.17537695).add(-7.45245451).add(-7.7295647)
      .add(-8.0077417).add(-8.28675188).add(-8.56693239).add(-8.84862018)
      .add(-9.13200433).add(-9.41708854).add(-9.7047621).add(-9.99522077)
      .add(-10.28873833).add(-10.5854451).add(-10.88551128).add(-11.188943)
      .add(-11.49541366).add(-11.80503061).add(-12.11796766)
      .add(-12.43378719).add(-12.75230411).add(-13.07294856)
      .add(-13.39585564).add(-13.72077109).add(-14.04751788)
      .add(-14.37616658).add(-14.70635243).add(-15.03758498)
      .add(-15.36987051).add(-15.70335729).add(-16.03832615)
      .add(-16.37513699).add(-16.71273218).add(-17.05098584)
      .add(-17.39031565).add(-17.73085075).add(-18.07268283)
      .add(-18.41559631).add(-18.75938272).add(-19.10431533).add(-19.4500738)
      .add(-19.79604417).add(-20.14166068).add(-20.48698741)
      .add(-20.83187603).add(-21.17492578).add(-21.51459496)
      .add(-21.85161664).add(-22.18604678).add(-22.51569168)
      .add(-22.83990603).add(-23.15930729).add(-23.47378092)
      .add(-23.78328605).add(-24.0876442).add(-24.38805971).add(-24.68555497)
      .add(-24.97971363).add(-25.27132723).add(-25.56177831)
      .add(-25.85400512).add(-26.15065461).add(-26.4493654).add(-26.75431219)
      .add(-27.06590602).add(-27.38549281).add(-27.71401957)
      .add(-28.05202843).add(-28.39710013).add(-28.752145).add(-29.11768555)
      .add(-29.49279487).add(-29.87787682).add(-30.2655646).add(-30.67097026)
      .add(-31.08078075).add(-31.49806626).add(-31.91988742)
      .add(-32.34055847).add(-32.52834982).array())
      .add(stan::math::array_builder<double>().add(-1.95695625)
      .add(-2.04622042).add(-2.25628573).add(-2.47914922).add(-2.71179535)
      .add(-2.95374992).add(-3.20348308).add(-3.45385129).add(-3.70722702)
      .add(-3.96311309).add(-4.22087758).add(-4.48077593).add(-4.74257656)
      .add(-5.00573013).add(-5.2697855).add(-5.5346419).add(-5.80039311)
      .add(-6.06749476).add(-6.33631205).add(-6.60760849).add(-6.8833877)
      .add(-7.16086834).add(-7.43753467).add(-7.71436103).add(-7.99223202)
      .add(-8.27090956).add(-8.55068429).add(-8.83186107).add(-9.11460792)
      .add(-9.39891702).add(-9.68567817).add(-9.97510051).add(-10.26748595)
      .add(-10.56299487).add(-10.86183409).add(-11.16404874)
      .add(-11.46934455).add(-11.77785576).add(-12.08977383)
      .add(-12.40467842).add(-12.72239336).add(-13.04234933)
      .add(-13.36468482).add(-13.68913978).add(-14.01553582)
      .add(-14.34394635).add(-14.67399671).add(-15.00519461)
      .add(-15.33755449).add(-15.67121209).add(-16.00646381)
      .add(-16.34366939).add(-16.68177922).add(-17.02066908)
      .add(-17.36076075).add(-17.70219252).add(-18.04505015)
      .add(-18.38912711).add(-18.73420364).add(-19.08049924)
      .add(-19.42771044).add(-19.77524489).add(-20.12252361).add(-20.4695466)
      .add(-20.81612731).add(-21.16085834).add(-21.50214954)
      .add(-21.84062927).add(-22.1763165).add(-22.50704931).add(-22.83213538)
      .add(-23.15212854).add(-23.46696969).add(-23.7766441).add(-24.08095194)
      .add(-24.38109032).add(-24.67809016).add(-24.97156778)
      .add(-25.26234491).add(-25.55184833).add(-25.8430133).add(-26.13847916)
      .add(-26.43601286).add(-26.73976343).add(-27.05018961)
      .add(-27.36865913).add(-27.6961662).add(-28.0332615).add(-28.37766064)
      .add(-28.7322318).add(-29.09755296).add(-29.47277201).add(-29.8582941)
      .add(-30.24705437).add(-30.65346006).add(-31.06470606)
      .add(-31.48367741).add(-31.90753597).add(-32.33060277)
      .add(-32.51954267).array()).add(stan::math::array_builder<double>()
      .add(-1.94845527).add(-2.03747273).add(-2.2469925).add(-2.46935822)
      .add(-2.70155028).add(-2.94293964).add(-3.19199106).add(-3.44216229)
      .add(-3.69545584).add(-3.95129312).add(-4.20903364).add(-4.46887148)
      .add(-4.73055586).add(-4.99354121).add(-5.25738837).add(-5.52199328)
      .add(-5.78743726).add(-6.05417249).add(-6.32256513).add(-6.5933593)
      .add(-6.86838314).add(-7.14513199).add(-7.42134007).add(-7.69784405)
      .add(-7.97538398).add(-8.25371605).add(-8.53308111).add(-8.81374666)
      .add(-9.0958535).add(-9.37937571).add(-9.66519758).add(-9.95353759)
      .add(-10.24472413).add(-10.53894763).add(-10.83645386)
      .add(-11.13733115).add(-11.4413223).add(-11.74859321).add(-12.05935731)
      .add(-12.37321566).add(-12.69000456).add(-13.00915769)
      .add(-13.33081829).add(-13.65472111).add(-13.98068656)
      .add(-14.30879049).add(-14.63864754).add(-14.96976297)
      .add(-15.30215865).add(-15.63595694).add(-15.97146942)
      .add(-16.30905529).add(-16.64767314).add(-16.98720073)
      .add(-17.32806453).add(-17.67041326).add(-18.01432772)
      .add(-18.35961256).add(-18.70603813).add(-19.05376938)
      .add(-19.40252217).add(-19.75172938).add(-20.10080069)
      .add(-20.44966942).add(-20.79810941).add(-21.14470864)
      .add(-21.48782649).add(-21.82797577).add(-22.16512911)
      .add(-22.49715228).add(-22.82329903).add(-23.14405255)
      .add(-23.45940562).add(-23.76936675).add(-24.07371521)
      .add(-24.37364079).add(-24.67018318).add(-24.96299288)
      .add(-25.25292346).add(-25.54144761).add(-25.83149852)
      .add(-26.12570915).add(-26.42197908).add(-26.72443234)
      .add(-27.03357756).add(-27.35080647).add(-27.67716289)
      .add(-28.01320777).add(-28.35679867).add(-28.71076353)
      .add(-29.07574132).add(-29.45096069).add(-29.83683719)
      .add(-30.22662931).add(-30.6340134).add(-31.04672739).add(-31.46746656)
      .add(-31.89351282).add(-32.31920489).add(-32.50942185).array())
      .add(stan::math::array_builder<double>().add(-1.93954285)
      .add(-2.02825771).add(-2.23710214).add(-2.45884012).add(-2.69045546)
      .add(-2.93116949).add(-3.17944463).add(-3.42933476).add(-3.68248473)
      .add(-3.9382373).add(-4.19594007).add(-4.45572018).add(-4.71730156)
      .add(-4.98013701).add(-5.24379377).add(-5.50815858).add(-5.77329386)
      .add(-6.03964317).add(-6.30757368).add(-6.57781177).add(-6.85201912)
      .add(-7.12797283).add(-7.40365955).add(-7.67978685).add(-7.95695746)
      .add(-8.23492148).add(-8.51386744).add(-8.79402004).add(-9.07548588)
      .add(-9.35821295).add(-9.64307222).add(-9.93028573).add(-10.22020517)
      .add(-10.51304987).add(-10.8091064).add(-11.10851061).add(-11.41104757)
      .add(-11.71692043).add(-12.0263699).add(-12.33902368).add(-12.65473523)
      .add(-12.97294465).add(-13.29380204).add(-13.61703795)
      .add(-13.94247217).add(-14.27018262).add(-14.5997724).add(-14.93074367)
      .add(-15.2631248).add(-15.59702371).add(-15.93276649).add(-16.27071122)
      .add(-16.60982477).add(-16.94998704).add(-17.29162975)
      .add(-17.63491326).add(-17.97991453).add(-18.32645172).add(-18.674287)
      .add(-19.02353024).add(-19.37391959).add(-19.72491762).add(-20.0759254)
      .add(-20.42680731).add(-20.77729677).add(-21.12598017)
      .add(-21.47116492).add(-21.81323603).add(-22.15210856)
      .add(-22.48567064).add(-22.81311328).add(-23.1348399).add(-23.4508899)
      .add(-23.76129105).add(-24.0658018).add(-24.36560437).add(-24.66174729)
      .add(-24.95391693).add(-25.24300054).add(-25.53051866)
      .add(-25.81940347).add(-26.11228303).add(-26.40719453)
      .add(-26.70823772).add(-27.01597371).add(-27.33182067)
      .add(-27.65687458).add(-27.99170862).add(-28.33432998)
      .add(-28.68752858).add(-29.05201029).add(-29.42709126)
      .add(-29.81320783).add(-30.20396564).add(-30.61228409)
      .add(-31.02648369).add(-31.44906698).add(-31.87745988)
      .add(-32.30603498).add(-32.49767781).array())
      .add(stan::math::array_builder<double>().add(-1.93017477)
      .add(-2.01851835).add(-2.22652506).add(-2.44746813).add(-2.6783441)
      .add(-2.91823196).add(-3.16559633).add(-3.41508183).add(-3.66799172)
      .add(-3.9235959).add(-4.18122804).add(-4.44094325).add(-4.70243379)
      .add(-4.96514444).add(-5.22864147).add(-5.49279416).add(-5.75763669)
      .add(-6.02359593).add(-6.29103784).add(-6.56067113).add(-6.83400023)
      .add(-7.10908955).add(-7.38418155).add(-7.65986572).add(-7.93661742)
      .add(-8.21418224).add(-8.49269515).add(-8.77233306).add(-9.05316091)
      .add(-9.33509129).add(-9.61897182).add(-9.90502011).add(-10.19360598)
      .add(-10.48497477).add(-10.77945474).add(-11.0772335).add(-11.378144)
      .add(-11.6824331).add(-11.99037534).add(-12.30163164).add(-12.61607902)
      .add(-12.93316875).add(-13.25306095).add(-13.57548379)
      .add(-13.90025754).add(-14.22746205).add(-14.5566881).add(-14.88743404)
      .add(-15.2197336).add(-15.55367891).add(-15.88960963).add(-16.22788181)
      .add(-16.56747045).add(-16.90825761).add(-17.25068065)
      .add(-17.59491278).add(-17.94102822).add(-18.28886121)
      .add(-18.63816773).add(-18.98900245).add(-19.34112931)
      .add(-19.69404598).add(-20.04714878).add(-20.40023157)
      .add(-20.75298734).add(-21.10400551).add(-21.45154086)
      .add(-21.79583703).add(-22.13673812).add(-22.4721477).add(-22.80118276)
      .add(-23.12415485).add(-23.44114236).add(-23.75218648)
      .add(-24.05702445).add(-24.35683013).add(-24.65266071)
      .add(-24.94424039).add(-25.23249205).add(-25.51898638)
      .add(-25.80665586).add(-26.09812548).add(-26.39157577)
      .add(-26.69108326).add(-26.99726445).add(-27.31156672)
      .add(-27.63514102).add(-27.9685749).add(-28.31003354).add(-28.66227139)
      .add(-29.02606766).add(-29.40083339).add(-29.78703775)
      .add(-30.17865991).add(-30.58783675).add(-31.00351602)
      .add(-31.42800712).add(-31.85891061).add(-32.2906568).add(-32.48389809)
      .array()).add(stan::math::array_builder<double>().add(-1.92050298)
      .add(-2.00840107).add(-2.21539255).add(-2.43535482).add(-2.66530706)
      .add(-2.904195).add(-3.15049019).add(-3.39941719).add(-3.65195823)
      .add(-3.90731834).add(-4.16481655).add(-4.42443259).add(-4.68582174)
      .add(-4.94841469).add(-5.21176896).add(-5.47572714).add(-5.74028425)
      .add(-6.00583983).add(-6.2727542).add(-6.54171669).add(-6.81408389)
      .add(-7.08821248).add(-7.36260453).add(-7.63774579).add(-7.91399812)
      .add(-8.19110658).add(-8.46915348).add(-8.74826396).add(-9.02845353)
      .add(-9.30958847).add(-9.59248031).add(-9.87733104).add(-10.16452033)
      .add(-10.45431377).add(-10.74708034).add(-11.04306289)
      .add(-11.34214791).add(-11.64463316).add(-11.95083493)
      .add(-12.26045578).add(-12.57340477).add(-12.88915108)
      .add(-13.20786962).add(-13.52928921).add(-13.85323268)
      .add(-14.17978213).add(-14.50851538).add(-14.83892637)
      .add(-15.17105275).add(-15.50496923).add(-15.84102764)
      .add(-16.17958069).add(-16.51961106).add(-16.86100271)
      .add(-17.20419876).add(-17.54938632).add(-17.89663799)
      .add(-18.24580679).add(-18.59664488).add(-18.94915192)
      .add(-19.30312192).add(-19.65809414).add(-20.01346541)
      .add(-20.36895861).add(-20.72422759).add(-21.07787157)
      .add(-21.42809385).add(-21.77498183).add(-22.11829299)
      .add(-22.45593754).add(-22.78694386).add(-23.11151544)
      .add(-23.42975852).add(-23.74171888).add(-24.04711125)
      .add(-24.34709934).add(-24.64274835).add(-24.93382227).add(-25.221282)
      .add(-25.50675094).add(-25.79316351).add(-26.08314405)
      .add(-26.37502322).add(-26.67285564).add(-26.97731679)
      .add(-27.28988642).add(-27.6117734).add(-27.94358211).add(-28.28364492)
      .add(-28.63468369).add(-28.99755777).add(-29.37178135).add(-29.7578702)
      .add(-30.15020624).add(-30.56011949).add(-30.97723562).add(-31.4036741)
      .add(-31.83724944).add(-32.27248478).add(-32.46752421).array())
      .add(stan::math::array_builder<double>().add(-1.91053194)
      .add(-1.99789466).add(-2.20365062).add(-2.42239385).add(-2.65117815)
      .add(-2.8888279).add(-3.13382839).add(-3.38197292).add(-3.63394954)
      .add(-3.88891146).add(-4.14616548).add(-4.40561481).add(-4.66687373)
      .add(-4.92935251).add(-5.19259063).add(-5.45639192).add(-5.7206971)
      .add(-5.98586245).add(-6.25223335).add(-6.52047381).add(-6.79180029)
      .add(-7.06486579).add(-7.33843601).add(-7.6129109).add(-7.88855735)
      .add(-8.16512799).add(-8.4426571).add(-8.72121669).add(-9.00076624)
      .add(-9.28111393).add(-9.56301951).add(-9.8466545).add(-10.13239588)
      .add(-10.42051957).add(-10.71143115).add(-11.00543049).add(-11.3024627)
      .add(-11.60288407).add(-11.90706205).add(-12.21475146)
      .add(-12.52590489).add(-12.84001902).add(-13.15729068)
      .add(-13.47745447).add(-13.80033951).add(-14.12603135)
      .add(-14.45409474).add(-14.78401889).add(-15.11584367).add(-15.4496244)
      .add(-15.7857231).add(-16.12448725).add(-16.46490631).add(-16.80686545)
      .add(-17.15081326).add(-17.49695149).add(-17.84535207)
      .add(-18.19588957).add(-18.54831496).add(-18.90257362)
      .add(-19.25849455).add(-19.61566645).add(-19.9734937).add(-20.33162931)
      .add(-20.68969131).add(-21.04629875).add(-21.39960739)
      .add(-21.74953302).add(-22.09572857).add(-22.43610004)
      .add(-22.76956849).add(-23.09620737).add(-23.41613428)
      .add(-23.72938621).add(-24.03565203).add(-24.33608177)
      .add(-24.63174683).add(-24.922453).add(-25.20920177).add(-25.49367232)
      .add(-25.77880311).add(-26.06722101).add(-26.35741513)
      .add(-26.65342006).add(-26.95597455).add(-27.26659444)
      .add(-27.58654972).add(-27.91646448).add(-28.25484821)
      .add(-28.60439354).add(-28.96604702).add(-29.33943517)
      .add(-29.72513594).add(-30.11796622).add(-30.52842717)
      .add(-30.94687981).add(-31.37526202).add(-31.81165309)
      .add(-32.25072017).add(-32.44778674).array())
      .add(stan::math::array_builder<double>().add(-1.90037906)
      .add(-1.98710252).add(-2.19136019).add(-2.40858812).add(-2.63588773)
      .add(-2.87197707).add(-3.11536417).add(-3.36239856).add(-3.61350968)
      .add(-3.86781924).add(-4.12462973).add(-4.38377206).add(-4.64481903)
      .add(-4.90715635).add(-5.17029619).add(-5.43398921).add(-5.69810218)
      .add(-5.96292506).add(-6.22877142).add(-6.49626669).add(-6.76649052)
      .add(-7.03839278).add(-7.31100545).add(-7.58466408).add(-7.85956488)
      .add(-8.13548154).add(-8.4124109).add(-8.69037548).add(-8.96927522)
      .add(-9.2488491).add(-9.52978676).add(-9.8122099).add(-10.09647457)
      .add(-10.38285073).add(-10.67177108).add(-10.96359073)
      .add(-11.25831626).add(-11.55636968).add(-11.85818031)
      .add(-12.16356826).add(-12.47254513).add(-12.78464878)
      .add(-13.10010879).add(-13.41867401).add(-13.74018651)
      .add(-14.06473824).add(-14.39188192).add(-14.72110244)
      .add(-15.05244015).add(-15.38592872).add(-15.72193755)
      .add(-16.06080621).add(-16.40152945).add(-16.74399226)
      .add(-17.08864764).add(-17.43571219).add(-17.78525776)
      .add(-18.13718305).add(-18.49124067).add(-18.84732291)
      .add(-19.20529941).add(-19.56481748).add(-19.92529827)
      .add(-20.28632842).add(-20.64749628).add(-21.00745542)
      .add(-21.36432289).add(-21.71782831).add(-22.0675007).add(-22.41122923)
      .add(-22.74780397).add(-23.07713848).add(-23.3993372).add(-23.71440736)
      .add(-24.02200494).add(-24.3232592).add(-24.61924365).add(-24.90980731)
      .add(-25.19599499).add(-25.47954519).add(-25.76340323)
      .add(-26.05020276).add(-26.33860201).add(-26.63261819)
      .add(-26.93305886).add(-27.24148032).add(-27.55921704)
      .add(-27.88691629).add(-28.22327548).add(-28.57096167)
      .add(-28.93101589).add(-29.30318688).add(-29.68813227)
      .add(-30.08113893).add(-30.49186122).add(-30.91146014)
      .add(-31.34170751).add(-31.78101283).add(-32.22426171)
      .add(-32.42361197).array()).add(stan::math::array_builder<double>()
      .add(-1.89035838).add(-1.97633559).add(-2.17881109).add(-2.39418459)
      .add(-2.61961702).add(-2.85373734).add(-3.09508721).add(-3.34055584)
      .add(-3.59036046).add(-3.84362035).add(-4.09964941).add(-4.35821842)
      .add(-4.61886513).add(-4.88095197).add(-5.14395833).add(-5.40756801)
      .add(-5.67155154).add(-5.93610235).add(-6.2014755).add(-6.46823395)
      .add(-6.73731569).add(-7.00795965).add(-7.2794618).add(-7.55211722)
      .add(-7.82608179).add(-8.10117054).add(-8.37736217).add(-8.65464187)
      .add(-8.93285356).add(-9.21165975).add(-9.49166044).add(-9.77290396)
      .add(-10.05569974).add(-10.34028601).add(-10.62710416)
      .add(-10.91655548).add(-11.20870558).add(-11.50404641)
      .add(-11.80307978).add(-12.10570627).add(-12.41201691)
      .add(-12.72160998).add(-13.03476426).add(-13.35125687)
      .add(-13.67095446).add(-13.99396183).add(-14.31982319).add(-14.6480214)
      .add(-14.97859597).add(-15.31155648).add(-15.64727607)
      .add(-15.98608262).add(-16.32697379).add(-16.66983194)
      .add(-17.01511228).add(-17.36304537).add(-17.71370279)
      .add(-18.06700929).add(-18.42272187).add(-18.7806814).add(-19.14080419)
      .add(-19.50280647).add(-19.86613781).add(-20.23032497)
      .add(-20.59493708).add(-20.95868337).add(-21.31965867)
      .add(-21.67739583).add(-22.03128144).add(-22.37917506)
      .add(-22.71970719).add(-23.05259162).add(-23.37788308)
      .add(-23.69552595).add(-24.00512902).add(-24.30778687).add(-24.604566)
      .add(-24.89535824).add(-25.18125384).add(-25.46405455)
      .add(-25.74671618).add(-26.03188524).add(-26.31840331)
      .add(-26.61027422).add(-26.90838169).add(-27.2143277).add(-27.52951494)
      .add(-27.8546179).add(-28.18853336).add(-28.53390689).add(-28.89188091)
      .add(-29.26233681).add(-29.64603097).add(-30.03875681)
      .add(-30.44931135).add(-30.86972618).add(-31.30163242)
      .add(-31.74385294).add(-32.19159871).add(-32.39350428).array())
      .add(stan::math::array_builder<double>().add(-1.88094832)
      .add(-1.96608587).add(-2.16650572).add(-2.3796615).add(-2.60277891)
      .add(-2.8344146).add(-3.0731548).add(-3.31640704).add(-3.5642371)
      .add(-3.81580482).add(-4.07046469).add(-4.32795388).add(-4.58779501)
      .add(-4.8493416).add(-5.11204522).add(-5.37551554).add(-5.63940622)
      .add(-5.90377737).add(-6.16878585).add(-6.43489136).add(-6.70286923)
      .add(-6.97222146).add(-7.24249237).add(-7.51395736).add(-7.7867655)
      .add(-8.06079972).add(-8.33605103).add(-8.61249312).add(-8.88993117)
      .add(-9.16795501).add(-9.44705979).add(-9.727196).add(-10.00859371)
      .add(-10.29142143).add(-10.57609699).add(-10.86304571)
      .add(-11.15237824).add(-11.4446524).add(-11.74044939).add(-12.03976498)
      .add(-12.34279517).add(-12.64922487).add(-12.95940645)
      .add(-13.27316816).add(-13.59042164).add(-13.91129746)
      .add(-14.23534031).add(-14.56203748).add(-14.8914281).add(-15.22349615)
      .add(-15.55861394).add(-15.89709268).add(-16.23792939)
      .add(-16.58099983).add(-16.92675725).add(-17.27544337)
      .add(-17.62712777).add(-17.98176166).add(-18.3391083).add(-18.69895922)
      .add(-19.06128285).add(-19.42587485).add(-19.79222666)
      .add(-20.15981557).add(-20.5282073).add(-20.89619625).add(-21.26188314)
      .add(-21.62460317).add(-21.98358848).add(-22.33666053)
      .add(-22.68226009).add(-23.0198508).add(-23.34938497).add(-23.67069194)
      .add(-23.98330582).add(-24.28825904).add(-24.58659134)
      .add(-24.87823134).add(-25.16431407).add(-25.44670768)
      .add(-25.72838288).add(-26.01200776).add(-26.29662711)
      .add(-26.58623777).add(-26.8818099).add(-27.1849976).add(-27.49727558)
      .add(-27.81935069).add(-28.15033009).add(-28.49284223)
      .add(-28.84813663).add(-29.21623732).add(-29.59801894)
      .add(-29.98981613).add(-30.39957134).add(-30.82025809).add(-31.2534045)
      .add(-31.69834844).add(-32.15077468).add(-32.35548229).array())
      .add(stan::math::array_builder<double>().add(-1.87293958)
      .add(-1.95720919).add(-2.15543109).add(-2.36610006).add(-2.58649239)
      .add(-2.81509736).add(-3.0505465).add(-3.29072772).add(-3.53562864)
      .add(-3.78450752).add(-4.03680748).add(-4.29228217).add(-4.55048448)
      .add(-4.81079963).add(-5.07268148).add(-5.335681).add(-5.59933287)
      .add(-5.8635337).add(-6.12829538).add(-6.39391597).add(-6.6609631)
      .add(-6.92914008).add(-7.19819222).add(-7.46837828).add(-7.73986432)
      .add(-8.0126251).add(-8.28670217).add(-8.56209959).add(-8.83862295)
      .add(-9.11581623).add(-9.39407079).add(-9.67322555).add(-9.95339846)
      .add(-10.23464017).add(-10.51729532).add(-10.80177025).add(-11.0881851)
      .add(-11.37714041).add(-11.66929021).add(-11.96473187)
      .add(-12.26379268).add(-12.56627589).add(-12.87264055)
      .add(-13.18280147).add(-13.49674924).add(-13.81466497)
      .add(-14.13611353).add(-14.46060215).add(-14.78817522)
      .add(-15.11879315).add(-15.4528231).add(-15.79055392).add(-16.13097759)
      .add(-16.47395724).add(-16.81993703).add(-17.16916386)
      .add(-17.52170076).add(-17.87752241).add(-18.2363982).add(-18.59807222)
      .add(-18.96256765).add(-19.32976711).add(-19.69921666)
      .add(-20.07035778).add(-20.44277437).add(-20.81538355)
      .add(-21.18633438).add(-21.55478312).add(-21.91981325).add(-22.279214)
      .add(-22.6312164).add(-22.97498217).add(-23.31029276).add(-23.63678591)
      .add(-23.95387232).add(-24.26247048).add(-24.56355188)
      .add(-24.85706128).add(-25.1441683).add(-25.42680565).add(-25.70796239)
      .add(-25.99034009).add(-26.27321414).add(-26.56058507)
      .add(-26.85352413).add(-27.15374543).add(-27.46279937)
      .add(-27.78143125).add(-28.10896595).add(-28.44801933)
      .add(-28.79995014).add(-29.16493193).add(-29.54397433)
      .add(-29.93397511).add(-30.34205234).add(-30.76217437).add(-31.1958175)
      .add(-31.64294374).add(-32.09989842).add(-32.30752399).array())
      .add(stan::math::array_builder<double>().add(-1.86732812)
      .add(-1.950861).add(-2.14713027).add(-2.35544627).add(-2.57308518)
      .add(-2.79843968).add(-3.03014696).add(-3.26647799).add(-3.50740015)
      .add(-3.75232014).add(-4.00082744).add(-4.25276945).add(-4.50781004)
      .add(-4.76544786).add(-5.02521641).add(-5.28667855).add(-5.54930776)
      .add(-5.81286013).add(-6.07719102).add(-6.34239433).add(-6.60877868)
      .add(-6.87613755).add(-7.14431255).add(-7.41350134).add(-7.68386519)
      .add(-7.95545587).add(-8.22838145).add(-8.50271442).add(-8.77831405)
      .add(-9.05473431).add(-9.33229538).add(-9.6107452).add(-9.89008147)
      .add(-10.17020077).add(-10.45132069).add(-10.73376722)
      .add(-11.01760787).add(-11.30343143).add(-11.59192877)
      .add(-11.88327845).add(-12.17794915).add(-12.47588558)
      .add(-12.77768567).add(-13.08339422).add(-13.39312749)
      .add(-13.70715614).add(-14.02510126).add(-14.3465203).add(-14.67147958)
      .add(-14.99992752).add(-15.33222588).add(-15.66863823)
      .add(-16.00814827).add(-16.35059965).add(-16.69641772)
      .add(-17.04584425).add(-17.3989276).add(-17.75565693).add(-18.11580342)
      .add(-18.47906595).add(-18.84551681).add(-19.21512198).add(-19.5874861)
      .add(-19.96202809).add(-20.33837228).add(-20.71559274)
      .add(-21.09193569).add(-21.46642734).add(-21.83804185)
      .add(-22.20456934).add(-22.56404971).add(-22.91532612)
      .add(-23.25795133).add(-23.59128928).add(-23.91456239)
      .add(-24.22849677).add(-24.5339227).add(-24.83075131).add(-25.12015303)
      .add(-25.404106).add(-25.68561286).add(-25.96741991).add(-26.24906072)
      .add(-26.53455566).add(-26.8250943).add(-27.12245847).add(-27.42827537)
      .add(-27.74333462).add(-28.06717083).add(-28.4023917).add(-28.7504578)
      .add(-29.11168737).add(-29.48722932).add(-29.87452149)
      .add(-30.27995116).add(-30.69845534).add(-31.13151581)
      .add(-31.57978309).add(-32.04042436).add(-32.25071264).array())
      .add(stan::math::array_builder<double>().add(-1.86467483)
      .add(-1.94781389).add(-2.14298489).add(-2.34987897).add(-2.56571843)
      .add(-2.78876437).add(-3.01757804).add(-3.2505962).add(-3.48774239)
      .add(-3.7285176).add(-3.9726315).add(-4.220047).add(-4.47057964)
      .add(-4.72390117).add(-4.97970704).add(-5.23768429).add(-5.49738568)
      .add(-5.7585766).add(-6.02108907).add(-6.28492635).add(-6.55023066)
      .add(-6.81682303).add(-7.08454627).add(-7.3534811).add(-7.62370253)
      .add(-7.89522983).add(-8.16815011).add(-8.44254585).add(-8.71830552)
      .add(-8.99500246).add(-9.27290579).add(-9.55171635).add(-9.83134718)
      .add(-10.11156705).add(-10.39246763).add(-10.67427098)
      .add(-10.95695651).add(-11.2410526).add(-11.52723733).add(-11.81572138)
      .add(-12.10707742).add(-12.40136846).add(-12.69932012)
      .add(-13.00111352).add(-13.30700505).add(-13.61737491)
      .add(-13.93192822).add(-14.25029745).add(-14.5725902).add(-14.89876436)
      .add(-15.22918417).add(-15.56409637).add(-15.90247956)
      .add(-16.24415845).add(-16.58953635).add(-16.93884178)
      .add(-17.29210356).add(-17.64931222).add(-18.01023405)
      .add(-18.37453243).add(-18.74230817).add(-19.1135818).add(-19.48799706)
      .add(-19.86495794).add(-20.24413197).add(-20.62473303)
      .add(-21.00511155).add(-21.38423545).add(-21.76103716)
      .add(-22.13334699).add(-22.49909791).add(-22.85690923)
      .add(-23.20614233).add(-23.54590718).add(-23.87523608)
      .add(-24.19463998).add(-24.50476779).add(-24.80544513)
      .add(-25.09779579).add(-25.38380065).add(-25.66645664)
      .add(-25.94854727).add(-26.22982888).add(-26.51435133)
      .add(-26.80341245).add(-27.09885387).add(-27.4023642).add(-27.71477253)
      .add(-28.03576492).add(-28.36794495).add(-28.71284313)
      .add(-29.07088159).add(-29.44331342).add(-29.82796009)
      .add(-30.23072506).add(-30.64724095).add(-31.07902667)
      .add(-31.52727559).add(-31.98986156).add(-32.20183053).array())
      .add(stan::math::array_builder<double>().add(-1.86467483)
      .add(-1.94781389).add(-2.14298489).add(-2.34987897).add(-2.56571843)
      .add(-2.78876437).add(-3.01757804).add(-3.2505962).add(-3.48774239)
      .add(-3.7285176).add(-3.9726315).add(-4.220047).add(-4.47057964)
      .add(-4.72390117).add(-4.97970704).add(-5.23768429).add(-5.49738568)
      .add(-5.7585766).add(-6.02108907).add(-6.28492635).add(-6.55023066)
      .add(-6.81682303).add(-7.08454627).add(-7.3534811).add(-7.62370253)
      .add(-7.89522983).add(-8.16815011).add(-8.44254585).add(-8.71830552)
      .add(-8.99500246).add(-9.27290579).add(-9.55171635).add(-9.83134718)
      .add(-10.11156705).add(-10.39246763).add(-10.67427098)
      .add(-10.95695651).add(-11.2410526).add(-11.52723733).add(-11.81572138)
      .add(-12.10707742).add(-12.40136846).add(-12.69932012)
      .add(-13.00111352).add(-13.30700505).add(-13.61737491)
      .add(-13.93192822).add(-14.25029745).add(-14.5725902).add(-14.89876436)
      .add(-15.22918417).add(-15.56409637).add(-15.90247956)
      .add(-16.24415845).add(-16.58953635).add(-16.93884178)
      .add(-17.29210356).add(-17.64931222).add(-18.01023405)
      .add(-18.37453243).add(-18.74230817).add(-19.1135818).add(-19.48799706)
      .add(-19.86495794).add(-20.24413197).add(-20.62473303)
      .add(-21.00511155).add(-21.38423545).add(-21.76103716)
      .add(-22.13334699).add(-22.49909791).add(-22.85690923)
      .add(-23.20614233).add(-23.54590718).add(-23.87523608)
      .add(-24.19463998).add(-24.50476779).add(-24.80544513)
      .add(-25.09779579).add(-25.38380065).add(-25.66645664)
      .add(-25.94854727).add(-26.22982888).add(-26.51435133)
      .add(-26.80341245).add(-27.09885387).add(-27.4023642).add(-27.71477253)
      .add(-28.03576492).add(-28.36794495).add(-28.71284313)
      .add(-29.07088159).add(-29.44331342).add(-29.82796009)
      .add(-30.23072506).add(-30.64724095).add(-31.07902667)
      .add(-31.52727559).add(-31.98986156).add(-32.20183053).array())
      .add(stan::math::array_builder<double>().add(-1.86732812)
      .add(-1.950861).add(-2.14713027).add(-2.35544627).add(-2.57308518)
      .add(-2.79843968).add(-3.03014696).add(-3.26647799).add(-3.50740015)
      .add(-3.75232014).add(-4.00082744).add(-4.25276945).add(-4.50781004)
      .add(-4.76544786).add(-5.02521641).add(-5.28667855).add(-5.54930776)
      .add(-5.81286013).add(-6.07719102).add(-6.34239433).add(-6.60877868)
      .add(-6.87613755).add(-7.14431255).add(-7.41350134).add(-7.68386519)
      .add(-7.95545587).add(-8.22838145).add(-8.50271442).add(-8.77831405)
      .add(-9.05473431).add(-9.33229538).add(-9.6107452).add(-9.89008147)
      .add(-10.17020077).add(-10.45132069).add(-10.73376722)
      .add(-11.01760787).add(-11.30343143).add(-11.59192877)
      .add(-11.88327845).add(-12.17794915).add(-12.47588558)
      .add(-12.77768567).add(-13.08339422).add(-13.39312749)
      .add(-13.70715614).add(-14.02510126).add(-14.3465203).add(-14.67147958)
      .add(-14.99992752).add(-15.33222588).add(-15.66863823)
      .add(-16.00814827).add(-16.35059965).add(-16.69641772)
      .add(-17.04584425).add(-17.3989276).add(-17.75565693).add(-18.11580342)
      .add(-18.47906595).add(-18.84551681).add(-19.21512198).add(-19.5874861)
      .add(-19.96202809).add(-20.33837228).add(-20.71559274)
      .add(-21.09193569).add(-21.46642734).add(-21.83804185)
      .add(-22.20456934).add(-22.56404971).add(-22.91532612)
      .add(-23.25795133).add(-23.59128928).add(-23.91456239)
      .add(-24.22849677).add(-24.5339227).add(-24.83075131).add(-25.12015303)
      .add(-25.404106).add(-25.68561286).add(-25.96741991).add(-26.24906072)
      .add(-26.53455566).add(-26.8250943).add(-27.12245847).add(-27.42827537)
      .add(-27.74333462).add(-28.06717083).add(-28.4023917).add(-28.7504578)
      .add(-29.11168737).add(-29.48722932).add(-29.87452149)
      .add(-30.27995116).add(-30.69845534).add(-31.13151581)
      .add(-31.57978309).add(-32.04042436).add(-32.25071264).array())
      .add(stan::math::array_builder<double>().add(-1.87293958)
      .add(-1.95720919).add(-2.15543109).add(-2.36610006).add(-2.58649239)
      .add(-2.81509736).add(-3.0505465).add(-3.29072772).add(-3.53562864)
      .add(-3.78450752).add(-4.03680748).add(-4.29228217).add(-4.55048448)
      .add(-4.81079963).add(-5.07268148).add(-5.335681).add(-5.59933287)
      .add(-5.8635337).add(-6.12829538).add(-6.39391597).add(-6.6609631)
      .add(-6.92914008).add(-7.19819222).add(-7.46837828).add(-7.73986432)
      .add(-8.0126251).add(-8.28670217).add(-8.56209959).add(-8.83862295)
      .add(-9.11581623).add(-9.39407079).add(-9.67322555).add(-9.95339846)
      .add(-10.23464017).add(-10.51729532).add(-10.80177025).add(-11.0881851)
      .add(-11.37714041).add(-11.66929021).add(-11.96473187)
      .add(-12.26379268).add(-12.56627589).add(-12.87264055)
      .add(-13.18280147).add(-13.49674924).add(-13.81466497)
      .add(-14.13611353).add(-14.46060215).add(-14.78817522)
      .add(-15.11879315).add(-15.4528231).add(-15.79055392).add(-16.13097759)
      .add(-16.47395724).add(-16.81993703).add(-17.16916386)
      .add(-17.52170076).add(-17.87752241).add(-18.2363982).add(-18.59807222)
      .add(-18.96256765).add(-19.32976711).add(-19.69921666)
      .add(-20.07035778).add(-20.44277437).add(-20.81538355)
      .add(-21.18633438).add(-21.55478312).add(-21.91981325).add(-22.279214)
      .add(-22.6312164).add(-22.97498217).add(-23.31029276).add(-23.63678591)
      .add(-23.95387232).add(-24.26247048).add(-24.56355188)
      .add(-24.85706128).add(-25.1441683).add(-25.42680565).add(-25.70796239)
      .add(-25.99034009).add(-26.27321414).add(-26.56058507)
      .add(-26.85352413).add(-27.15374543).add(-27.46279937)
      .add(-27.78143125).add(-28.10896595).add(-28.44801933)
      .add(-28.79995014).add(-29.16493193).add(-29.54397433)
      .add(-29.93397511).add(-30.34205234).add(-30.76217437).add(-31.1958175)
      .add(-31.64294374).add(-32.09989842).add(-32.30752399).array())
      .add(stan::math::array_builder<double>().add(-1.88094832)
      .add(-1.96608587).add(-2.16650572).add(-2.3796615).add(-2.60277891)
      .add(-2.8344146).add(-3.0731548).add(-3.31640704).add(-3.5642371)
      .add(-3.81580482).add(-4.07046469).add(-4.32795388).add(-4.58779501)
      .add(-4.8493416).add(-5.11204522).add(-5.37551554).add(-5.63940622)
      .add(-5.90377737).add(-6.16878585).add(-6.43489136).add(-6.70286923)
      .add(-6.97222146).add(-7.24249237).add(-7.51395736).add(-7.7867655)
      .add(-8.06079972).add(-8.33605103).add(-8.61249312).add(-8.88993117)
      .add(-9.16795501).add(-9.44705979).add(-9.727196).add(-10.00859371)
      .add(-10.29142143).add(-10.57609699).add(-10.86304571)
      .add(-11.15237824).add(-11.4446524).add(-11.74044939).add(-12.03976498)
      .add(-12.34279517).add(-12.64922487).add(-12.95940645)
      .add(-13.27316816).add(-13.59042164).add(-13.91129746)
      .add(-14.23534031).add(-14.56203748).add(-14.8914281).add(-15.22349615)
      .add(-15.55861394).add(-15.89709268).add(-16.23792939)
      .add(-16.58099983).add(-16.92675725).add(-17.27544337)
      .add(-17.62712777).add(-17.98176166).add(-18.3391083).add(-18.69895922)
      .add(-19.06128285).add(-19.42587485).add(-19.79222666)
      .add(-20.15981557).add(-20.5282073).add(-20.89619625).add(-21.26188314)
      .add(-21.62460317).add(-21.98358848).add(-22.33666053)
      .add(-22.68226009).add(-23.0198508).add(-23.34938497).add(-23.67069194)
      .add(-23.98330582).add(-24.28825904).add(-24.58659134)
      .add(-24.87823134).add(-25.16431407).add(-25.44670768)
      .add(-25.72838288).add(-26.01200776).add(-26.29662711)
      .add(-26.58623777).add(-26.8818099).add(-27.1849976).add(-27.49727558)
      .add(-27.81935069).add(-28.15033009).add(-28.49284223)
      .add(-28.84813663).add(-29.21623732).add(-29.59801894)
      .add(-29.98981613).add(-30.39957134).add(-30.82025809).add(-31.2534045)
      .add(-31.69834844).add(-32.15077468).add(-32.35548229).array())
      .add(stan::math::array_builder<double>().add(-1.89035838)
      .add(-1.97633559).add(-2.17881109).add(-2.39418459).add(-2.61961702)
      .add(-2.85373734).add(-3.09508721).add(-3.34055584).add(-3.59036046)
      .add(-3.84362035).add(-4.09964941).add(-4.35821842).add(-4.61886513)
      .add(-4.88095197).add(-5.14395833).add(-5.40756801).add(-5.67155154)
      .add(-5.93610235).add(-6.2014755).add(-6.46823395).add(-6.73731569)
      .add(-7.00795965).add(-7.2794618).add(-7.55211722).add(-7.82608179)
      .add(-8.10117054).add(-8.37736217).add(-8.65464187).add(-8.93285356)
      .add(-9.21165975).add(-9.49166044).add(-9.77290396).add(-10.05569974)
      .add(-10.34028601).add(-10.62710416).add(-10.91655548)
      .add(-11.20870558).add(-11.50404641).add(-11.80307978)
      .add(-12.10570627).add(-12.41201691).add(-12.72160998)
      .add(-13.03476426).add(-13.35125687).add(-13.67095446)
      .add(-13.99396183).add(-14.31982319).add(-14.6480214).add(-14.97859597)
      .add(-15.31155648).add(-15.64727607).add(-15.98608262)
      .add(-16.32697379).add(-16.66983194).add(-17.01511228)
      .add(-17.36304537).add(-17.71370279).add(-18.06700929)
      .add(-18.42272187).add(-18.7806814).add(-19.14080419).add(-19.50280647)
      .add(-19.86613781).add(-20.23032497).add(-20.59493708)
      .add(-20.95868337).add(-21.31965867).add(-21.67739583)
      .add(-22.03128144).add(-22.37917506).add(-22.71970719)
      .add(-23.05259162).add(-23.37788308).add(-23.69552595)
      .add(-24.00512902).add(-24.30778687).add(-24.604566).add(-24.89535824)
      .add(-25.18125384).add(-25.46405455).add(-25.74671618)
      .add(-26.03188524).add(-26.31840331).add(-26.61027422)
      .add(-26.90838169).add(-27.2143277).add(-27.52951494).add(-27.8546179)
      .add(-28.18853336).add(-28.53390689).add(-28.89188091)
      .add(-29.26233681).add(-29.64603097).add(-30.03875681)
      .add(-30.44931135).add(-30.86972618).add(-31.30163242)
      .add(-31.74385294).add(-32.19159871).add(-32.39350428).array())
      .add(stan::math::array_builder<double>().add(-1.90037906)
      .add(-1.98710252).add(-2.19136019).add(-2.40858812).add(-2.63588773)
      .add(-2.87197707).add(-3.11536417).add(-3.36239856).add(-3.61350968)
      .add(-3.86781924).add(-4.12462973).add(-4.38377206).add(-4.64481903)
      .add(-4.90715635).add(-5.17029619).add(-5.43398921).add(-5.69810218)
      .add(-5.96292506).add(-6.22877142).add(-6.49626669).add(-6.76649052)
      .add(-7.03839278).add(-7.31100545).add(-7.58466408).add(-7.85956488)
      .add(-8.13548154).add(-8.4124109).add(-8.69037548).add(-8.96927522)
      .add(-9.2488491).add(-9.52978676).add(-9.8122099).add(-10.09647457)
      .add(-10.38285073).add(-10.67177108).add(-10.96359073)
      .add(-11.25831626).add(-11.55636968).add(-11.85818031)
      .add(-12.16356826).add(-12.47254513).add(-12.78464878)
      .add(-13.10010879).add(-13.41867401).add(-13.74018651)
      .add(-14.06473824).add(-14.39188192).add(-14.72110244)
      .add(-15.05244015).add(-15.38592872).add(-15.72193755)
      .add(-16.06080621).add(-16.40152945).add(-16.74399226)
      .add(-17.08864764).add(-17.43571219).add(-17.78525776)
      .add(-18.13718305).add(-18.49124067).add(-18.84732291)
      .add(-19.20529941).add(-19.56481748).add(-19.92529827)
      .add(-20.28632842).add(-20.64749628).add(-21.00745542)
      .add(-21.36432289).add(-21.71782831).add(-22.0675007).add(-22.41122923)
      .add(-22.74780397).add(-23.07713848).add(-23.3993372).add(-23.71440736)
      .add(-24.02200494).add(-24.3232592).add(-24.61924365).add(-24.90980731)
      .add(-25.19599499).add(-25.47954519).add(-25.76340323)
      .add(-26.05020276).add(-26.33860201).add(-26.63261819)
      .add(-26.93305886).add(-27.24148032).add(-27.55921704)
      .add(-27.88691629).add(-28.22327548).add(-28.57096167)
      .add(-28.93101589).add(-29.30318688).add(-29.68813227)
      .add(-30.08113893).add(-30.49186122).add(-30.91146014)
      .add(-31.34170751).add(-31.78101283).add(-32.22426171)
      .add(-32.42361197).array()).add(stan::math::array_builder<double>()
      .add(-1.91053194).add(-1.99789466).add(-2.20365062).add(-2.42239385)
      .add(-2.65117815).add(-2.8888279).add(-3.13382839).add(-3.38197292)
      .add(-3.63394954).add(-3.88891146).add(-4.14616548).add(-4.40561481)
      .add(-4.66687373).add(-4.92935251).add(-5.19259063).add(-5.45639192)
      .add(-5.7206971).add(-5.98586245).add(-6.25223335).add(-6.52047381)
      .add(-6.79180029).add(-7.06486579).add(-7.33843601).add(-7.6129109)
      .add(-7.88855735).add(-8.16512799).add(-8.4426571).add(-8.72121669)
      .add(-9.00076624).add(-9.28111393).add(-9.56301951).add(-9.8466545)
      .add(-10.13239588).add(-10.42051957).add(-10.71143115)
      .add(-11.00543049).add(-11.3024627).add(-11.60288407).add(-11.90706205)
      .add(-12.21475146).add(-12.52590489).add(-12.84001902)
      .add(-13.15729068).add(-13.47745447).add(-13.80033951)
      .add(-14.12603135).add(-14.45409474).add(-14.78401889)
      .add(-15.11584367).add(-15.4496244).add(-15.7857231).add(-16.12448725)
      .add(-16.46490631).add(-16.80686545).add(-17.15081326)
      .add(-17.49695149).add(-17.84535207).add(-18.19588957)
      .add(-18.54831496).add(-18.90257362).add(-19.25849455)
      .add(-19.61566645).add(-19.9734937).add(-20.33162931).add(-20.68969131)
      .add(-21.04629875).add(-21.39960739).add(-21.74953302)
      .add(-22.09572857).add(-22.43610004).add(-22.76956849)
      .add(-23.09620737).add(-23.41613428).add(-23.72938621)
      .add(-24.03565203).add(-24.33608177).add(-24.63174683).add(-24.922453)
      .add(-25.20920177).add(-25.49367232).add(-25.77880311)
      .add(-26.06722101).add(-26.35741513).add(-26.65342006)
      .add(-26.95597455).add(-27.26659444).add(-27.58654972)
      .add(-27.91646448).add(-28.25484821).add(-28.60439354)
      .add(-28.96604702).add(-29.33943517).add(-29.72513594)
      .add(-30.11796622).add(-30.52842717).add(-30.94687981)
      .add(-31.37526202).add(-31.81165309).add(-32.25072017)
      .add(-32.44778674).array()).add(stan::math::array_builder<double>()
      .add(-1.92050298).add(-2.00840107).add(-2.21539255).add(-2.43535482)
      .add(-2.66530706).add(-2.904195).add(-3.15049019).add(-3.39941719)
      .add(-3.65195823).add(-3.90731834).add(-4.16481655).add(-4.42443259)
      .add(-4.68582174).add(-4.94841469).add(-5.21176896).add(-5.47572714)
      .add(-5.74028425).add(-6.00583983).add(-6.2727542).add(-6.54171669)
      .add(-6.81408389).add(-7.08821248).add(-7.36260453).add(-7.63774579)
      .add(-7.91399812).add(-8.19110658).add(-8.46915348).add(-8.74826396)
      .add(-9.02845353).add(-9.30958847).add(-9.59248031).add(-9.87733104)
      .add(-10.16452033).add(-10.45431377).add(-10.74708034)
      .add(-11.04306289).add(-11.34214791).add(-11.64463316)
      .add(-11.95083493).add(-12.26045578).add(-12.57340477)
      .add(-12.88915108).add(-13.20786962).add(-13.52928921)
      .add(-13.85323268).add(-14.17978213).add(-14.50851538)
      .add(-14.83892637).add(-15.17105275).add(-15.50496923)
      .add(-15.84102764).add(-16.17958069).add(-16.51961106)
      .add(-16.86100271).add(-17.20419876).add(-17.54938632)
      .add(-17.89663799).add(-18.24580679).add(-18.59664488)
      .add(-18.94915192).add(-19.30312192).add(-19.65809414)
      .add(-20.01346541).add(-20.36895861).add(-20.72422759)
      .add(-21.07787157).add(-21.42809385).add(-21.77498183)
      .add(-22.11829299).add(-22.45593754).add(-22.78694386)
      .add(-23.11151544).add(-23.42975852).add(-23.74171888)
      .add(-24.04711125).add(-24.34709934).add(-24.64274835)
      .add(-24.93382227).add(-25.221282).add(-25.50675094).add(-25.79316351)
      .add(-26.08314405).add(-26.37502322).add(-26.67285564)
      .add(-26.97731679).add(-27.28988642).add(-27.6117734).add(-27.94358211)
      .add(-28.28364492).add(-28.63468369).add(-28.99755777)
      .add(-29.37178135).add(-29.7578702).add(-30.15020624).add(-30.56011949)
      .add(-30.97723562).add(-31.4036741).add(-31.83724944).add(-32.27248478)
      .add(-32.46752421).array()).add(stan::math::array_builder<double>()
      .add(-1.93017477).add(-2.01851835).add(-2.22652506).add(-2.44746813)
      .add(-2.6783441).add(-2.91823196).add(-3.16559633).add(-3.41508183)
      .add(-3.66799172).add(-3.9235959).add(-4.18122804).add(-4.44094325)
      .add(-4.70243379).add(-4.96514444).add(-5.22864147).add(-5.49279416)
      .add(-5.75763669).add(-6.02359593).add(-6.29103784).add(-6.56067113)
      .add(-6.83400023).add(-7.10908955).add(-7.38418155).add(-7.65986572)
      .add(-7.93661742).add(-8.21418224).add(-8.49269515).add(-8.77233306)
      .add(-9.05316091).add(-9.33509129).add(-9.61897182).add(-9.90502011)
      .add(-10.19360598).add(-10.48497477).add(-10.77945474).add(-11.0772335)
      .add(-11.378144).add(-11.6824331).add(-11.99037534).add(-12.30163164)
      .add(-12.61607902).add(-12.93316875).add(-13.25306095)
      .add(-13.57548379).add(-13.90025754).add(-14.22746205).add(-14.5566881)
      .add(-14.88743404).add(-15.2197336).add(-15.55367891).add(-15.88960963)
      .add(-16.22788181).add(-16.56747045).add(-16.90825761)
      .add(-17.25068065).add(-17.59491278).add(-17.94102822)
      .add(-18.28886121).add(-18.63816773).add(-18.98900245)
      .add(-19.34112931).add(-19.69404598).add(-20.04714878)
      .add(-20.40023157).add(-20.75298734).add(-21.10400551)
      .add(-21.45154086).add(-21.79583703).add(-22.13673812).add(-22.4721477)
      .add(-22.80118276).add(-23.12415485).add(-23.44114236)
      .add(-23.75218648).add(-24.05702445).add(-24.35683013)
      .add(-24.65266071).add(-24.94424039).add(-25.23249205)
      .add(-25.51898638).add(-25.80665586).add(-26.09812548)
      .add(-26.39157577).add(-26.69108326).add(-26.99726445)
      .add(-27.31156672).add(-27.63514102).add(-27.9685749).add(-28.31003354)
      .add(-28.66227139).add(-29.02606766).add(-29.40083339)
      .add(-29.78703775).add(-30.17865991).add(-30.58783675)
      .add(-31.00351602).add(-31.42800712).add(-31.85891061).add(-32.2906568)
      .add(-32.48389809).array()).add(stan::math::array_builder<double>()
      .add(-1.93954285).add(-2.02825771).add(-2.23710214).add(-2.45884012)
      .add(-2.69045546).add(-2.93116949).add(-3.17944463).add(-3.42933476)
      .add(-3.68248473).add(-3.9382373).add(-4.19594007).add(-4.45572018)
      .add(-4.71730156).add(-4.98013701).add(-5.24379377).add(-5.50815858)
      .add(-5.77329386).add(-6.03964317).add(-6.30757368).add(-6.57781177)
      .add(-6.85201912).add(-7.12797283).add(-7.40365955).add(-7.67978685)
      .add(-7.95695746).add(-8.23492148).add(-8.51386744).add(-8.79402004)
      .add(-9.07548588).add(-9.35821295).add(-9.64307222).add(-9.93028573)
      .add(-10.22020517).add(-10.51304987).add(-10.8091064).add(-11.10851061)
      .add(-11.41104757).add(-11.71692043).add(-12.0263699).add(-12.33902368)
      .add(-12.65473523).add(-12.97294465).add(-13.29380204)
      .add(-13.61703795).add(-13.94247217).add(-14.27018262).add(-14.5997724)
      .add(-14.93074367).add(-15.2631248).add(-15.59702371).add(-15.93276649)
      .add(-16.27071122).add(-16.60982477).add(-16.94998704)
      .add(-17.29162975).add(-17.63491326).add(-17.97991453)
      .add(-18.32645172).add(-18.674287).add(-19.02353024).add(-19.37391959)
      .add(-19.72491762).add(-20.0759254).add(-20.42680731).add(-20.77729677)
      .add(-21.12598017).add(-21.47116492).add(-21.81323603)
      .add(-22.15210856).add(-22.48567064).add(-22.81311328).add(-23.1348399)
      .add(-23.4508899).add(-23.76129105).add(-24.0658018).add(-24.36560437)
      .add(-24.66174729).add(-24.95391693).add(-25.24300054)
      .add(-25.53051866).add(-25.81940347).add(-26.11228303)
      .add(-26.40719453).add(-26.70823772).add(-27.01597371)
      .add(-27.33182067).add(-27.65687458).add(-27.99170862)
      .add(-28.33432998).add(-28.68752858).add(-29.05201029)
      .add(-29.42709126).add(-29.81320783).add(-30.20396564)
      .add(-30.61228409).add(-31.02648369).add(-31.44906698)
      .add(-31.87745988).add(-32.30603498).add(-32.49767781).array())
      .add(stan::math::array_builder<double>().add(-1.94845527)
      .add(-2.03747273).add(-2.2469925).add(-2.46935822).add(-2.70155028)
      .add(-2.94293964).add(-3.19199106).add(-3.44216229).add(-3.69545584)
      .add(-3.95129312).add(-4.20903364).add(-4.46887148).add(-4.73055586)
      .add(-4.99354121).add(-5.25738837).add(-5.52199328).add(-5.78743726)
      .add(-6.05417249).add(-6.32256513).add(-6.5933593).add(-6.86838314)
      .add(-7.14513199).add(-7.42134007).add(-7.69784405).add(-7.97538398)
      .add(-8.25371605).add(-8.53308111).add(-8.81374666).add(-9.0958535)
      .add(-9.37937571).add(-9.66519758).add(-9.95353759).add(-10.24472413)
      .add(-10.53894763).add(-10.83645386).add(-11.13733115).add(-11.4413223)
      .add(-11.74859321).add(-12.05935731).add(-12.37321566)
      .add(-12.69000456).add(-13.00915769).add(-13.33081829)
      .add(-13.65472111).add(-13.98068656).add(-14.30879049)
      .add(-14.63864754).add(-14.96976297).add(-15.30215865)
      .add(-15.63595694).add(-15.97146942).add(-16.30905529)
      .add(-16.64767314).add(-16.98720073).add(-17.32806453)
      .add(-17.67041326).add(-18.01432772).add(-18.35961256)
      .add(-18.70603813).add(-19.05376938).add(-19.40252217)
      .add(-19.75172938).add(-20.10080069).add(-20.44966942)
      .add(-20.79810941).add(-21.14470864).add(-21.48782649)
      .add(-21.82797577).add(-22.16512911).add(-22.49715228)
      .add(-22.82329903).add(-23.14405255).add(-23.45940562)
      .add(-23.76936675).add(-24.07371521).add(-24.37364079)
      .add(-24.67018318).add(-24.96299288).add(-25.25292346)
      .add(-25.54144761).add(-25.83149852).add(-26.12570915)
      .add(-26.42197908).add(-26.72443234).add(-27.03357756)
      .add(-27.35080647).add(-27.67716289).add(-28.01320777)
      .add(-28.35679867).add(-28.71076353).add(-29.07574132)
      .add(-29.45096069).add(-29.83683719).add(-30.22662931).add(-30.6340134)
      .add(-31.04672739).add(-31.46746656).add(-31.89351282)
      .add(-32.31920489).add(-32.50942185).array())
      .add(stan::math::array_builder<double>().add(-1.95695625)
      .add(-2.04622042).add(-2.25628573).add(-2.47914922).add(-2.71179535)
      .add(-2.95374992).add(-3.20348308).add(-3.45385129).add(-3.70722702)
      .add(-3.96311309).add(-4.22087758).add(-4.48077593).add(-4.74257656)
      .add(-5.00573013).add(-5.2697855).add(-5.5346419).add(-5.80039311)
      .add(-6.06749476).add(-6.33631205).add(-6.60760849).add(-6.8833877)
      .add(-7.16086834).add(-7.43753467).add(-7.71436103).add(-7.99223202)
      .add(-8.27090956).add(-8.55068429).add(-8.83186107).add(-9.11460792)
      .add(-9.39891702).add(-9.68567817).add(-9.97510051).add(-10.26748595)
      .add(-10.56299487).add(-10.86183409).add(-11.16404874)
      .add(-11.46934455).add(-11.77785576).add(-12.08977383)
      .add(-12.40467842).add(-12.72239336).add(-13.04234933)
      .add(-13.36468482).add(-13.68913978).add(-14.01553582)
      .add(-14.34394635).add(-14.67399671).add(-15.00519461)
      .add(-15.33755449).add(-15.67121209).add(-16.00646381)
      .add(-16.34366939).add(-16.68177922).add(-17.02066908)
      .add(-17.36076075).add(-17.70219252).add(-18.04505015)
      .add(-18.38912711).add(-18.73420364).add(-19.08049924)
      .add(-19.42771044).add(-19.77524489).add(-20.12252361).add(-20.4695466)
      .add(-20.81612731).add(-21.16085834).add(-21.50214954)
      .add(-21.84062927).add(-22.1763165).add(-22.50704931).add(-22.83213538)
      .add(-23.15212854).add(-23.46696969).add(-23.7766441).add(-24.08095194)
      .add(-24.38109032).add(-24.67809016).add(-24.97156778)
      .add(-25.26234491).add(-25.55184833).add(-25.8430133).add(-26.13847916)
      .add(-26.43601286).add(-26.73976343).add(-27.05018961)
      .add(-27.36865913).add(-27.6961662).add(-28.0332615).add(-28.37766064)
      .add(-28.7322318).add(-29.09755296).add(-29.47277201).add(-29.8582941)
      .add(-30.24705437).add(-30.65346006).add(-31.06470606)
      .add(-31.48367741).add(-31.90753597).add(-32.33060277)
      .add(-32.51954267).array()).add(stan::math::array_builder<double>()
      .add(-1.96499252).add(-2.05445424).add(-2.26495215).add(-2.48820249)
      .add(-2.72120067).add(-2.96363099).add(-3.21397128).add(-3.46447441)
      .add(-3.71789182).add(-3.97380897).add(-4.23159842).add(-4.49157103)
      .add(-4.75350837).add(-5.01685243).add(-5.28113546).add(-5.54625529)
      .add(-5.81231308).add(-6.07976434).add(-6.34897438).add(-6.62072838)
      .add(-6.89721365).add(-7.17537695).add(-7.45245451).add(-7.7295647)
      .add(-8.0077417).add(-8.28675188).add(-8.56693239).add(-8.84862018)
      .add(-9.13200433).add(-9.41708854).add(-9.7047621).add(-9.99522077)
      .add(-10.28873833).add(-10.5854451).add(-10.88551128).add(-11.188943)
      .add(-11.49541366).add(-11.80503061).add(-12.11796766)
      .add(-12.43378719).add(-12.75230411).add(-13.07294856)
      .add(-13.39585564).add(-13.72077109).add(-14.04751788)
      .add(-14.37616658).add(-14.70635243).add(-15.03758498)
      .add(-15.36987051).add(-15.70335729).add(-16.03832615)
      .add(-16.37513699).add(-16.71273218).add(-17.05098584)
      .add(-17.39031565).add(-17.73085075).add(-18.07268283)
      .add(-18.41559631).add(-18.75938272).add(-19.10431533).add(-19.4500738)
      .add(-19.79604417).add(-20.14166068).add(-20.48698741)
      .add(-20.83187603).add(-21.17492578).add(-21.51459496)
      .add(-21.85161664).add(-22.18604678).add(-22.51569168)
      .add(-22.83990603).add(-23.15930729).add(-23.47378092)
      .add(-23.78328605).add(-24.0876442).add(-24.38805971).add(-24.68555497)
      .add(-24.97971363).add(-25.27132723).add(-25.56177831)
      .add(-25.85400512).add(-26.15065461).add(-26.4493654).add(-26.75431219)
      .add(-27.06590602).add(-27.38549281).add(-27.71401957)
      .add(-28.05202843).add(-28.39710013).add(-28.752145).add(-29.11768555)
      .add(-29.49279487).add(-29.87787682).add(-30.2655646).add(-30.67097026)
      .add(-31.08078075).add(-31.49806626).add(-31.91988742)
      .add(-32.34055847).add(-32.52834982).array())
      .add(stan::math::array_builder<double>().add(-1.97276985)
      .add(-2.06239285).add(-2.27324221).add(-2.49680217).add(-2.73008337)
      .add(-2.97293083).add(-3.22383104).add(-3.47442787).add(-3.72785996)
      .add(-3.98379502).add(-4.24160601).add(-4.50165454).add(-4.76373087)
      .add(-5.02726514).add(-5.29177041).add(-5.55714057).add(-5.82348116)
      .add(-6.0912459).add(-6.36080221).add(-6.63295968).add(-6.91009685)
      .add(-7.18889227).add(-7.46633503).add(-7.74369245).add(-8.02215182)
      .add(-8.30148161).add(-8.58206192).add(-8.86425662).add(-9.14827027)
      .add(-9.43411252).add(-9.72266747).add(-10.01411459).add(-10.30869882)
      .add(-10.60652099).add(-10.9077172).add(-11.21225853).add(-11.51979014)
      .add(-11.83039656).add(-12.14423751).add(-12.46086126)
      .add(-12.78007657).add(-13.10131472).add(-13.42470841)
      .add(-13.75000932).add(-14.07704185).add(-14.40587328)
      .add(-14.73614799).add(-15.06737688).add(-15.39955751)
      .add(-15.73284996).add(-16.06751929).add(-16.40392533)
      .add(-16.74100273).add(-17.07862431).add(-17.41720435)
      .add(-17.75686395).add(-18.09770172).add(-18.43949489)
      .add(-18.78204741).add(-19.12568532).add(-19.47007346)
      .add(-19.81457924).add(-20.15865138).add(-20.50241512)
      .add(-20.84575875).add(-21.18728946).add(-21.52551175).add(-21.8612539)
      .add(-22.19460098).add(-22.52332446).add(-22.84682062)
      .add(-23.16576504).add(-23.47998524).add(-23.78941225)
      .add(-24.09388936).add(-24.39462821).add(-24.69264295)
      .add(-24.98748594).add(-25.27991992).add(-25.57128479)
      .add(-25.86452252).add(-26.16228866).add(-26.46209742)
      .add(-26.76814963).add(-27.08081061).add(-27.40140641)
      .add(-27.73083916).add(-28.06964398).add(-28.41527326)
      .add(-28.77068112).add(-29.13633969).add(-29.51125262)
      .add(-29.89583036).add(-30.28242352).add(-30.68682321)
      .add(-31.09523974).add(-31.51092274).add(-31.93084655).add(-32.3493258)
      .add(-32.53607988).array()).add(stan::math::array_builder<double>()
      .add(-1.98015639).add(-2.06990581).add(-2.28102841).add(-2.5048243)
      .add(-2.73832406).add(-2.98153484).add(-3.23295258).add(-3.4836111)
      .add(-3.73704168).add(-3.9929935).add(-4.25083558).add(-4.51097506)
      .add(-4.77320619).add(-5.03694404).add(-5.3016799).add(-5.56730132)
      .add(-5.83391547).add(-6.10197286).add(-6.37184525).add(-6.64436918)
      .add(-6.92212103).add(-7.20151475).add(-7.47929293).add(-7.75687533)
      .add(-8.03560464).add(-8.31524896).add(-8.59622776).add(-8.87892723)
      .add(-9.16356273).add(-9.45014546).add(-9.73955079).add(-10.03194011)
      .add(-10.32752948).add(-10.62639137).add(-10.92863038)
      .add(-11.23418615).add(-11.54267921).add(-11.85417477)
      .add(-12.16882135).add(-12.48615571).add(-12.80598245)
      .add(-13.12773531).add(-13.45154511).add(-13.77716961)
      .add(-14.10443447).add(-14.43340331).add(-14.76372896)
      .add(-15.09492324).add(-15.42697458).add(-15.76005429)
      .add(-16.09441157).add(-16.43040613).add(-16.7669652).add(-17.10396077)
      .add(-17.44180432).add(-17.78061009).add(-18.12048441)
      .add(-18.46119902).add(-18.80257118).add(-19.14497854)
      .add(-19.48807276).add(-19.83120512).add(-20.17383955)
      .add(-20.51615953).add(-20.85808813).add(-21.19824132)
      .add(-21.53516751).add(-21.86978185).add(-22.202192).add(-22.53013232)
      .add(-22.85303624).add(-23.17163324).add(-23.48569116)
      .add(-23.79511144).add(-24.09975962).add(-24.40085482)
      .add(-24.69940318).add(-24.99492706).add(-25.28816168)
      .add(-25.58040571).add(-25.87460545).add(-26.17342592)
      .add(-26.47426044).add(-26.78133635).add(-27.09497504)
      .add(-27.41648448).add(-27.74672402).add(-28.0862232).add(-28.43231211)
      .add(-28.78799004).add(-29.15368342).add(-29.52833128)
      .add(-29.91235745).add(-30.2978475).add(-30.70124633).add(-31.10831576)
      .add(-31.52247839).add(-31.94063427).add(-32.35710298)
      .add(-32.54291653).array()).array(),
      "assigning variable AtmosphericFluxPolyCoeffs");
    std::vector<local_scalar_t__> cos_theta_grid;
    cos_theta_grid = std::vector<local_scalar_t__>(30, DUMMY_VAR__);
    
    current_statement__ = 364;
    assign(cos_theta_grid, nil_index_list(),
      stan::math::array_builder<double>().add(-1.).add(-0.93103448)
      .add(-0.86206897).add(-0.79310345).add(-0.72413793).add(-0.65517241)
      .add(-0.5862069).add(-0.51724138).add(-0.44827586).add(-0.37931034)
      .add(-0.31034483).add(-0.24137931).add(-0.17241379).add(-0.10344828)
      .add(-0.03448276).add(0.03448276).add(0.10344828).add(0.17241379)
      .add(0.24137931).add(0.31034483).add(0.37931034).add(0.44827586)
      .add(0.51724138).add(0.5862069).add(0.65517241).add(0.72413793)
      .add(0.79310345).add(0.86206897).add(0.93103448).add(1.).array(),
      "assigning variable cos_theta_grid");
    std::vector<local_scalar_t__> log_energy_grid;
    log_energy_grid = std::vector<local_scalar_t__>(100, DUMMY_VAR__);
    
    current_statement__ = 365;
    assign(log_energy_grid, nil_index_list(),
      stan::math::array_builder<double>().add(0.).add(0.09090909)
      .add(0.18181818).add(0.27272727).add(0.36363636).add(0.45454545)
      .add(0.54545455).add(0.63636364).add(0.72727273).add(0.81818182)
      .add(0.90909091).add(1.).add(1.09090909).add(1.18181818)
      .add(1.27272727).add(1.36363636).add(1.45454545).add(1.54545455)
      .add(1.63636364).add(1.72727273).add(1.81818182).add(1.90909091)
      .add(2.).add(2.09090909).add(2.18181818).add(2.27272727)
      .add(2.36363636).add(2.45454545).add(2.54545455).add(2.63636364)
      .add(2.72727273).add(2.81818182).add(2.90909091).add(3.)
      .add(3.09090909).add(3.18181818).add(3.27272727).add(3.36363636)
      .add(3.45454545).add(3.54545455).add(3.63636364).add(3.72727273)
      .add(3.81818182).add(3.90909091).add(4.).add(4.09090909)
      .add(4.18181818).add(4.27272727).add(4.36363636).add(4.45454545)
      .add(4.54545455).add(4.63636364).add(4.72727273).add(4.81818182)
      .add(4.90909091).add(5.).add(5.09090909).add(5.18181818)
      .add(5.27272727).add(5.36363636).add(5.45454545).add(5.54545455)
      .add(5.63636364).add(5.72727273).add(5.81818182).add(5.90909091)
      .add(6.).add(6.09090909).add(6.18181818).add(6.27272727)
      .add(6.36363636).add(6.45454545).add(6.54545455).add(6.63636364)
      .add(6.72727273).add(6.81818182).add(6.90909091).add(7.)
      .add(7.09090909).add(7.18181818).add(7.27272727).add(7.36363636)
      .add(7.45454545).add(7.54545455).add(7.63636364).add(7.72727273)
      .add(7.81818182).add(7.90909091).add(8.).add(8.09090909)
      .add(8.18181818).add(8.27272727).add(8.36363636).add(8.45454545)
      .add(8.54545455).add(8.63636364).add(8.72727273).add(8.81818182)
      .add(8.90909091).add(9.).array(), "assigning variable log_energy_grid");
    Eigen::Matrix<local_scalar_t__, -1, 1> vector_interp_energies;
    vector_interp_energies = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(vector_interp_energies, DUMMY_VAR__);
    
    Eigen::Matrix<local_scalar_t__, -1, 1> vector_coz_grid_points;
    vector_coz_grid_points = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(vector_coz_grid_points, DUMMY_VAR__);
    
    current_statement__ = 368;
    assign(vector_interp_energies, cons_list(index_uni(1), nil_index_list()),
      interpolate(to_vector(log_energy_grid),
        to_vector(
          AtmosphericFluxPolyCoeffs[(binary_search(
                                       stan::math::abs(
                                         stan::math::cos(
                                           (stan::math::pi() -
                                             stan::math::acos(
                                               true_dir[(3 - 1)])))),
                                       cos_theta_grid, pstream__) - 1)]),
        stan::math::log10(
          truncate_value(true_energy, 1.0, 1000000000.0, pstream__)), pstream__),
      "assigning variable vector_interp_energies");
    current_statement__ = 369;
    assign(vector_interp_energies, cons_list(index_uni(2), nil_index_list()),
      interpolate(to_vector(log_energy_grid),
        to_vector(
          AtmosphericFluxPolyCoeffs[((binary_search(
                                        stan::math::abs(
                                          stan::math::cos(
                                            (stan::math::pi() -
                                              stan::math::acos(
                                                true_dir[(3 - 1)])))),
                                        cos_theta_grid, pstream__) + 1) - 1)]),
        stan::math::log10(
          truncate_value(true_energy, 1.0, 1000000000.0, pstream__)), pstream__),
      "assigning variable vector_interp_energies");
    current_statement__ = 370;
    assign(vector_coz_grid_points, cons_list(index_uni(1), nil_index_list()),
      cos_theta_grid[(binary_search(
                        stan::math::abs(
                          stan::math::cos(
                            (stan::math::pi() -
                              stan::math::acos(true_dir[(3 - 1)])))),
                        cos_theta_grid, pstream__) - 1)],
      "assigning variable vector_coz_grid_points");
    current_statement__ = 371;
    assign(vector_coz_grid_points, cons_list(index_uni(2), nil_index_list()),
      cos_theta_grid[((binary_search(
                         stan::math::abs(
                           stan::math::cos(
                             (stan::math::pi() -
                               stan::math::acos(true_dir[(3 - 1)])))),
                         cos_theta_grid, pstream__) + 1) - 1)],
      "assigning variable vector_coz_grid_points");
    current_statement__ = 372;
    return (pow(10,
              interpolate(vector_coz_grid_points, vector_interp_energies,
                stan::math::abs(
                  stan::math::cos(
                    (stan::math::pi() - stan::math::acos(true_dir[(3 - 1)])))), pstream__))
             * 10000.0);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct AtmopshericNumuFlux_functor__ {
template <typename T0__, typename T1__>
stan::promote_args_t<T0__,
T1__>
operator()(const T0__& true_energy,
           const Eigen::Matrix<T1__, -1, 1>& true_dir,
           std::ostream* pstream__)  const 
{
return AtmopshericNumuFlux(true_energy, true_dir, pstream__);
}
};

class model_code_model final : public model_base_crtp<model_code_model> {

 private:
  int N;
  std::vector<Eigen::Matrix<double, -1, 1>> omega_det;
  Eigen::Matrix<double, -1, 1> Edet;
  double Esrc_min;
  double Esrc_max;
  int Ns;
  std::vector<Eigen::Matrix<double, -1, 1>> varpi;
  Eigen::Matrix<double, -1, 1> D;
  Eigen::Matrix<double, -1, 1> z;
  int Ngrid;
  Eigen::Matrix<double, -1, 1> alpha_grid;
  std::vector<Eigen::Matrix<double, -1, 1>> integral_grid;
  double atmo_integ_val;
  Eigen::Matrix<double, -1, 1> E_grid;
  std::vector<Eigen::Matrix<double, -1, 1>> Pdet_grid;
  double T;
  double L_scale;
  double F_diff_scale;
  double F_atmo_scale;
  double F_tot_scale;
  int F_1dim__;
  int eps_1dim__;
  int lp_2dim__;
  int logF_1dim__;
 
 public:
  ~model_code_model() final { }
  
  std::string model_name() const final { return "model_code_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 v2.24.1");
    stanc_info.push_back("stancflags = --include_paths=/Users/fran/projects/hierarchical_nu/software/stan_files,/Users/fran/projects/hierarchical_nu/software/simulation_study/stan_files");
    return stanc_info;
  }
  
  
  model_code_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_code_model_namespace::model_code_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 58;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 58;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 59;
      validate_non_negative_index("omega_det", "N", N);
      current_statement__ = 60;
      context__.validate_dims("data initialization","omega_det","double",
          context__.to_vec(N, 3));
      omega_det = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(3));
      stan::math::fill(omega_det, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> omega_det_flat__;
        current_statement__ = 60;
        assign(omega_det_flat__, nil_index_list(),
          context__.vals_r("omega_det"),
          "assigning variable omega_det_flat__");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 60;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 60;
            assign(omega_det,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              omega_det_flat__[(pos__ - 1)], "assigning variable omega_det");
            current_statement__ = 60;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 60;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 60;
        current_statement__ = 60;
        check_unit_vector(function__, "omega_det[sym1__]",
                          omega_det[(sym1__ - 1)]);}
      current_statement__ = 61;
      validate_non_negative_index("Edet", "N", N);
      current_statement__ = 62;
      context__.validate_dims("data initialization","Edet","double",
          context__.to_vec(N));
      Edet = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Edet, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Edet_flat__;
        current_statement__ = 62;
        assign(Edet_flat__, nil_index_list(), context__.vals_r("Edet"),
          "assigning variable Edet_flat__");
        current_statement__ = 62;
        pos__ = 1;
        current_statement__ = 62;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 62;
          assign(Edet, cons_list(index_uni(sym1__), nil_index_list()),
            Edet_flat__[(pos__ - 1)], "assigning variable Edet");
          current_statement__ = 62;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 63;
      context__.validate_dims("data initialization","Esrc_min","double",
          context__.to_vec());
      Esrc_min = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 63;
      Esrc_min = context__.vals_r("Esrc_min")[(1 - 1)];
      current_statement__ = 64;
      context__.validate_dims("data initialization","Esrc_max","double",
          context__.to_vec());
      Esrc_max = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 64;
      Esrc_max = context__.vals_r("Esrc_max")[(1 - 1)];
      current_statement__ = 65;
      context__.validate_dims("data initialization","Ns","int",
          context__.to_vec());
      Ns = std::numeric_limits<int>::min();
      
      current_statement__ = 65;
      Ns = context__.vals_i("Ns")[(1 - 1)];
      current_statement__ = 66;
      validate_non_negative_index("varpi", "Ns", Ns);
      current_statement__ = 67;
      context__.validate_dims("data initialization","varpi","double",
          context__.to_vec(Ns, 3));
      varpi = std::vector<Eigen::Matrix<double, -1, 1>>(Ns, Eigen::Matrix<double, -1, 1>(3));
      stan::math::fill(varpi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> varpi_flat__;
        current_statement__ = 67;
        assign(varpi_flat__, nil_index_list(), context__.vals_r("varpi"),
          "assigning variable varpi_flat__");
        current_statement__ = 67;
        pos__ = 1;
        current_statement__ = 67;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 67;
          for (int sym2__ = 1; sym2__ <= Ns; ++sym2__) {
            current_statement__ = 67;
            assign(varpi,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              varpi_flat__[(pos__ - 1)], "assigning variable varpi");
            current_statement__ = 67;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 67;
      for (int sym1__ = 1; sym1__ <= Ns; ++sym1__) {
        current_statement__ = 67;
        current_statement__ = 67;
        check_unit_vector(function__, "varpi[sym1__]", varpi[(sym1__ - 1)]);}
      current_statement__ = 68;
      validate_non_negative_index("D", "Ns", Ns);
      current_statement__ = 69;
      context__.validate_dims("data initialization","D","double",
          context__.to_vec(Ns));
      D = Eigen::Matrix<double, -1, 1>(Ns);
      stan::math::fill(D, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> D_flat__;
        current_statement__ = 69;
        assign(D_flat__, nil_index_list(), context__.vals_r("D"),
          "assigning variable D_flat__");
        current_statement__ = 69;
        pos__ = 1;
        current_statement__ = 69;
        for (int sym1__ = 1; sym1__ <= Ns; ++sym1__) {
          current_statement__ = 69;
          assign(D, cons_list(index_uni(sym1__), nil_index_list()),
            D_flat__[(pos__ - 1)], "assigning variable D");
          current_statement__ = 69;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 70;
      validate_non_negative_index("z", "Ns + 1", (Ns + 1));
      current_statement__ = 71;
      context__.validate_dims("data initialization","z","double",
          context__.to_vec((Ns + 1)));
      z = Eigen::Matrix<double, -1, 1>((Ns + 1));
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 71;
        assign(z_flat__, nil_index_list(), context__.vals_r("z"),
          "assigning variable z_flat__");
        current_statement__ = 71;
        pos__ = 1;
        current_statement__ = 71;
        for (int sym1__ = 1; sym1__ <= (Ns + 1); ++sym1__) {
          current_statement__ = 71;
          assign(z, cons_list(index_uni(sym1__), nil_index_list()),
            z_flat__[(pos__ - 1)], "assigning variable z");
          current_statement__ = 71;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 72;
      context__.validate_dims("data initialization","Ngrid","int",
          context__.to_vec());
      Ngrid = std::numeric_limits<int>::min();
      
      current_statement__ = 72;
      Ngrid = context__.vals_i("Ngrid")[(1 - 1)];
      current_statement__ = 73;
      validate_non_negative_index("alpha_grid", "Ngrid", Ngrid);
      current_statement__ = 74;
      context__.validate_dims("data initialization","alpha_grid","double",
          context__.to_vec(Ngrid));
      alpha_grid = Eigen::Matrix<double, -1, 1>(Ngrid);
      stan::math::fill(alpha_grid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_grid_flat__;
        current_statement__ = 74;
        assign(alpha_grid_flat__, nil_index_list(),
          context__.vals_r("alpha_grid"),
          "assigning variable alpha_grid_flat__");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
          current_statement__ = 74;
          assign(alpha_grid, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_grid_flat__[(pos__ - 1)], "assigning variable alpha_grid");
          current_statement__ = 74;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 75;
      validate_non_negative_index("integral_grid", "Ns + 1", (Ns + 1));
      current_statement__ = 76;
      validate_non_negative_index("integral_grid", "Ngrid", Ngrid);
      current_statement__ = 77;
      context__.validate_dims("data initialization","integral_grid","double",
          context__.to_vec((Ns + 1), Ngrid));
      integral_grid = std::vector<Eigen::Matrix<double, -1, 1>>((Ns + 1), Eigen::Matrix<double, -1, 1>(Ngrid));
      stan::math::fill(integral_grid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> integral_grid_flat__;
        current_statement__ = 77;
        assign(integral_grid_flat__, nil_index_list(),
          context__.vals_r("integral_grid"),
          "assigning variable integral_grid_flat__");
        current_statement__ = 77;
        pos__ = 1;
        current_statement__ = 77;
        for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
          current_statement__ = 77;
          for (int sym2__ = 1; sym2__ <= (Ns + 1); ++sym2__) {
            current_statement__ = 77;
            assign(integral_grid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              integral_grid_flat__[(pos__ - 1)],
              "assigning variable integral_grid");
            current_statement__ = 77;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 78;
      context__.validate_dims("data initialization","atmo_integ_val",
          "double",context__.to_vec());
      atmo_integ_val = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 78;
      atmo_integ_val = context__.vals_r("atmo_integ_val")[(1 - 1)];
      current_statement__ = 79;
      validate_non_negative_index("E_grid", "Ngrid", Ngrid);
      current_statement__ = 80;
      context__.validate_dims("data initialization","E_grid","double",
          context__.to_vec(Ngrid));
      E_grid = Eigen::Matrix<double, -1, 1>(Ngrid);
      stan::math::fill(E_grid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> E_grid_flat__;
        current_statement__ = 80;
        assign(E_grid_flat__, nil_index_list(), context__.vals_r("E_grid"),
          "assigning variable E_grid_flat__");
        current_statement__ = 80;
        pos__ = 1;
        current_statement__ = 80;
        for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
          current_statement__ = 80;
          assign(E_grid, cons_list(index_uni(sym1__), nil_index_list()),
            E_grid_flat__[(pos__ - 1)], "assigning variable E_grid");
          current_statement__ = 80;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 81;
      validate_non_negative_index("Pdet_grid", "Ns + 2", (Ns + 2));
      current_statement__ = 82;
      validate_non_negative_index("Pdet_grid", "Ngrid", Ngrid);
      current_statement__ = 83;
      context__.validate_dims("data initialization","Pdet_grid","double",
          context__.to_vec((Ns + 2), Ngrid));
      Pdet_grid = std::vector<Eigen::Matrix<double, -1, 1>>((Ns + 2), Eigen::Matrix<double, -1, 1>(Ngrid));
      stan::math::fill(Pdet_grid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Pdet_grid_flat__;
        current_statement__ = 83;
        assign(Pdet_grid_flat__, nil_index_list(),
          context__.vals_r("Pdet_grid"),
          "assigning variable Pdet_grid_flat__");
        current_statement__ = 83;
        pos__ = 1;
        current_statement__ = 83;
        for (int sym1__ = 1; sym1__ <= Ngrid; ++sym1__) {
          current_statement__ = 83;
          for (int sym2__ = 1; sym2__ <= (Ns + 2); ++sym2__) {
            current_statement__ = 83;
            assign(Pdet_grid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Pdet_grid_flat__[(pos__ - 1)], "assigning variable Pdet_grid");
            current_statement__ = 83;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 84;
      context__.validate_dims("data initialization","T","double",
          context__.to_vec());
      T = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 84;
      T = context__.vals_r("T")[(1 - 1)];
      current_statement__ = 85;
      context__.validate_dims("data initialization","L_scale","double",
          context__.to_vec());
      L_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 85;
      L_scale = context__.vals_r("L_scale")[(1 - 1)];
      current_statement__ = 86;
      context__.validate_dims("data initialization","F_diff_scale","double",
          context__.to_vec());
      F_diff_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 86;
      F_diff_scale = context__.vals_r("F_diff_scale")[(1 - 1)];
      current_statement__ = 87;
      context__.validate_dims("data initialization","F_atmo_scale","double",
          context__.to_vec());
      F_atmo_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 87;
      F_atmo_scale = context__.vals_r("F_atmo_scale")[(1 - 1)];
      current_statement__ = 88;
      context__.validate_dims("data initialization","F_tot_scale","double",
          context__.to_vec());
      F_tot_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 88;
      F_tot_scale = context__.vals_r("F_tot_scale")[(1 - 1)];
      current_statement__ = 89;
      validate_non_negative_index("Esrc", "N", N);
      current_statement__ = 90;
      F_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 90;
      F_1dim__ = (Ns + 2);
      current_statement__ = 90;
      validate_non_negative_index("F", "Ns + 2", F_1dim__);
      current_statement__ = 91;
      eps_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 91;
      eps_1dim__ = (Ns + 2);
      current_statement__ = 91;
      validate_non_negative_index("eps", "Ns + 2", eps_1dim__);
      current_statement__ = 92;
      validate_non_negative_index("lp", "N", N);
      current_statement__ = 93;
      lp_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 93;
      lp_2dim__ = (Ns + 2);
      current_statement__ = 93;
      validate_non_negative_index("lp", "Ns + 2", lp_2dim__);
      current_statement__ = 94;
      logF_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 94;
      logF_1dim__ = (Ns + 2);
      current_statement__ = 94;
      validate_non_negative_index("logF", "Ns + 2", logF_1dim__);
      current_statement__ = 95;
      validate_non_negative_index("E", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += N;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_code_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ L;
      L = DUMMY_VAR__;
      
      current_statement__ = 1;
      L = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        L = stan::math::lub_constrain(L, 0, 1e+60, lp__);
      } else {
        current_statement__ = 1;
        L = stan::math::lub_constrain(L, 0, 1e+60);
      }
      local_scalar_t__ F_diff;
      F_diff = DUMMY_VAR__;
      
      current_statement__ = 2;
      F_diff = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        F_diff = stan::math::lub_constrain(F_diff, 0.0, 1e-07, lp__);
      } else {
        current_statement__ = 2;
        F_diff = stan::math::lub_constrain(F_diff, 0.0, 1e-07);
      }
      local_scalar_t__ F_atmo;
      F_atmo = DUMMY_VAR__;
      
      current_statement__ = 3;
      F_atmo = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        F_atmo = stan::math::lub_constrain(F_atmo, 0.0, 1e-07, lp__);
      } else {
        current_statement__ = 3;
        F_atmo = stan::math::lub_constrain(F_atmo, 0.0, 1e-07);
      }
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 4;
      alpha = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        alpha = stan::math::lub_constrain(alpha, 1.0, 4, lp__);
      } else {
        current_statement__ = 4;
        alpha = stan::math::lub_constrain(alpha, 1.0, 4);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> Esrc;
      Esrc = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(Esrc, DUMMY_VAR__);
      
      current_statement__ = 5;
      Esrc = in__.vector(N);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(Esrc, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(Esrc[(sym1__ - 1)], Esrc_min, Esrc_max,
              lp__), "assigning variable Esrc");
        } else {
          current_statement__ = 5;
          assign(Esrc, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(Esrc[(sym1__ - 1)], Esrc_min, Esrc_max),
            "assigning variable Esrc");
        }}
      local_scalar_t__ Fsrc;
      Fsrc = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> F;
      F = Eigen::Matrix<local_scalar_t__, -1, 1>(F_1dim__);
      stan::math::fill(F, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> eps;
      eps = Eigen::Matrix<local_scalar_t__, -1, 1>(eps_1dim__);
      stan::math::fill(eps, DUMMY_VAR__);
      
      local_scalar_t__ f;
      f = DUMMY_VAR__;
      
      local_scalar_t__ Ftot;
      Ftot = DUMMY_VAR__;
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> lp;
      lp = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(lp_2dim__));
      stan::math::fill(lp, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> logF;
      logF = Eigen::Matrix<local_scalar_t__, -1, 1>(logF_1dim__);
      stan::math::fill(logF, DUMMY_VAR__);
      
      local_scalar_t__ Nex;
      Nex = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> E;
      E = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(E, DUMMY_VAR__);
      
      current_statement__ = 15;
      Fsrc = 0.0;
      current_statement__ = 20;
      for (int k = 1; k <= Ns; ++k) {
        current_statement__ = 16;
        assign(F, cons_list(index_uni(k), nil_index_list()),
          (L / ((4 * stan::math::pi()) * pow((D[(k - 1)] * 3.086e+22), 2))),
          "assigning variable F");
        current_statement__ = 17;
        assign(F, cons_list(index_uni(k), nil_index_list()),
          (F[(k - 1)] * flux_conv(alpha, Esrc_min, Esrc_max, pstream__)),
          "assigning variable F");
        current_statement__ = 18;
        Fsrc = (Fsrc + F[(k - 1)]);}
      current_statement__ = 21;
      assign(F, cons_list(index_uni((Ns + 1)), nil_index_list()), F_diff,
        "assigning variable F");
      current_statement__ = 22;
      assign(F, cons_list(index_uni((Ns + 2)), nil_index_list()), F_atmo,
        "assigning variable F");
      current_statement__ = 23;
      Ftot = ((F_diff + F_atmo) + Fsrc);
      current_statement__ = 24;
      f = (Fsrc / Ftot);
      current_statement__ = 25;
      assign(logF, nil_index_list(), stan::math::log(F),
        "assigning variable logF");
      current_statement__ = 46;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 26;
        assign(lp, cons_list(index_uni(i), nil_index_list()), logF,
          "assigning variable lp");
        current_statement__ = 44;
        for (int k = 1; k <= (Ns + 2); ++k) {
          current_statement__ = 40;
          if (logical_lt(k, (Ns + 1))) {
            current_statement__ = 36;
            assign(lp,
              cons_list(index_uni(i),
                cons_list(index_uni(k), nil_index_list())),
              (lp[(i - 1)][(k - 1)] +
                spectrum_logpdf(Esrc[(i - 1)], alpha, Esrc_min,
                  Esrc_max, pstream__)), "assigning variable lp");
            current_statement__ = 37;
            assign(E, cons_list(index_uni(i), nil_index_list()),
              (Esrc[(i - 1)] / (1 + z[(k - 1)])), "assigning variable E");
            current_statement__ = 38;
            assign(lp,
              cons_list(index_uni(i),
                cons_list(index_uni(k), nil_index_list())),
              (lp[(i - 1)][(k - 1)] +
                NorthernTracksAngularResolution(E[(i - 1)], varpi[(k - 1)],
                  omega_det[(i - 1)], pstream__)), "assigning variable lp");
          } else {
            current_statement__ = 35;
            if (logical_eq(k, (Ns + 1))) {
              current_statement__ = 31;
              assign(lp,
                cons_list(index_uni(i),
                  cons_list(index_uni(k), nil_index_list())),
                (lp[(i - 1)][(k - 1)] +
                  spectrum_logpdf(Esrc[(i - 1)], alpha, Esrc_min,
                    Esrc_max, pstream__)), "assigning variable lp");
              current_statement__ = 32;
              assign(E, cons_list(index_uni(i), nil_index_list()),
                (Esrc[(i - 1)] / (1 + z[(k - 1)])), "assigning variable E");
              current_statement__ = 33;
              assign(lp,
                cons_list(index_uni(i),
                  cons_list(index_uni(k), nil_index_list())),
                (lp[(i - 1)][(k - 1)] + -2.5310242469692907),
                "assigning variable lp");
            } else {
              current_statement__ = 30;
              if (logical_eq(k, (Ns + 2))) {
                current_statement__ = 27;
                assign(lp,
                  cons_list(index_uni(i),
                    cons_list(index_uni(k), nil_index_list())),
                  (lp[(i - 1)][(k - 1)] +
                    stan::math::log(
                      (AtmopshericNumuFlux(Esrc[(i - 1)],
                         omega_det[(i - 1)], pstream__) /
                        1.8071375858713813e-08))), "assigning variable lp");
                current_statement__ = 28;
                assign(E, cons_list(index_uni(i), nil_index_list()),
                  Esrc[(i - 1)], "assigning variable E");
              } 
            }
          }
          current_statement__ = 41;
          assign(lp,
            cons_list(index_uni(i),
              cons_list(index_uni(k), nil_index_list())),
            (lp[(i - 1)][(k - 1)] +
              NorthernTracksEnergyResolution(E[(i - 1)],
                Edet[(i - 1)], pstream__)), "assigning variable lp");
          current_statement__ = 42;
          assign(lp,
            cons_list(index_uni(i),
              cons_list(index_uni(k), nil_index_list())),
            (lp[(i - 1)][(k - 1)] +
              stan::math::log(
                interpolate(E_grid, Pdet_grid[(k - 1)],
                  E[(i - 1)], pstream__))), "assigning variable lp");}}
      current_statement__ = 47;
      assign(eps, nil_index_list(),
        get_exposure_factor_atmo(alpha, alpha_grid, integral_grid,
          atmo_integ_val, T, Ns, pstream__), "assigning variable eps");
      current_statement__ = 48;
      Nex = get_Nex(F, eps, pstream__);
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "f", f, 0);
      current_statement__ = 9;
      current_statement__ = 9;
      check_less_or_equal(function__, "f", f, 1);
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "Ftot", Ftot, 0);
      {
        current_statement__ = 51;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 49;
          lp_accum__.add(log_sum_exp(lp[(i - 1)]));}
        current_statement__ = 52;
        lp_accum__.add(-Nex);
        current_statement__ = 53;
        lp_accum__.add(normal_lpdf<propto__>(L, 0, L_scale));
        current_statement__ = 54;
        lp_accum__.add(normal_lpdf<propto__>(F_diff, 0, F_diff_scale));
        current_statement__ = 55;
        lp_accum__.add(
          normal_lpdf<propto__>(F_atmo, F_atmo_scale, (0.1 * F_atmo_scale)));
        current_statement__ = 56;
        lp_accum__.add(
          normal_lpdf<propto__>(Ftot, F_tot_scale, (0.5 * F_tot_scale)));
        current_statement__ = 57;
        lp_accum__.add(normal_lpdf<propto__>(alpha, 2.0, 2.0));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_code_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double L;
      L = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      L = in__.scalar();
      current_statement__ = 1;
      L = stan::math::lub_constrain(L, 0, 1e+60);
      double F_diff;
      F_diff = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      F_diff = in__.scalar();
      current_statement__ = 2;
      F_diff = stan::math::lub_constrain(F_diff, 0.0, 1e-07);
      double F_atmo;
      F_atmo = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      F_atmo = in__.scalar();
      current_statement__ = 3;
      F_atmo = stan::math::lub_constrain(F_atmo, 0.0, 1e-07);
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      alpha = in__.scalar();
      current_statement__ = 4;
      alpha = stan::math::lub_constrain(alpha, 1.0, 4);
      Eigen::Matrix<double, -1, 1> Esrc;
      Esrc = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Esrc, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      Esrc = in__.vector(N);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        assign(Esrc, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(Esrc[(sym1__ - 1)], Esrc_min, Esrc_max),
          "assigning variable Esrc");}
      double Fsrc;
      Fsrc = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> F;
      F = Eigen::Matrix<double, -1, 1>(F_1dim__);
      stan::math::fill(F, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> eps;
      eps = Eigen::Matrix<double, -1, 1>(eps_1dim__);
      stan::math::fill(eps, std::numeric_limits<double>::quiet_NaN());
      
      double f;
      f = std::numeric_limits<double>::quiet_NaN();
      
      double Ftot;
      Ftot = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<Eigen::Matrix<double, -1, 1>> lp;
      lp = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(lp_2dim__));
      stan::math::fill(lp, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> logF;
      logF = Eigen::Matrix<double, -1, 1>(logF_1dim__);
      stan::math::fill(logF, std::numeric_limits<double>::quiet_NaN());
      
      double Nex;
      Nex = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> E;
      E = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(E, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(L);
      vars__.emplace_back(F_diff);
      vars__.emplace_back(F_atmo);
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Esrc[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 15;
      Fsrc = 0.0;
      current_statement__ = 20;
      for (int k = 1; k <= Ns; ++k) {
        current_statement__ = 16;
        assign(F, cons_list(index_uni(k), nil_index_list()),
          (L / ((4 * stan::math::pi()) * pow((D[(k - 1)] * 3.086e+22), 2))),
          "assigning variable F");
        current_statement__ = 17;
        assign(F, cons_list(index_uni(k), nil_index_list()),
          (F[(k - 1)] * flux_conv(alpha, Esrc_min, Esrc_max, pstream__)),
          "assigning variable F");
        current_statement__ = 18;
        Fsrc = (Fsrc + F[(k - 1)]);}
      current_statement__ = 21;
      assign(F, cons_list(index_uni((Ns + 1)), nil_index_list()), F_diff,
        "assigning variable F");
      current_statement__ = 22;
      assign(F, cons_list(index_uni((Ns + 2)), nil_index_list()), F_atmo,
        "assigning variable F");
      current_statement__ = 23;
      Ftot = ((F_diff + F_atmo) + Fsrc);
      current_statement__ = 24;
      f = (Fsrc / Ftot);
      current_statement__ = 25;
      assign(logF, nil_index_list(), stan::math::log(F),
        "assigning variable logF");
      current_statement__ = 46;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 26;
        assign(lp, cons_list(index_uni(i), nil_index_list()), logF,
          "assigning variable lp");
        current_statement__ = 44;
        for (int k = 1; k <= (Ns + 2); ++k) {
          current_statement__ = 40;
          if (logical_lt(k, (Ns + 1))) {
            current_statement__ = 36;
            assign(lp,
              cons_list(index_uni(i),
                cons_list(index_uni(k), nil_index_list())),
              (lp[(i - 1)][(k - 1)] +
                spectrum_logpdf(Esrc[(i - 1)], alpha, Esrc_min,
                  Esrc_max, pstream__)), "assigning variable lp");
            current_statement__ = 37;
            assign(E, cons_list(index_uni(i), nil_index_list()),
              (Esrc[(i - 1)] / (1 + z[(k - 1)])), "assigning variable E");
            current_statement__ = 38;
            assign(lp,
              cons_list(index_uni(i),
                cons_list(index_uni(k), nil_index_list())),
              (lp[(i - 1)][(k - 1)] +
                NorthernTracksAngularResolution(E[(i - 1)], varpi[(k - 1)],
                  omega_det[(i - 1)], pstream__)), "assigning variable lp");
          } else {
            current_statement__ = 35;
            if (logical_eq(k, (Ns + 1))) {
              current_statement__ = 31;
              assign(lp,
                cons_list(index_uni(i),
                  cons_list(index_uni(k), nil_index_list())),
                (lp[(i - 1)][(k - 1)] +
                  spectrum_logpdf(Esrc[(i - 1)], alpha, Esrc_min,
                    Esrc_max, pstream__)), "assigning variable lp");
              current_statement__ = 32;
              assign(E, cons_list(index_uni(i), nil_index_list()),
                (Esrc[(i - 1)] / (1 + z[(k - 1)])), "assigning variable E");
              current_statement__ = 33;
              assign(lp,
                cons_list(index_uni(i),
                  cons_list(index_uni(k), nil_index_list())),
                (lp[(i - 1)][(k - 1)] + -2.5310242469692907),
                "assigning variable lp");
            } else {
              current_statement__ = 30;
              if (logical_eq(k, (Ns + 2))) {
                current_statement__ = 27;
                assign(lp,
                  cons_list(index_uni(i),
                    cons_list(index_uni(k), nil_index_list())),
                  (lp[(i - 1)][(k - 1)] +
                    stan::math::log(
                      (AtmopshericNumuFlux(Esrc[(i - 1)],
                         omega_det[(i - 1)], pstream__) /
                        1.8071375858713813e-08))), "assigning variable lp");
                current_statement__ = 28;
                assign(E, cons_list(index_uni(i), nil_index_list()),
                  Esrc[(i - 1)], "assigning variable E");
              } 
            }
          }
          current_statement__ = 41;
          assign(lp,
            cons_list(index_uni(i),
              cons_list(index_uni(k), nil_index_list())),
            (lp[(i - 1)][(k - 1)] +
              NorthernTracksEnergyResolution(E[(i - 1)],
                Edet[(i - 1)], pstream__)), "assigning variable lp");
          current_statement__ = 42;
          assign(lp,
            cons_list(index_uni(i),
              cons_list(index_uni(k), nil_index_list())),
            (lp[(i - 1)][(k - 1)] +
              stan::math::log(
                interpolate(E_grid, Pdet_grid[(k - 1)],
                  E[(i - 1)], pstream__))), "assigning variable lp");}}
      current_statement__ = 47;
      assign(eps, nil_index_list(),
        get_exposure_factor_atmo(alpha, alpha_grid, integral_grid,
          atmo_integ_val, T, Ns, pstream__), "assigning variable eps");
      current_statement__ = 48;
      Nex = get_Nex(F, eps, pstream__);
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "f", f, 0);
      current_statement__ = 9;
      current_statement__ = 9;
      check_less_or_equal(function__, "f", f, 1);
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "Ftot", Ftot, 0);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(Fsrc);
        for (int sym1__ = 1; sym1__ <= F_1dim__; ++sym1__) {
          vars__.emplace_back(F[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= eps_1dim__; ++sym1__) {
          vars__.emplace_back(eps[(sym1__ - 1)]);}
        vars__.emplace_back(f);
        vars__.emplace_back(Ftot);
        for (int sym1__ = 1; sym1__ <= lp_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(lp[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= logF_1dim__; ++sym1__) {
          vars__.emplace_back(logF[(sym1__ - 1)]);}
        vars__.emplace_back(Nex);
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(E[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double L;
      L = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      L = context__.vals_r("L")[(1 - 1)];
      current_statement__ = 1;
      L = stan::math::lub_free(L, 0, 1e+60);
      double F_diff;
      F_diff = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      F_diff = context__.vals_r("F_diff")[(1 - 1)];
      current_statement__ = 2;
      F_diff = stan::math::lub_free(F_diff, 0.0, 1e-07);
      double F_atmo;
      F_atmo = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      F_atmo = context__.vals_r("F_atmo")[(1 - 1)];
      current_statement__ = 3;
      F_atmo = stan::math::lub_free(F_atmo, 0.0, 1e-07);
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      current_statement__ = 4;
      alpha = stan::math::lub_free(alpha, 1.0, 4);
      Eigen::Matrix<double, -1, 1> Esrc;
      Esrc = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(Esrc, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Esrc_flat__;
        current_statement__ = 5;
        assign(Esrc_flat__, nil_index_list(), context__.vals_r("Esrc"),
          "assigning variable Esrc_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          assign(Esrc, cons_list(index_uni(sym1__), nil_index_list()),
            Esrc_flat__[(pos__ - 1)], "assigning variable Esrc");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        assign(Esrc, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(Esrc[(sym1__ - 1)], Esrc_min, Esrc_max),
          "assigning variable Esrc");}
      vars__.emplace_back(L);
      vars__.emplace_back(F_diff);
      vars__.emplace_back(F_atmo);
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(Esrc[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("L");
    names__.emplace_back("F_diff");
    names__.emplace_back("F_atmo");
    names__.emplace_back("alpha");
    names__.emplace_back("Esrc");
    names__.emplace_back("Fsrc");
    names__.emplace_back("F");
    names__.emplace_back("eps");
    names__.emplace_back("f");
    names__.emplace_back("Ftot");
    names__.emplace_back("lp");
    names__.emplace_back("logF");
    names__.emplace_back("Nex");
    names__.emplace_back("E");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(F_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(eps_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(lp_2dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(logF_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "L");
    param_names__.emplace_back(std::string() + "F_diff");
    param_names__.emplace_back(std::string() + "F_atmo");
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Esrc" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "Fsrc");
      for (int sym1__ = 1; sym1__ <= F_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "F" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= eps_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "eps" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "f");
      param_names__.emplace_back(std::string() + "Ftot");
      for (int sym1__ = 1; sym1__ <= lp_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= logF_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logF" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "Nex");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "E" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "L");
    param_names__.emplace_back(std::string() + "F_diff");
    param_names__.emplace_back(std::string() + "F_atmo");
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "Esrc" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "Fsrc");
      for (int sym1__ = 1; sym1__ <= F_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "F" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= eps_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "eps" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "f");
      param_names__.emplace_back(std::string() + "Ftot");
      for (int sym1__ = 1; sym1__ <= lp_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "lp" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= logF_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "logF" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "Nex");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "E" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"L\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"F_diff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"F_atmo\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Esrc\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"Fsrc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"F\",\"type\":{\"name\":\"vector\",\"length\":" << F_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" << eps_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Ftot\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lp\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << lp_2dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"logF\",\"type\":{\"name\":\"vector\",\"length\":" << logF_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nex\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"E\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"L\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"F_diff\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"F_atmo\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Esrc\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"Fsrc\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"F\",\"type\":{\"name\":\"vector\",\"length\":" << F_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" << eps_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Ftot\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lp\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << lp_2dim__ << "}},\"block\":\"transformed_parameters\"},{\"name\":\"logF\",\"type\":{\"name\":\"vector\",\"length\":" << logF_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"Nex\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"E\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
using stan_model = model_code_model_namespace::model_code_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


